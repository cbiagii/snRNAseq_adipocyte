[{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://cbiagii.github.io/AdipoSNAP/author/carlos-biagi-jr/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/AdipoSNAP/author/carlos-biagi-jr/","section":"authors","summary":"","tags":null,"title":"Carlos Biagi Jr","type":"authors"},{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"6cae85bb8eb9d9793f5bcfbc9553a52b","permalink":"https://cbiagii.github.io/AdipoSNAP/author/cleidson-alves/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/AdipoSNAP/author/cleidson-alves/","section":"authors","summary":"","tags":null,"title":"Cleidson Alves","type":"authors"},{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"c42f9d30e510573d6e8cbed8b43449af","permalink":"https://cbiagii.github.io/AdipoSNAP/author/miguel-l.-b.-junior/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/AdipoSNAP/author/miguel-l.-b.-junior/","section":"authors","summary":"","tags":null,"title":"Miguel L. B. Junior","type":"authors"},{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"435ff0d1246998e0d49b94b4220dd921","permalink":"https://cbiagii.github.io/AdipoSNAP/author/nabil-rabhi/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/AdipoSNAP/author/nabil-rabhi/","section":"authors","summary":"","tags":null,"title":"Nabil Rabhi","type":"authors"},{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"9c009b56f5c13c965d4eebd32b9b38dd","permalink":"https://cbiagii.github.io/AdipoSNAP/author/robson-carvalho/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/AdipoSNAP/author/robson-carvalho/","section":"authors","summary":"","tags":null,"title":"Robson Carvalho","type":"authors"},{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"768c1ce2ae46f57a00b98b3896c3cb77","permalink":"https://cbiagii.github.io/AdipoSNAP/author/sarah-santiloni-cury/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/AdipoSNAP/author/sarah-santiloni-cury/","section":"authors","summary":"","tags":null,"title":"Sarah Santiloni Cury","type":"authors"},{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"0494df6eed14ae84cef4c3a43a9bd4ab","permalink":"https://cbiagii.github.io/AdipoSNAP/author/stephen-r.-farmer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/AdipoSNAP/author/stephen-r.-farmer/","section":"authors","summary":"","tags":null,"title":"Stephen R. Farmer","type":"authors"},{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"d40e2c21aa2cbc28d47b0cb94a82eecf","permalink":"https://cbiagii.github.io/AdipoSNAP/author/wilson-a.-da-s.-junior/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/AdipoSNAP/author/wilson-a.-da-s.-junior/","section":"authors","summary":"","tags":null,"title":"Wilson A. da S. Junior","type":"authors"},{"authors":null,"categories":null,"content":"In this section we will show you how to configure your R environment by installing all the necessary dependencies to run the following codes. The dependencies. The dependencies include packages from the CRAN and Bioconductor repositories. To install, just use the following commands:\n# Install additional CRAN packages CRAN_packages \u0026lt;- c('BiocManager', 'circlize', 'dplyr', 'enrichR', 'future', 'ggplot2', 'ggpubr', 'ggrepel', 'ggtext', 'glue', 'pheatmap', 'RColorBrewer', 'scales', 'tibble', 'tidyr', 'UpSetR', 'viridis') new.packages \u0026lt;- CRAN_packages[!(CRAN_packages %in% installed.packages()[,\u0026quot;Package\u0026quot;])] if(length(new.packages)) { install.packages(new.packages) } # Install additional Bioconductor packages Bioconductor_packages \u0026lt;- c('ComplexHeatmap', 'DropletUtils', 'fgsea', 'monocle', 'Nebulosa') new.packages \u0026lt;- Bioconductor_packages[!(Bioconductor_packages %in% installed.packages()[,\u0026quot;Package\u0026quot;])] if(length(new.packages)) { BiocManager::install(new.packages) } # Install reticulate package install.packages('reticulate') # Install Seurat and SeuratWrappers packages install.packages('Seurat') remotes::install_github('satijalab/seurat-wrappers') # Install metacell package if(length('metacell'[!('metacell' %in% installed.packages()[,\u0026quot;Package\u0026quot;])])) { BiocManager::install(\u0026quot;tanaylab/metacell\u0026quot;) }  ","date":1602979200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602979200,"objectID":"7c9e75dbc764883af3f392f40c3824a1","permalink":"https://cbiagii.github.io/AdipoSNAP/post/1_setup/","publishdate":"2020-10-18T00:00:00Z","relpermalink":"/AdipoSNAP/post/1_setup/","section":"post","summary":"In this section we will show you how to configure your R environment by installing all the necessary dependencies to run the following codes. The dependencies. The dependencies include packages from the CRAN and Bioconductor repositories.","tags":null,"title":"1 - Setting up R environment","type":"post"},{"authors":null,"categories":null,"content":"It is necessary to load some functions that were written directly to plot some results in the following codes.\nSeuratToH5ad This function converts a Seurat Object to h5ad file to perform SCCAF analysis:\nSeuratToH5ad \u0026lt;- function(seurat_object, filename, assay = NULL, res = 1) { library(reticulate) if (!py_module_available(\u0026quot;anndata\u0026quot;) | !py_module_available(\u0026quot;scanpy\u0026quot;) | !py_module_available(\u0026quot;igraph\u0026quot;) | !py_module_available(\u0026quot;louvain\u0026quot;)) { stop(\u0026quot;Please install the anndata python module\u0026quot;) } ad \u0026lt;- import(\u0026quot;anndata\u0026quot;) sc \u0026lt;- import(\u0026quot;scanpy\u0026quot;) message(paste(\u0026quot;Starting to fix the mess...\u0026quot;)) raw \u0026lt;- seurat_object@assays$RNA@data if (assay == \u0026quot;RNA\u0026quot;) { X \u0026lt;- as.matrix(seurat_object@assays$RNA@data) } else if (assay == \u0026quot;SCT\u0026quot;) { X \u0026lt;- as.matrix(seurat_object@assays$SCT@data) } else { stop(\u0026quot;Please select an existent assay\u0026quot;) } cell_names \u0026lt;- colnames(x = X) gene_names \u0026lt;- rownames(x = X) raw \u0026lt;- as(object = raw, Class = \u0026quot;dgCMatrix\u0026quot;) scipy \u0026lt;- import(module = 'scipy.sparse', convert = FALSE) sp_sparse_csc \u0026lt;- scipy$csc_matrix raw.rownames \u0026lt;- rownames(x = raw) raw \u0026lt;- sp_sparse_csc( tuple(np_array(raw@x), np_array(raw@i), np_array(raw@p)), shape = tuple(raw@Dim[1], raw@Dim[2]) ) raw \u0026lt;- raw$T raw \u0026lt;- dict(X = raw, var = dict(var_names = raw.rownames)) X \u0026lt;- np_array(t(x = X)) obsm \u0026lt;- list() for (dr in names(seurat_object@reductions)) { obsm[[paste0(\u0026quot;X_\u0026quot;,dr)]] \u0026lt;- np_array(Embeddings( object = seurat_object, reduction = dr )) } obsm \u0026lt;- dict(obsm) meta_data \u0026lt;- seurat_object@meta.data if (\u0026quot;nCount_RNA\u0026quot; %in% colnames(x = meta_data)) { colnames(x = meta_data) \u0026lt;- gsub( pattern = \u0026quot;nCount_RNA\u0026quot;, replacement = \u0026quot;n_counts\u0026quot;, x = colnames(x = meta_data) ) } if (\u0026quot;nFeature_RNA\u0026quot; %in% colnames(x = meta_data)) { colnames(x = meta_data) \u0026lt;- gsub( pattern = \u0026quot;nFeature_RNA\u0026quot;, replacement = \u0026quot;n_genes\u0026quot;, x = colnames(x = meta_data) ) } colnames(x = meta_data) \u0026lt;- gsub( pattern = \u0026quot;\\\\.\u0026quot;, replacement = \u0026quot;_\u0026quot;, x = colnames(x = meta_data) ) anndata.object \u0026lt;- ad$AnnData( raw = raw, X = X, obs = meta_data, obsm = obsm ) anndata.object$var_names \u0026lt;- gene_names anndata.object$obs_names \u0026lt;- cell_names message(paste(\u0026quot;Clustering for resolution:\u0026quot;, res)) sc$pp$neighbors(anndata.object) sc$tl$louvain(anndata.object, resolution=res, key_added = \u0026quot;L1_Round0\u0026quot;) message(paste(\u0026quot;Writing to h5ad file...\u0026quot;)) anndata.object$write(filename) message(paste(\u0026quot;Finished!!\u0026quot;)) }  volcano.plot This function plot a volcano plot with results of function FindAllMarkers from Seurat package:\nvolcano.plot \u0026lt;- function(res, upGenes = NULL, downGenes = NULL){ mut \u0026lt;- as.data.frame(res) mut \u0026lt;- na.omit(mut) mutateddf \u0026lt;- mutate(mut, sig=ifelse(mut$gene %in% upGenes,\u0026quot;Up_regulated\u0026quot;, ifelse(mut$gene %in% downGenes , \u0026quot;Down_regulated\u0026quot;, \u0026quot;Not_different\u0026quot;))) rownames(mutateddf) \u0026lt;- rownames(mut) input \u0026lt;- cbind(gene=rownames(mutateddf), mutateddf) colnames(input)[which(colnames(input)==\u0026quot;sig\u0026quot;)] \u0026lt;- \u0026quot;Significance\u0026quot; input[,1] \u0026lt;- NULL input[which(input[[\u0026quot;p_val_adj\u0026quot;]] == 0), \u0026quot;p_val_adj\u0026quot;] \u0026lt;- min(input[which(input[[\u0026quot;p_val_adj\u0026quot;]] != 0), \u0026quot;p_val_adj\u0026quot;], na.rm = TRUE) * 10^-1 p \u0026lt;- ggplot(input, aes(avg_logFC, -log10(p_val_adj))) + geom_point(colour=\u0026quot;white\u0026quot;) + ggtitle(\u0026quot;\u0026quot;) + theme_bw() + scale_y_continuous(limits = c(0, -log10(input$p_val_adj))) p \u0026lt;- p + geom_point(data=subset(input, input$Significance == 'Not_different'), aes(avg_logFC, -log10(p_val_adj)), colour=\u0026quot;gray70\u0026quot;) + geom_point(data=subset(input, input$Significance == 'Up_regulated'), aes(avg_logFC, -log10(p_val_adj)), colour=\u0026quot;firebrick4\u0026quot;) + geom_point(data=subset(input, input$Significance == 'Down_regulated'), aes(avg_logFC, -log10(p_val_adj)), colour=\u0026quot;dodgerblue\u0026quot;) + xlab(\u0026quot;logFC\u0026quot;) + ylab(\u0026quot;-log10(padj)\u0026quot;) p \u0026lt;- p + geom_text_repel(data=input[c(head(upGenes, 5), head(downGenes, 5)), ], aes(label=gene)) return(p) }  plotMonocle This function plot the monocle trajectory for one or more genes:\nplotMonocle \u0026lt;- function(cds, gene) { if (sum(gene %in% rownames(cds)) == 0) { stop('None gene found in dataset') } if (sum(gene %in% rownames(cds)) != length(gene)) { gene \u0026lt;- gene[gene %in% rownames(cds)] } suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(monocle)) suppressPackageStartupMessages(library(scales)) suppressPackageStartupMessages(library(ggpubr)) suppressPackageStartupMessages(library(viridis)) return_rotation_mat \u0026lt;- function(theta) { theta \u0026lt;- theta/180 * pi matrix(c(cos(theta), sin(theta), -sin(theta), cos(theta)), nrow = 2) } monocle_theme_opts \u0026lt;- function() { theme(strip.background = element_rect(colour = 'white', fill = 'white')) + theme(panel.border = element_blank()) + theme(axis.line.x = element_line(size=0.25, color=\u0026quot;black\u0026quot;)) + theme(axis.line.y = element_line(size=0.25, color=\u0026quot;black\u0026quot;)) + theme(panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank()) + theme(panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank()) + theme(panel.background = element_rect(fill='white')) + theme(legend.key=element_blank()) } tmp \u0026lt;- cds@assayData$exprs[gene, ] if (length(gene) == 1) { tmp \u0026lt;- rescale(tmp, to = c(-2,2)) cds[[gene]] \u0026lt;- tmp } else { tmp \u0026lt;- apply(tmp, 1, function(x) rescale(x, to = c(-2,2))) for (i in 1:ncol(tmp)) { cds[[colnames(tmp)[i]]] \u0026lt;- tmp[,i] } } pt \u0026lt;- plot_cell_trajectory(cds, color_by = gene[1]) reduced_dim_coords \u0026lt;- reducedDimK(cds) ica_space_df \u0026lt;- Matrix::t(reduced_dim_coords) %\u0026gt;% as.data.frame() %\u0026gt;% select_(prin_graph_dim_1 = 1, prin_graph_dim_2 = 2) %\u0026gt;% mutate(sample_name = rownames(.), sample_state = rownames(.)) dp_mst \u0026lt;- minSpanningTree(cds) edge_df \u0026lt;- dp_mst %\u0026gt;% igraph::as_data_frame() %\u0026gt;% select_(source = \u0026quot;from\u0026quot;, target = \u0026quot;to\u0026quot;) %\u0026gt;% left_join(ica_space_df %\u0026gt;% select_(source = \u0026quot;sample_name\u0026quot;, source_prin_graph_dim_1 = \u0026quot;prin_graph_dim_1\u0026quot;, source_prin_graph_dim_2 = \u0026quot;prin_graph_dim_2\u0026quot;), by = \u0026quot;source\u0026quot;) %\u0026gt;% left_join(ica_space_df %\u0026gt;% select_(target = \u0026quot;sample_name\u0026quot;, target_prin_graph_dim_1 = \u0026quot;prin_graph_dim_1\u0026quot;, target_prin_graph_dim_2 = \u0026quot;prin_graph_dim_2\u0026quot;), by = \u0026quot;target\u0026quot;) rot_mat \u0026lt;- return_rotation_mat(0) cn2 \u0026lt;- c(\u0026quot;source_prin_graph_dim_1\u0026quot;, \u0026quot;source_prin_graph_dim_2\u0026quot;) cn3 \u0026lt;- c(\u0026quot;target_prin_graph_dim_1\u0026quot;, \u0026quot;target_prin_graph_dim_2\u0026quot;) edge_df[, cn2] \u0026lt;- as.matrix(edge_df[, cn2]) %*% t(rot_mat) edge_df[, cn3] \u0026lt;- as.matrix(edge_df[, cn3]) %*% t(rot_mat) data_df \u0026lt;- pt$data g \u0026lt;- ggplot(data = data_df, aes(x = data_dim_1, y = data_dim_2)) g \u0026lt;- g + geom_segment(aes_string(x = \u0026quot;source_prin_graph_dim_1\u0026quot;, y = \u0026quot;source_prin_graph_dim_2\u0026quot;, xend = \u0026quot;target_prin_graph_dim_1\u0026quot;, yend = \u0026quot;target_prin_graph_dim_2\u0026quot;), size = 0.75, linetype = \u0026quot;solid\u0026quot;, na.rm = TRUE, data = edge_df) mst_branch_nodes \u0026lt;- cds@auxOrderingData[[cds@dim_reduce_type]]$branch_points branch_point_df \u0026lt;- ica_space_df %\u0026gt;% dplyr::slice(match(mst_branch_nodes, sample_name)) %\u0026gt;% mutate(branch_point_idx = seq_len(n())) g \u0026lt;- g + monocle_theme_opts() + xlab(\u0026quot;Component 1\u0026quot;) + ylab(\u0026quot;Component 2\u0026quot;) + theme(legend.position = \u0026quot;top\u0026quot;, legend.key.height = grid::unit(0.35, \u0026quot;in\u0026quot;)) + theme(legend.key = element_blank()) + theme(panel.background = element_rect(fill = \u0026quot;white\u0026quot;)) plotlist \u0026lt;- list() for (i in 1:length(gene)) { plotlist[[i]] \u0026lt;- g + geom_point(data = data_df[which(data_df[[gene[i]]] \u0026lt; 0), ], aes_string(color = paste0('`', gene[i], '`')), size = I(0.5), na.rm = TRUE) + geom_point(data = data_df[which(data_df[[gene[i]]] \u0026gt; 0), ], aes_string(color = paste0('`', gene[i], '`')), size = I(0.8), na.rm = TRUE) + scale_color_viridis(option = 'C', discrete = F, end = 0.9) + ggtitle(gene[i]) + theme(plot.title = element_text(hjust = 0.5)) + labs(color = \u0026quot;\u0026quot;) + geom_point(aes_string(x = \u0026quot;prin_graph_dim_1\u0026quot;, y = \u0026quot;prin_graph_dim_2\u0026quot;), size = 4, na.rm = TRUE, branch_point_df) + geom_text(aes_string(x = \u0026quot;prin_graph_dim_1\u0026quot;, y = \u0026quot;prin_graph_dim_2\u0026quot;, label = \u0026quot;branch_point_idx\u0026quot;), size = 3, color = \u0026quot;white\u0026quot;, na.rm = TRUE, branch_point_df) } pt2 \u0026lt;- ggarrange(plotlist = plotlist, common.legend = T) return(pt2) }  ","date":1602892800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602892800,"objectID":"5766a738d5a6fca7ce14fb783d5da252","permalink":"https://cbiagii.github.io/AdipoSNAP/post/2_functions/","publishdate":"2020-10-17T00:00:00Z","relpermalink":"/AdipoSNAP/post/2_functions/","section":"post","summary":"It is necessary to load some functions that were written directly to plot some results in the following codes.\nSeuratToH5ad This function converts a Seurat Object to h5ad file to perform SCCAF analysis:","tags":null,"title":"2 - Loading functions","type":"post"},{"authors":null,"categories":null,"content":"Performing preprocessing using the original clustering information\n## Loading R packages library(Seurat) ## Loading data Cellranger output format data \u0026lt;- Read10X(\u0026quot;/Users/biagi/PhD/AdipoSNAP/data/10x/\u0026quot;) ## Reading metadata annotation anno \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/AdipoSNAP/data/GSE133486_10XAdiposeNuclei.metaData.tsv\u0026quot;) ## Creating Seurat object data \u0026lt;- CreateSeuratObject(counts = data, project = \u0026quot;Adipocyte\u0026quot;, meta.data = anno, min.cells = 3, min.features = 200) ## Subset remaining only N condition data \u0026lt;- subset(data, cells = rownames(data@meta.data)[which(data@meta.data$condition == \u0026quot;N\u0026quot;)]) ## Cell cycle genes m.s.genes \u0026lt;- c(\u0026quot;Gmnn\u0026quot;, \u0026quot;Rad51\u0026quot;, \u0026quot;Prim1\u0026quot;, \u0026quot;Dscc1\u0026quot;, \u0026quot;Cdca7\u0026quot;, \u0026quot;Slbp\u0026quot;, \u0026quot;Mcm7\u0026quot;, \u0026quot;Cenpu\u0026quot;, \u0026quot;Pold3\u0026quot;, \u0026quot;Ccne2\u0026quot;, \u0026quot;Mcm4\u0026quot;, \u0026quot;Polr1b\u0026quot;, \u0026quot;Fen1\u0026quot;, \u0026quot;Rad51ap1\u0026quot;, \u0026quot;Tyms\u0026quot;, \u0026quot;Usp1\u0026quot;, \u0026quot;Rrm2\u0026quot;, \u0026quot;Wdr76\u0026quot;, \u0026quot;Dtl\u0026quot;, \u0026quot;Rrm1\u0026quot;, \u0026quot;Gins2\u0026quot;, \u0026quot;Tipin\u0026quot;, \u0026quot;Hells\u0026quot;, \u0026quot;Ubr7\u0026quot;, \u0026quot;Chaf1b\u0026quot;, \u0026quot;Clspn\u0026quot;, \u0026quot;E2f8\u0026quot;, \u0026quot;Mcm5\u0026quot;, \u0026quot;Nasp\u0026quot;, \u0026quot;Pcna\u0026quot;, \u0026quot;Mrpl36\u0026quot;, \u0026quot;Rfc2\u0026quot;, \u0026quot;Cdc45\u0026quot;, \u0026quot;Casp8ap2\u0026quot;, \u0026quot;Mcm6\u0026quot;, \u0026quot;Exo1\u0026quot;, \u0026quot;Pola1\u0026quot;, \u0026quot;Cdc6\u0026quot;, \u0026quot;Ung\u0026quot;, \u0026quot;Uhrf1\u0026quot;, \u0026quot;Blm\u0026quot;, \u0026quot;Msh2\u0026quot;) m.g2m.genes \u0026lt;- c(\u0026quot;Cdk1\u0026quot;, \u0026quot;Tmpo\u0026quot;, \u0026quot;Smc4\u0026quot;, \u0026quot;Tacc3\u0026quot;, \u0026quot;Mki67\u0026quot;, \u0026quot;Ckap2l\u0026quot;, \u0026quot;Cks2\u0026quot;, \u0026quot;Cdc25c\u0026quot;, \u0026quot;Nusap1\u0026quot;, \u0026quot;Kif11\u0026quot;, \u0026quot;Top2a\u0026quot;, \u0026quot;Cdca3\u0026quot;, \u0026quot;Cks1b\u0026quot;, \u0026quot;Ect2\u0026quot;, \u0026quot;Ckap5\u0026quot;, \u0026quot;Ckap2\u0026quot;, \u0026quot;Cenpa\u0026quot;, \u0026quot;Cdca2\u0026quot;, \u0026quot;Ncapd2\u0026quot;, \u0026quot;Aurkb\u0026quot;, \u0026quot;Cenpf\u0026quot;, \u0026quot;Gtse1\u0026quot;, \u0026quot;Birc5\u0026quot;, \u0026quot;Bub1\u0026quot;, \u0026quot;Cdca8\u0026quot;, \u0026quot;Anp32e\u0026quot;, \u0026quot;Rangap1\u0026quot;, \u0026quot;Tpx2\u0026quot;, \u0026quot;Hjurp\u0026quot;, \u0026quot;Lbr\u0026quot;, \u0026quot;Dlgap5\u0026quot;, \u0026quot;Psrc1\u0026quot;, \u0026quot;Ndc80\u0026quot;, \u0026quot;Nek2\u0026quot;, \u0026quot;Cbx5\u0026quot;, \u0026quot;Ube2c\u0026quot;, \u0026quot;Gas2l3\u0026quot;, \u0026quot;G2e3\u0026quot;, \u0026quot;Cdc20\u0026quot;, \u0026quot;Hmgb2\u0026quot;, \u0026quot;Cenpe\u0026quot;, \u0026quot;Nuf2\u0026quot;, \u0026quot;Anln\u0026quot;, \u0026quot;Ttk\u0026quot;, \u0026quot;Kif2c\u0026quot;, \u0026quot;Kif20b\u0026quot;, \u0026quot;Aurka\u0026quot;, \u0026quot;Hmmr\u0026quot;, \u0026quot;Pimreg\u0026quot;, \u0026quot;Cks1brt\u0026quot;, \u0026quot;Tubb4b\u0026quot;, \u0026quot;Kif23\u0026quot;, \u0026quot;Ccnb2\u0026quot;, \u0026quot;Ctcf\u0026quot;) ## MT based cell thresholding data \u0026lt;- subset(data, subset = nFeature_RNA \u0026gt; 200 \u0026amp; nFeature_RNA \u0026lt; 2500) ## Normalizing data data \u0026lt;- NormalizeData(data) ## Finding variable features data \u0026lt;- FindVariableFeatures(data) ## Scoring cell cycle phases data \u0026lt;- CellCycleScoring(data, s.features = m.s.genes, g2m.features = m.g2m.genes, set.ident = TRUE) ## Scalling and centering the data regressing out nCount_RNA, S.Score and G2M.Score data \u0026lt;- ScaleData(data, vars.to.regress = c(\u0026quot;nCount_RNA\u0026quot;, \u0026quot;S.Score\u0026quot;, \u0026quot;G2M.Score\u0026quot;)) # Running PCA data \u0026lt;- RunPCA(data) ## Defining the best number of PC that has a explained variance greater than 80% dp \u0026lt;- data@reductions$pca@stdev dp \u0026lt;- dp^2 for (z in 1:length(dp)) { soma \u0026lt;- sum(dp[1:z])/sum(dp) if (soma \u0026gt;= 0.8) { best_pc \u0026lt;- z break() } } ## Clustering data \u0026lt;- FindNeighbors(data, dims = 1:best_pc) data \u0026lt;- FindClusters(data) ## RunUMAP data \u0026lt;- RunUMAP(data, dims = 1:best_pc) ## RunUMAP data \u0026lt;- RunTSNE(data, dims = 1:best_pc, max_iter = 5000, perplexity = 50, verbose = T) ## Saving RDS file saveRDS(data, \u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_Processed.rds\u0026quot;)  ","date":1602806400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602806400,"objectID":"a374cc5bb43a62b9006968c8acf8b98c","permalink":"https://cbiagii.github.io/AdipoSNAP/post/3_original_preprocess/","publishdate":"2020-10-16T00:00:00Z","relpermalink":"/AdipoSNAP/post/3_original_preprocess/","section":"post","summary":"Performing preprocessing using the original clustering information\n## Loading R packages library(Seurat) ## Loading data Cellranger output format data \u0026lt;- Read10X(\u0026quot;/Users/biagi/PhD/AdipoSNAP/data/10x/\u0026quot;) ## Reading metadata annotation anno \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/AdipoSNAP/data/GSE133486_10XAdiposeNuclei.metaData.tsv\u0026quot;) ## Creating Seurat object data \u0026lt;- CreateSeuratObject(counts = data, project = \u0026quot;Adipocyte\u0026quot;, meta.","tags":null,"title":"3 - Original preprocessing","type":"post"},{"authors":null,"categories":null,"content":"In this section we will perform the cell type classification using metacell package:\n## Loading R packages library(Seurat) library(future) library(metacell) library(ggpubr) library(DropletUtils) library(pheatmap) ## Convert an Seurat object to 10x format to input in metacell data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_Processed.rds\u0026quot;) write10xCounts(x = data@assays$RNA@counts, path = \u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell/data\u0026quot;) ## Initializing a database if(!dir.exists(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell/db\u0026quot;)) dir.create(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell/db\u0026quot;) scdb_init(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell/db\u0026quot;, force_reinit=T) ## Loading the data generated by the 10x conversion above mcell_import_scmat_10x(\u0026quot;test1\u0026quot;, base_dir=\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell/data\u0026quot;) mat = scdb_mat(\u0026quot;test1\u0026quot;) ## Linking to a figure directory if(!dir.exists(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell/figs\u0026quot;)) dir.create(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell/figs\u0026quot;) scfigs_init(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell/figs\u0026quot;) ## Plotting the distribution of UMI count per cell mcell_plot_umis_per_cell(\u0026quot;test1\u0026quot;) ## Cleaning the data using a list of mitochondrial genes that typically mark cells as being stressed or dying, as well as immunoglobulin genes that may represent strong clonal signatures in plasma cells mat \u0026lt;- scdb_mat(\u0026quot;test1\u0026quot;) nms \u0026lt;- c(rownames(mat@mat), rownames(mat@ignore_gmat)) ig_genes \u0026lt;- c(grep(\u0026quot;^Igj\u0026quot;, nms, v=T), grep(\u0026quot;^Igh\u0026quot;,nms,v=T), grep(\u0026quot;^Igk\u0026quot;, nms, v=T), grep(\u0026quot;^Igl\u0026quot;, nms, v=T)) bad_genes \u0026lt;- unique(c(grep(\u0026quot;^mt-\u0026quot;, nms, v=T), grep(\u0026quot;^mtmr\u0026quot;, nms, v=T), grep(\u0026quot;^Mtnd\u0026quot;, nms, v=T),\u0026quot;NEAT1\u0026quot;,\u0026quot;TMSB4X\u0026quot;, \u0026quot;TMSB10\u0026quot;, ig_genes)) mcell_mat_ignore_genes(new_mat_id=\u0026quot;test1\u0026quot;, mat_id=\u0026quot;test1\u0026quot;, bad_genes, reverse=F) ## Eliminating cells with less than 700 UMIs mcell_mat_ignore_small_cells(\u0026quot;test1\u0026quot;, \u0026quot;test1\u0026quot;, 700) ## Computing statistics on the distributions of each gene in the data, which are going to be our main tool for selecting feature genes mcell_add_gene_stat(gstat_id=\u0026quot;test1\u0026quot;, mat_id=\u0026quot;test1\u0026quot;, force=T) ## We create a new object of type gset, to which all genes whose scaled variance (variance divided by mean) exceeds a given threshold are added: mcell_gset_filter_varmean(gset_id=\u0026quot;test_feats\u0026quot;, gstat_id=\u0026quot;test1\u0026quot;, T_vm=0.08, force_new=T) mcell_gset_filter_cov(gset_id = \u0026quot;test_feats\u0026quot;, gstat_id=\u0026quot;test1\u0026quot;, T_tot=100, T_top3=2) ## Plotting all genes and our selected gene set given the mean and variance statistics mcell_plot_gstats(gstat_id=\u0026quot;test1\u0026quot;, gset_id=\u0026quot;test_feats\u0026quot;) ## Creating a similarity graph, using a construction called balanced K-nn graph mcell_add_cgraph_from_mat_bknn(mat_id=\u0026quot;test1\u0026quot;, gset_id = \u0026quot;test_feats\u0026quot;, graph_id=\u0026quot;test_graph\u0026quot;, K=150, dsamp=F) ## Use the cgraph to sample 1000 metacell partitions, each covering 75% of the cells and organizing them in dense subgraphs mcell_coclust_from_graph_resamp( coc_id=\u0026quot;test_coc500\u0026quot;, graph_id=\u0026quot;test_graph\u0026quot;, min_mc_size=20, p_resamp=0.75, n_resamp=1000) ## The co-clustering statistics are used to generate a new similarity graph, based on which accurate calling of the final set of metacells mcell_mc_from_coclust_balanced( coc_id=\u0026quot;test_coc500\u0026quot;, mat_id= \u0026quot;test1\u0026quot;, mc_id= \u0026quot;test_mc\u0026quot;, K=20, min_mc_size=20, alpha=2) ## Splitting metacells whose underlying similarity structure supports the existence of multiple sub-clusters, and removes outlier cells that strongly deviate from their metacell's expression profile mcell_plot_outlier_heatmap(mc_id=\u0026quot;test_mc\u0026quot;, mat_id = \u0026quot;test1\u0026quot;, T_lfc=3) mcell_mc_split_filt(new_mc_id=\u0026quot;test_mc_f\u0026quot;, mc_id=\u0026quot;test_mc\u0026quot;, mat_id=\u0026quot;test1\u0026quot;, T_lfc=3, plot_mats=F) ## The filtered metacell object test_mc_f can now be visualized. In order to do this effectively, we usually go through one or two iterations of selecting informative marker genes. The package can select markers for you automatically - by simply looking for genes that are strongly enriched in any of the metacells mcell_gset_from_mc_markers(gset_id=\u0026quot;test_markers\u0026quot;, mc_id=\u0026quot;test_mc_f\u0026quot;) ## Running 1st Round with known markers load(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell/db/mc.test_mc_f.Rda\u0026quot;) lfp \u0026lt;- log2(object@mc_fp) marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;blue\u0026quot;, 1, 2)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial\u0026quot;, \u0026quot;Pecam1\u0026quot;, \u0026quot;green\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_1\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;#ff748c\u0026quot;, 1, 0.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_2\u0026quot;, \u0026quot;Cd19\u0026quot;, \u0026quot;#ff8fa3\u0026quot;, 1, 0.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_1\u0026quot;, \u0026quot;Cd34\u0026quot;, \u0026quot;#ffa500\u0026quot;, 1, 2)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_2\u0026quot;, \u0026quot;Pdgfra\u0026quot;, \u0026quot;#ffb732\u0026quot;, 1, 2)) marks_colors \u0026lt;- as.data.frame(marks_colors) colnames(marks_colors) \u0026lt;- c(\u0026quot;group\u0026quot;, \u0026quot;gene\u0026quot;, \u0026quot;color\u0026quot;, \u0026quot;priority\u0026quot;, \u0026quot;T_fold\u0026quot;) marks_colors$priority \u0026lt;- as.integer(marks_colors$priority) marks_colors$T_fold \u0026lt;- as.numeric(marks_colors$T_fold) mc = scdb_mc(\u0026quot;test_mc_f\u0026quot;) gene_folds \u0026lt;- mc@mc_fp load(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell/db/gset.test_markers.Rda\u0026quot;) gset \u0026lt;- object good_marks \u0026lt;- intersect(names(gset@gene_set), rownames(mc@mc_fp)) mc_ord \u0026lt;- 1:ncol(mc@mc_fp) mat = log2(gene_folds[good_marks, mc_ord]) mat = pmax(pmin(mat, 3), -3) ## Selecting best markers for adipocyte cells mat_A \u0026lt;- mat[, which(mc@colors == \u0026quot;blue\u0026quot;)] mat_A \u0026lt;- mat_A[rowSums(mat_A) \u0026gt; quantile(rowSums(mat_A), 0.9), ] rowMeans(mat_A[names(head(sort(rowSums(mat_A), decreasing = T), 5)), ]) ## Selecting best markers for endothelial cells mat_E \u0026lt;- mat[, which(mc@colors == \u0026quot;green\u0026quot;)] mat_E \u0026lt;- mat_E[rowSums(mat_E) \u0026gt; quantile(rowSums(mat_E), 0.9), ] rowMeans(mat_E[names(head(sort(rowSums(mat_E), decreasing = T), 5)), ]) ## Selecting best markers for immune cells mat_I \u0026lt;- mat[, which(mc@colors %in% c(\u0026quot;#ff748c\u0026quot;, \u0026quot;#ff8fa3\u0026quot;))] mat_I \u0026lt;- mat_I[rowSums(mat_I) \u0026gt; quantile(rowSums(mat_I), 0.9), ] rowMeans(mat_I[names(head(sort(rowSums(mat_I), decreasing = T), 5)), ]) ## Selecting best markers for progenitor cells mat_P \u0026lt;- mat[, which(mc@colors %in% c(\u0026quot;#ffa500\u0026quot;, \u0026quot;#ffb732\u0026quot;))] mat_P \u0026lt;- mat_P[rowSums(mat_P) \u0026gt; quantile(rowSums(mat_P), 0.9), ] rowMeans(mat_P[names(head(sort(rowSums(mat_P), decreasing = T), 5)), ]) ## Plotting heatmat to check the found markers items \u0026lt;- list(Adipocytes = mat_A, Endothelials = mat_E, Immunes = mat_I, Progenitors = mat_P) plot_list=list() for (i in 1:length(items)){ x \u0026lt;- pheatmap(items[[i]], fontsize = 6, main = names(items)[i], legend = FALSE, treeheight_row = 0, treeheight_col = 0) plot_list[[i]] = x[[4]] } gggpubr(plotlist = plot_list, ncol = 2) ## Running 2nd round with unsupervised markers provided by metacell marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_1\u0026quot;, \u0026quot;Acsl1\u0026quot;, \u0026quot;#0000b3\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_2\u0026quot;, \u0026quot;Plin4\u0026quot;, \u0026quot;#0000cc\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_3\u0026quot;, \u0026quot;Mlxipl\u0026quot;, \u0026quot;#0000e6\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_4\u0026quot;, \u0026quot;Pck1\u0026quot;, \u0026quot;#0000ff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_5\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;#1a1aff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_1\u0026quot;, \u0026quot;Btnl9\u0026quot;, \u0026quot;#00cd00\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_2\u0026quot;, \u0026quot;Flt1\u0026quot;, \u0026quot;#00b300\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_3\u0026quot;, \u0026quot;Kdr\u0026quot;, \u0026quot;#009a00\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_4\u0026quot;, \u0026quot;Cdh13\u0026quot;, \u0026quot;#008000\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_5\u0026quot;, \u0026quot;Cyyr1\u0026quot;, \u0026quot;#006700\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_1\u0026quot;, \u0026quot;Zeb2\u0026quot;, \u0026quot;#ff7f7f\u0026quot;, 1, 0.85)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_2\u0026quot;, \u0026quot;Trps1\u0026quot;, \u0026quot;#ff6666\u0026quot;, 1, 0.85)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_3\u0026quot;, \u0026quot;Runx1\u0026quot;, \u0026quot;#ff4c4c\u0026quot;, 1, 0.85)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_4\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;#ff3232\u0026quot;, 1, 0.85)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_5\u0026quot;, \u0026quot;Adap2\u0026quot;, \u0026quot;#ff1919\u0026quot;, 1, 0.85)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_1\u0026quot;, \u0026quot;Dcn\u0026quot;, \u0026quot;#ffff4d\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_2\u0026quot;, \u0026quot;Celf2\u0026quot;, \u0026quot;#ffff33\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_3\u0026quot;, \u0026quot;Meg3\u0026quot;, \u0026quot;#ffff1a\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_4\u0026quot;, \u0026quot;Col1a2\u0026quot;, \u0026quot;#ffff00\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_5\u0026quot;, \u0026quot;Col3a1\u0026quot;, \u0026quot;#e6e600\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- as.data.frame(marks_colors) colnames(marks_colors) \u0026lt;- c(\u0026quot;group\u0026quot;, \u0026quot;gene\u0026quot;, \u0026quot;color\u0026quot;, \u0026quot;priority\u0026quot;, \u0026quot;T_fold\u0026quot;) marks_colors$priority \u0026lt;- as.integer(marks_colors$priority) marks_colors$T_fold \u0026lt;- as.numeric(marks_colors$T_fold) mc_colorize(\u0026quot;test_mc_f\u0026quot;, marker_colors=marks_colors) mc \u0026lt;- scdb_mc(\u0026quot;test_mc_f\u0026quot;) ## We can use the colors to produce a labeled heat map, showing selected genes and their distributions over metacells, with the colored annotation shown at the bottom mcell_mc_plot_marks(mc_id=\u0026quot;test_mc_f\u0026quot;, gset_id=\u0026quot;test_markers\u0026quot;, mat_id=\u0026quot;test1\u0026quot;, plot_cells = F) lfp \u0026lt;- log2(mc@mc_fp) ## Projecting metacells and cells in 2D mcell_mc2d_force_knn(mc2d_id=\u0026quot;test_2dproj\u0026quot;,mc_id=\u0026quot;test_mc_f\u0026quot;, graph_id=\u0026quot;test_graph\u0026quot;) tgconfig::set_param(\u0026quot;mcell_mc2d_height\u0026quot;,1000, \u0026quot;metacell\u0026quot;) tgconfig::set_param(\u0026quot;mcell_mc2d_width\u0026quot;,1000, \u0026quot;metacell\u0026quot;) mcell_mc2d_plot(mc2d_id=\u0026quot;test_2dproj\u0026quot;)  ","date":1602720000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602720000,"objectID":"eeab744ba61496bf284874be42a1f646","permalink":"https://cbiagii.github.io/AdipoSNAP/post/4_metacell_original/","publishdate":"2020-10-15T00:00:00Z","relpermalink":"/AdipoSNAP/post/4_metacell_original/","section":"post","summary":"In this section we will perform the cell type classification using metacell package:\n## Loading R packages library(Seurat) library(future) library(metacell) library(ggpubr) library(DropletUtils) library(pheatmap) ## Convert an Seurat object to 10x format to input in metacell data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_Processed.","tags":null,"title":"4 - Classifying cell types from original data using metacell","type":"post"},{"authors":null,"categories":null,"content":"Performing preprocessing using regularized negative binomial regression (SCT) to normalize UMI count data.\n## Loading R packages library(Seurat) library(SeuratWrappers) library(future) ## Setting up the threads for 12 workers options(future.globals.maxSize = +Inf) plan(\u0026quot;multiprocess\u0026quot;, workers = 12) ## Loading data Cellranger output format data \u0026lt;- Read10X(\u0026quot;/Users/biagi/PhD/AdipoSNAP/data/10x/\u0026quot;) ## Reading metadata annotation anno \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/AdipoSNAP/data/GSE133486_10XAdiposeNuclei.metaData.tsv\u0026quot;) ## Creating Seurat object data \u0026lt;- CreateSeuratObject(counts = data, project = \u0026quot;10x\u0026quot;, meta.data = anno, min.cells = 3, min.features = 200) ## Subset remaining only N condition data \u0026lt;- subset(data, cells = rownames(data@meta.data)[which(data@meta.data$condition == \u0026quot;N\u0026quot;)]) ## Cell cycle genes m.s.genes \u0026lt;- c(\u0026quot;Gmnn\u0026quot;, \u0026quot;Rad51\u0026quot;, \u0026quot;Prim1\u0026quot;, \u0026quot;Dscc1\u0026quot;, \u0026quot;Cdca7\u0026quot;, \u0026quot;Slbp\u0026quot;, \u0026quot;Mcm7\u0026quot;, \u0026quot;Cenpu\u0026quot;, \u0026quot;Pold3\u0026quot;, \u0026quot;Ccne2\u0026quot;, \u0026quot;Mcm4\u0026quot;, \u0026quot;Polr1b\u0026quot;, \u0026quot;Fen1\u0026quot;, \u0026quot;Rad51ap1\u0026quot;, \u0026quot;Tyms\u0026quot;, \u0026quot;Usp1\u0026quot;, \u0026quot;Rrm2\u0026quot;, \u0026quot;Wdr76\u0026quot;, \u0026quot;Dtl\u0026quot;, \u0026quot;Rrm1\u0026quot;, \u0026quot;Gins2\u0026quot;, \u0026quot;Tipin\u0026quot;, \u0026quot;Hells\u0026quot;, \u0026quot;Ubr7\u0026quot;, \u0026quot;Chaf1b\u0026quot;, \u0026quot;Clspn\u0026quot;, \u0026quot;E2f8\u0026quot;, \u0026quot;Mcm5\u0026quot;, \u0026quot;Nasp\u0026quot;, \u0026quot;Pcna\u0026quot;, \u0026quot;Mrpl36\u0026quot;, \u0026quot;Rfc2\u0026quot;, \u0026quot;Cdc45\u0026quot;, \u0026quot;Casp8ap2\u0026quot;, \u0026quot;Mcm6\u0026quot;, \u0026quot;Exo1\u0026quot;, \u0026quot;Pola1\u0026quot;, \u0026quot;Cdc6\u0026quot;, \u0026quot;Ung\u0026quot;, \u0026quot;Uhrf1\u0026quot;, \u0026quot;Blm\u0026quot;, \u0026quot;Msh2\u0026quot;) m.g2m.genes \u0026lt;- c(\u0026quot;Cdk1\u0026quot;, \u0026quot;Tmpo\u0026quot;, \u0026quot;Smc4\u0026quot;, \u0026quot;Tacc3\u0026quot;, \u0026quot;Mki67\u0026quot;, \u0026quot;Ckap2l\u0026quot;, \u0026quot;Cks2\u0026quot;, \u0026quot;Cdc25c\u0026quot;, \u0026quot;Nusap1\u0026quot;, \u0026quot;Kif11\u0026quot;, \u0026quot;Top2a\u0026quot;, \u0026quot;Cdca3\u0026quot;, \u0026quot;Cks1b\u0026quot;, \u0026quot;Ect2\u0026quot;, \u0026quot;Ckap5\u0026quot;, \u0026quot;Ckap2\u0026quot;, \u0026quot;Cenpa\u0026quot;, \u0026quot;Cdca2\u0026quot;, \u0026quot;Ncapd2\u0026quot;, \u0026quot;Aurkb\u0026quot;, \u0026quot;Cenpf\u0026quot;, \u0026quot;Gtse1\u0026quot;, \u0026quot;Birc5\u0026quot;, \u0026quot;Bub1\u0026quot;, \u0026quot;Cdca8\u0026quot;, \u0026quot;Anp32e\u0026quot;, \u0026quot;Rangap1\u0026quot;, \u0026quot;Tpx2\u0026quot;, \u0026quot;Hjurp\u0026quot;, \u0026quot;Lbr\u0026quot;, \u0026quot;Dlgap5\u0026quot;, \u0026quot;Psrc1\u0026quot;, \u0026quot;Ndc80\u0026quot;, \u0026quot;Nek2\u0026quot;, \u0026quot;Cbx5\u0026quot;, \u0026quot;Ube2c\u0026quot;, \u0026quot;Gas2l3\u0026quot;, \u0026quot;G2e3\u0026quot;, \u0026quot;Cdc20\u0026quot;, \u0026quot;Hmgb2\u0026quot;, \u0026quot;Cenpe\u0026quot;, \u0026quot;Nuf2\u0026quot;, \u0026quot;Anln\u0026quot;, \u0026quot;Ttk\u0026quot;, \u0026quot;Kif2c\u0026quot;, \u0026quot;Kif20b\u0026quot;, \u0026quot;Aurka\u0026quot;, \u0026quot;Hmmr\u0026quot;, \u0026quot;Pimreg\u0026quot;, \u0026quot;Cks1brt\u0026quot;, \u0026quot;Tubb4b\u0026quot;, \u0026quot;Kif23\u0026quot;, \u0026quot;Ccnb2\u0026quot;, \u0026quot;Ctcf\u0026quot;) ## nFeature_RNA based cell thresholding data \u0026lt;- subset(data, subset = nFeature_RNA \u0026gt; 200 \u0026amp; nFeature_RNA \u0026lt; 3000) ## Scoring cell cycle phases data \u0026lt;- CellCycleScoring(data, s.features = m.s.genes, g2m.features = m.g2m.genes, set.ident = TRUE) ## Using regularized negative binomial regression to normalize UMI count data regressing out nCount_RNA, S.Score and G2M.Score variables data \u0026lt;- SCTransform(data, vars.to.regress = c(\u0026quot;nCount_RNA\u0026quot;, \u0026quot;S.Score\u0026quot;, \u0026quot;G2M.Score\u0026quot;), verbose = TRUE) ## Running PCA data \u0026lt;- RunPCA(data) ## Defining the best number of PC that has a explained variance greater than 80% dp \u0026lt;- data@reductions$pca@stdev dp \u0026lt;- dp^2 for (z in 1:length(dp)) { soma \u0026lt;- sum(dp[1:z])/sum(dp) if (soma \u0026gt;= 0.8) { best_pc \u0026lt;- z break() } } ## Clustering data \u0026lt;- FindNeighbors(data, dims = 1:best_pc) data \u0026lt;- FindClusters(data) ## RunUMAP data \u0026lt;- RunUMAP(data, dims = 1:best_pc) ## RunTSNE data \u0026lt;- RunTSNE(data, dims = 1:best_pc, max_iter = 2000, perplexity = 30, verbose = T) ## Saving RDS file saveRDS(data, \u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_SCT_Processed.rds\u0026quot;) ## Running Adaptively-thresholded Low Rank Approximation (ALRA) data \u0026lt;- SeuratWrappers::RunALRA(data) saveRDS(data, \u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_SCT_Processed_ALRA.rds\u0026quot;)  ","date":1602633600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602633600,"objectID":"aec5fe871c513d989579d2e6a4afba39","permalink":"https://cbiagii.github.io/AdipoSNAP/post/5_sct_preprocess/","publishdate":"2020-10-14T00:00:00Z","relpermalink":"/AdipoSNAP/post/5_sct_preprocess/","section":"post","summary":"Performing preprocessing using regularized negative binomial regression (SCT) to normalize UMI count data.\n## Loading R packages library(Seurat) library(SeuratWrappers) library(future) ## Setting up the threads for 12 workers options(future.globals.maxSize = +Inf) plan(\u0026quot;multiprocess\u0026quot;, workers = 12) ## Loading data Cellranger output format data \u0026lt;- Read10X(\u0026quot;/Users/biagi/PhD/AdipoSNAP/data/10x/\u0026quot;) ## Reading metadata annotation anno \u0026lt;- read.","tags":null,"title":"5 - SCT Preprocessing","type":"post"},{"authors":null,"categories":null,"content":"Creating h5ad file to use as input in SCCAF:\nlibrary(Seurat) source(\u0026quot;/projects/cangen/coliveir/SeuratToH5ad.R\u0026quot;) data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_SCT_Processed.rds\u0026quot;) SeuratToH5ad(data, \u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/data.h5ad\u0026quot;, \u0026quot;SCT\u0026quot;, 1)  Defining the optimal accuracy number:\nimport warnings warnings.filterwarnings(\u0026quot;ignore\u0026quot;) from SCCAF import * ad = sc.read(\u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/data.h5ad\u0026quot;) y_prob, y_pred, y_test, clf, cvsm, acc = SCCAF_assessment(ad.X, ad.obs['L1_Round0'],n=100) aucs = plot_roc(y_prob, y_test, clf, cvsm=cvsm, acc=acc) plt.show()  Optimisation and general purpose usage:\ncd /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/ sccaf -i /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/data.h5ad --optimise --skip-assessment -s L1_Round0 -a 0.796 -c 10 --produce-rounds-summary -o /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/results.h5ad --optimisation-plots-output /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/results.pdf  Parallel run of assessments:\nsccaf-assess -i /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/results.h5ad -o /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/sccaf_assess_L1_Round0.txt --slot-for-existing-clustering L1_Round0 --iterations 20 --cores 16 sccaf-assess -i /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/results.h5ad -o /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/sccaf_assess_L1_Round1.txt --slot-for-existing-clustering L1_Round1 --iterations 20 --cores 16 sccaf-assess -i /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/results.h5ad -o /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/sccaf_assess_L1_Round2.txt --slot-for-existing-clustering L1_Round2 --iterations 20 --cores 16 sccaf-assess -i /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/results.h5ad -o /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/sccaf_assess_L1_Round3.txt --slot-for-existing-clustering L1_Round3 --iterations 20 --cores 16  Merging parallel runs to produce plot\nsccaf-assess-merger -i /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes -r /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/rounds.txt -o /Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/rounds-acc-comparison-plot.png  Exporting SCCAF results\nimport scanpy as sc adata = sc.read(\u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/results.h5ad\u0026quot;) adata.write_csvs(\u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/results\u0026quot;, sep='\\t', skip_data=True)  ","date":1602547200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602547200,"objectID":"0d523340da27c7451e4d4a703f3ce767","permalink":"https://cbiagii.github.io/AdipoSNAP/post/6_sccaf_sct/","publishdate":"2020-10-13T00:00:00Z","relpermalink":"/AdipoSNAP/post/6_sccaf_sct/","section":"post","summary":"Creating h5ad file to use as input in SCCAF:\nlibrary(Seurat) source(\u0026quot;/projects/cangen/coliveir/SeuratToH5ad.R\u0026quot;) data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_SCT_Processed.rds\u0026quot;) SeuratToH5ad(data, \u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/data.h5ad\u0026quot;, \u0026quot;SCT\u0026quot;, 1)  Defining the optimal accuracy number:\nimport warnings warnings.filterwarnings(\u0026quot;ignore\u0026quot;) from SCCAF import * ad = sc.","tags":null,"title":"6 - Finding optimal number of clusters in SCT data using SCCAF","type":"post"},{"authors":null,"categories":null,"content":"In this section we will perform the cell type classification using metacell package:\n## Loading R packages library(Seurat) library(future) library(metacell) library(ggpubr) library(DropletUtils) library(pheatmap) ## Convert an Seurat object to 10x format to input in metacell data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_SCT_Processed.rds\u0026quot;) write10xCounts(x = data@assays$RNA@counts, path = \u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/data\u0026quot;) ## Initializing a database if(!dir.exists(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/db\u0026quot;)) dir.create(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/db\u0026quot;) scdb_init(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/db\u0026quot;, force_reinit=T) ## Loading the data generated by the 10x conversion above mcell_import_scmat_10x(\u0026quot;test1\u0026quot;, base_dir=\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/data\u0026quot;) mat = scdb_mat(\u0026quot;test1\u0026quot;) ## Linking to a figure directory if(!dir.exists(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/figs\u0026quot;)) dir.create(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/figs\u0026quot;) scfigs_init(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/figs\u0026quot;) ## Plotting the distribution of UMI count per cell mcell_plot_umis_per_cell(\u0026quot;test1\u0026quot;) ## Cleaning the data using a list of mitochondrial genes that typically mark cells as being stressed or dying, as well as immunoglobulin genes that may represent strong clonal signatures in plasma cells mat = scdb_mat(\u0026quot;test1\u0026quot;) nms = c(rownames(mat@mat), rownames(mat@ignore_gmat)) ig_genes = c(grep(\u0026quot;^Igj\u0026quot;, nms, v=T), grep(\u0026quot;^Igh\u0026quot;,nms,v=T), grep(\u0026quot;^Igk\u0026quot;, nms, v=T), grep(\u0026quot;^Igl\u0026quot;, nms, v=T)) bad_genes = unique(c(grep(\u0026quot;^mt-\u0026quot;, nms, v=T), grep(\u0026quot;^mtmr\u0026quot;, nms, v=T), grep(\u0026quot;^Mtnd\u0026quot;, nms, v=T),\u0026quot;NEAT1\u0026quot;,\u0026quot;TMSB4X\u0026quot;, \u0026quot;TMSB10\u0026quot;, ig_genes)) mcell_mat_ignore_genes(new_mat_id=\u0026quot;test1\u0026quot;, mat_id=\u0026quot;test1\u0026quot;, bad_genes, reverse=F) ## Eliminating cells with less than 700 UMIs mcell_mat_ignore_small_cells(\u0026quot;test1\u0026quot;, \u0026quot;test1\u0026quot;, 700) ## Computing statistics on the distributions of each gene in the data, which are going to be our main tool for selecting feature genes mcell_add_gene_stat(gstat_id=\u0026quot;test1\u0026quot;, mat_id=\u0026quot;test1\u0026quot;, force=T) ## We create a new object of type gset, to which all genes whose scaled variance (variance divided by mean) exceeds a given threshold are added: mcell_gset_filter_varmean(gset_id=\u0026quot;test_feats\u0026quot;, gstat_id=\u0026quot;test1\u0026quot;, T_vm=0.08, force_new=T) mcell_gset_filter_cov(gset_id = \u0026quot;test_feats\u0026quot;, gstat_id=\u0026quot;test1\u0026quot;, T_tot=100, T_top3=2) ## Plotting all genes and our selected gene set given the mean and variance statistics mcell_plot_gstats(gstat_id=\u0026quot;test1\u0026quot;, gset_id=\u0026quot;test_feats\u0026quot;) ## Creating a similarity graph, using a construction called balanced K-nn graph mcell_add_cgraph_from_mat_bknn(mat_id=\u0026quot;test1\u0026quot;, gset_id = \u0026quot;test_feats\u0026quot;, graph_id=\u0026quot;test_graph\u0026quot;, K=150, dsamp=F) ## Use the cgraph to sample 1000 metacell partitions, each covering 75% of the cells and organizing them in dense subgraphs mcell_coclust_from_graph_resamp( coc_id=\u0026quot;test_coc500\u0026quot;, graph_id=\u0026quot;test_graph\u0026quot;, min_mc_size=20, p_resamp=0.75, n_resamp=1000) ## The co-clustering statistics are used to generate a new similarity graph, based on which accurate calling of the final set of metacells mcell_mc_from_coclust_balanced( coc_id=\u0026quot;test_coc500\u0026quot;, mat_id= \u0026quot;test1\u0026quot;, mc_id= \u0026quot;test_mc\u0026quot;, K=20, min_mc_size=20, alpha=2) ## Splitting metacells whose underlying similarity structure supports the existence of multiple sub-clusters, and removes outlier cells that strongly deviate from their metacell's expression profile mcell_plot_outlier_heatmap(mc_id=\u0026quot;test_mc\u0026quot;, mat_id = \u0026quot;test1\u0026quot;, T_lfc=3) mcell_mc_split_filt(new_mc_id=\u0026quot;test_mc_f\u0026quot;, mc_id=\u0026quot;test_mc\u0026quot;, mat_id=\u0026quot;test1\u0026quot;, T_lfc=3, plot_mats=F) ## The filtered metacell object test_mc_f can now be visualized. In order to do this effectively, we usually go through one or two iterations of selecting informative marker genes. The package can select markers for you automatically - by simply looking for genes that are strongly enriched in any of the metacells mcell_gset_from_mc_markers(gset_id=\u0026quot;test_markers\u0026quot;, mc_id=\u0026quot;test_mc_f\u0026quot;) ## Running 1st Round with known markers load(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/db/mc.test_mc_f.Rda\u0026quot;) lfp = log2(object@mc_fp) marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;blue\u0026quot;, 1, 2)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial\u0026quot;, \u0026quot;Pecam1\u0026quot;, \u0026quot;green\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_1\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;#ff748c\u0026quot;, 1, 0.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_2\u0026quot;, \u0026quot;Cd19\u0026quot;, \u0026quot;#ff8fa3\u0026quot;, 1, 0.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_1\u0026quot;, \u0026quot;Cd34\u0026quot;, \u0026quot;#ffa500\u0026quot;, 1, 2)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_2\u0026quot;, \u0026quot;Pdgfra\u0026quot;, \u0026quot;#ffb732\u0026quot;, 1, 2)) marks_colors \u0026lt;- as.data.frame(marks_colors) colnames(marks_colors) \u0026lt;- c(\u0026quot;group\u0026quot;, \u0026quot;gene\u0026quot;, \u0026quot;color\u0026quot;, \u0026quot;priority\u0026quot;, \u0026quot;T_fold\u0026quot;) marks_colors$priority \u0026lt;- as.integer(marks_colors$priority) marks_colors$T_fold \u0026lt;- as.numeric(marks_colors$T_fold) mc = scdb_mc(\u0026quot;test_mc_f\u0026quot;) gset = scdb_gset(\u0026quot;test_markers\u0026quot;) gene_folds = mc@mc_fp good_marks = intersect(names(gset@gene_set), rownames(mc@mc_fp)) mc_ord = 1:ncol(mc@mc_fp) mat = log2(gene_folds[good_marks, mc_ord]) mat = pmax(pmin(mat, 3), -3) ## Selecting best markers for adipocyte cells mat_A \u0026lt;- mat[, which(mc@colors == \u0026quot;blue\u0026quot;)] mat_A \u0026lt;- mat_A[rowSums(mat_A) \u0026gt; quantile(rowSums(mat_A), 0.9), ] rowMeans(mat_A[names(head(sort(rowSums(mat_A), decreasing = T), 5)), ]) ## Selecting best markers for endothelial cells mat_E \u0026lt;- mat[, which(mc@colors == \u0026quot;green\u0026quot;)] mat_E \u0026lt;- mat_E[rowSums(mat_E) \u0026gt; quantile(rowSums(mat_E), 0.9), ] rowMeans(mat_E[names(head(sort(rowSums(mat_E), decreasing = T), 5)), ]) ## Selecting best markers for immune cells mat_I \u0026lt;- mat[, which(mc@colors %in% c(\u0026quot;#ff748c\u0026quot;, \u0026quot;#ff8fa3\u0026quot;))] mat_I \u0026lt;- mat_I[rowSums(mat_I) \u0026gt; quantile(rowSums(mat_I), 0.9), ] rowMeans(mat_I[names(head(sort(rowSums(mat_I), decreasing = T), 5)), ]) ## Selecting best markers for progenitor cells mat_P \u0026lt;- mat[, which(mc@colors %in% c(\u0026quot;#ffa500\u0026quot;, \u0026quot;#ffb732\u0026quot;))] mat_P \u0026lt;- mat_P[rowSums(mat_P) \u0026gt; quantile(rowSums(mat_P), 0.9), ] rowMeans(mat_P[names(head(sort(rowSums(mat_P), decreasing = T), 5)), ]) ## Plotting heatmat to check the found markers items \u0026lt;- list(Adipocytes = mat_A, Endothelials = mat_E, Immunes = mat_I, Progenitors = mat_P) plot_list=list() for (i in 1:length(items)){ x \u0026lt;- pheatmap(items[[i]], fontsize = 6, main = names(items)[i], legend = FALSE, treeheight_row = 0, treeheight_col = 0) plot_list[[i]] = x[[4]] } gggpubr(plotlist = plot_list, ncol = 2) ## Running 2nd round with unsupervised markers provided by metacell marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_1\u0026quot;, \u0026quot;Acsl1\u0026quot;, \u0026quot;#0000b3\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_2\u0026quot;, \u0026quot;Plin4\u0026quot;, \u0026quot;#0000cc\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_3\u0026quot;, \u0026quot;Mlxipl\u0026quot;, \u0026quot;#0000e6\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_4\u0026quot;, \u0026quot;Pck1\u0026quot;, \u0026quot;#0000ff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_5\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;#1a1aff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_1\u0026quot;, \u0026quot;Btnl9\u0026quot;, \u0026quot;#00cd00\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_2\u0026quot;, \u0026quot;Ushbp1\u0026quot;, \u0026quot;#00b300\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_3\u0026quot;, \u0026quot;Egfl7\u0026quot;, \u0026quot;#009a00\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_4\u0026quot;, \u0026quot;Mcf2l\u0026quot;, \u0026quot;#008000\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_5\u0026quot;, \u0026quot;Ptprb\u0026quot;, \u0026quot;#006700\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_1\u0026quot;, \u0026quot;Zeb2\u0026quot;, \u0026quot;#ff7f7f\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_2\u0026quot;, \u0026quot;Trps1\u0026quot;, \u0026quot;#ff6666\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_3\u0026quot;, \u0026quot;Runx1\u0026quot;, \u0026quot;#ff4c4c\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_4\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;#ff3232\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_5\u0026quot;, \u0026quot;Adap2\u0026quot;, \u0026quot;#ff1919\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_1\u0026quot;, \u0026quot;Dcn\u0026quot;, \u0026quot;#ffff4d\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_2\u0026quot;, \u0026quot;Celf2\u0026quot;, \u0026quot;#ffff33\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_3\u0026quot;, \u0026quot;Meg3\u0026quot;, \u0026quot;#ffff1a\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_4\u0026quot;, \u0026quot;Col1a2\u0026quot;, \u0026quot;#ffff00\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_5\u0026quot;, \u0026quot;Col3a1\u0026quot;, \u0026quot;#e6e600\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- as.data.frame(marks_colors) colnames(marks_colors) \u0026lt;- c(\u0026quot;group\u0026quot;, \u0026quot;gene\u0026quot;, \u0026quot;color\u0026quot;, \u0026quot;priority\u0026quot;, \u0026quot;T_fold\u0026quot;) marks_colors$priority \u0026lt;- as.integer(marks_colors$priority) marks_colors$T_fold \u0026lt;- as.numeric(marks_colors$T_fold) mc_colorize(\u0026quot;test_mc_f\u0026quot;, marker_colors=marks_colors) mc = scdb_mc(\u0026quot;test_mc_f\u0026quot;) ## We can use the colors to produce a labeled heat map, showing selected genes and their distributions over metacells, with the colored annotation shown at the bottom mcell_mc_plot_marks(mc_id=\u0026quot;test_mc_f\u0026quot;, gset_id=\u0026quot;test_markers\u0026quot;, mat_id=\u0026quot;test1\u0026quot;) lfp = log2(mc@mc_fp) ## Projecting metacells and cells in 2D mcell_mc2d_force_knn(mc2d_id=\u0026quot;test_2dproj\u0026quot;,mc_id=\u0026quot;test_mc_f\u0026quot;, graph_id=\u0026quot;test_graph\u0026quot;) tgconfig::set_param(\u0026quot;mcell_mc2d_height\u0026quot;,1000, \u0026quot;metacell\u0026quot;) tgconfig::set_param(\u0026quot;mcell_mc2d_width\u0026quot;,1000, \u0026quot;metacell\u0026quot;) mcell_mc2d_plot(mc2d_id=\u0026quot;test_2dproj\u0026quot;)  ","date":1602460800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602460800,"objectID":"53f22b7123197de0f6cb923cd9e02d4b","permalink":"https://cbiagii.github.io/AdipoSNAP/post/7_metacell_sct/","publishdate":"2020-10-12T00:00:00Z","relpermalink":"/AdipoSNAP/post/7_metacell_sct/","section":"post","summary":"In this section we will perform the cell type classification using metacell package:\n## Loading R packages library(Seurat) library(future) library(metacell) library(ggpubr) library(DropletUtils) library(pheatmap) ## Convert an Seurat object to 10x format to input in metacell data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_SCT_Processed.","tags":null,"title":"7 - Classifying cell types from SCT data using metacell","type":"post"},{"authors":null,"categories":null,"content":"Performing preprocessing of adipocyte cell type.\n## Loading R packages library(Seurat) ## Loading metacell results marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_1\u0026quot;, \u0026quot;Acsl1\u0026quot;, \u0026quot;#0000b3\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_2\u0026quot;, \u0026quot;Plin4\u0026quot;, \u0026quot;#0000cc\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_3\u0026quot;, \u0026quot;Mlxipl\u0026quot;, \u0026quot;#0000e6\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_4\u0026quot;, \u0026quot;Pck1\u0026quot;, \u0026quot;#0000ff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_5\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;#1a1aff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_1\u0026quot;, \u0026quot;Btnl9\u0026quot;, \u0026quot;#00cd00\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_2\u0026quot;, \u0026quot;Ushbp1\u0026quot;, \u0026quot;#00b300\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_3\u0026quot;, \u0026quot;Egfl7\u0026quot;, \u0026quot;#009a00\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_4\u0026quot;, \u0026quot;Mcf2l\u0026quot;, \u0026quot;#008000\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_5\u0026quot;, \u0026quot;Ptprb\u0026quot;, \u0026quot;#006700\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_1\u0026quot;, \u0026quot;Zeb2\u0026quot;, \u0026quot;#ff7f7f\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_2\u0026quot;, \u0026quot;Trps1\u0026quot;, \u0026quot;#ff6666\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_3\u0026quot;, \u0026quot;Runx1\u0026quot;, \u0026quot;#ff4c4c\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_4\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;#ff3232\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_5\u0026quot;, \u0026quot;Adap2\u0026quot;, \u0026quot;#ff1919\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_1\u0026quot;, \u0026quot;Dcn\u0026quot;, \u0026quot;#ffff4d\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_2\u0026quot;, \u0026quot;Celf2\u0026quot;, \u0026quot;#ffff33\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_3\u0026quot;, \u0026quot;Meg3\u0026quot;, \u0026quot;#ffff1a\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_4\u0026quot;, \u0026quot;Col1a2\u0026quot;, \u0026quot;#ffff00\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_5\u0026quot;, \u0026quot;Col3a1\u0026quot;, \u0026quot;#e6e600\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- as.data.frame(marks_colors) colnames(marks_colors) \u0026lt;- c(\u0026quot;group\u0026quot;, \u0026quot;gene\u0026quot;, \u0026quot;color\u0026quot;, \u0026quot;priority\u0026quot;, \u0026quot;T_fold\u0026quot;) marks_colors$priority \u0026lt;- as.integer(marks_colors$priority) marks_colors$T_fold \u0026lt;- as.numeric(marks_colors$T_fold) load(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/db/mc2d.test_2dproj.Rda\u0026quot;) dims \u0026lt;- data.frame(x = object@sc_x, y = object@sc_y) load(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/metacell_SCT/db/mc.test_mc_f.Rda\u0026quot;) tmp1 \u0026lt;- data.frame(cells = names(object@mc), cols = object@mc) tmp2 \u0026lt;- data.frame(cols = object@colors) teste \u0026lt;- merge(tmp1, tmp2, by.x = \u0026quot;cols\u0026quot;, by.y = \u0026quot;row.names\u0026quot;) teste$cols \u0026lt;- NULL teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Adipocyte\u0026quot;, marks_colors$group)], \u0026quot;Adipocytes\u0026quot;, \u0026quot;Unknown\u0026quot;) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Progenitor\u0026quot;, marks_colors$group)], \u0026quot;Progenitors\u0026quot;, teste$cellType) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Immune\u0026quot;, marks_colors$group)], \u0026quot;Immunes\u0026quot;, teste$cellType) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Endothelial\u0026quot;, marks_colors$group)], \u0026quot;Endothelials\u0026quot;, teste$cellType) tab \u0026lt;- merge(dims, teste, by.x = \u0026quot;row.names\u0026quot;, by.y = \u0026quot;cells\u0026quot;) ## Assign sccaf clusters to metacell results data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_SCT_Processed.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/Adipocytes/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- as.factor(new_cluster) data$clusters_sccaf \u0026lt;- new_cluster infos \u0026lt;- data@meta.data infos \u0026lt;- infos[tab$Row.names, ] final \u0026lt;- merge(infos, tab, by.x = \u0026quot;row.names\u0026quot;, by.y = \u0026quot;Row.names\u0026quot;) Idents(data) \u0026lt;- data$clusters_sccaf new.cluster.ids \u0026lt;- c(\u0026quot;E1\u0026quot;, \u0026quot;P1\u0026quot;, \u0026quot;P2\u0026quot;, \u0026quot;A1\u0026quot;, \u0026quot;A2\u0026quot;, \u0026quot;P3\u0026quot;, \u0026quot;P4\u0026quot;, \u0026quot;I1\u0026quot;, \u0026quot;A3\u0026quot;, \u0026quot;A4\u0026quot;, \u0026quot;E2\u0026quot;, \u0026quot;I2\u0026quot;, \u0026quot;I3\u0026quot;, \u0026quot;P5\u0026quot;) names(new.cluster.ids) \u0026lt;- levels(data) data \u0026lt;- RenameIdents(data, new.cluster.ids) Idents(data) \u0026lt;- factor(Idents(data), levels = c('A1', 'A2', 'A3', 'A4', 'E1', 'E2', 'I1', 'I2', 'I3', 'P1', 'P2', 'P3', 'P4', 'P5')) ## Selecting only the 4 adipocytes clusters cells \u0026lt;- names(Idents(data))[which(Idents(data) == \u0026quot;A1\u0026quot; | Idents(data) == \u0026quot;A2\u0026quot; | Idents(data) == \u0026quot;A3\u0026quot; | Idents(data) == \u0026quot;A4\u0026quot;)] ## Subsetting adipocyte clusters from all data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/10x_Processed.rds\u0026quot;) data \u0026lt;- subset(data, cells = cells) ## Cell cycle genes m.s.genes \u0026lt;- c(\u0026quot;Gmnn\u0026quot;, \u0026quot;Rad51\u0026quot;, \u0026quot;Prim1\u0026quot;, \u0026quot;Dscc1\u0026quot;, \u0026quot;Cdca7\u0026quot;, \u0026quot;Slbp\u0026quot;, \u0026quot;Mcm7\u0026quot;, \u0026quot;Cenpu\u0026quot;, \u0026quot;Pold3\u0026quot;, \u0026quot;Ccne2\u0026quot;, \u0026quot;Mcm4\u0026quot;, \u0026quot;Polr1b\u0026quot;, \u0026quot;Fen1\u0026quot;, \u0026quot;Rad51ap1\u0026quot;, \u0026quot;Tyms\u0026quot;, \u0026quot;Usp1\u0026quot;, \u0026quot;Rrm2\u0026quot;, \u0026quot;Wdr76\u0026quot;, \u0026quot;Dtl\u0026quot;, \u0026quot;Rrm1\u0026quot;, \u0026quot;Gins2\u0026quot;, \u0026quot;Tipin\u0026quot;, \u0026quot;Hells\u0026quot;, \u0026quot;Ubr7\u0026quot;, \u0026quot;Chaf1b\u0026quot;, \u0026quot;Clspn\u0026quot;, \u0026quot;E2f8\u0026quot;, \u0026quot;Mcm5\u0026quot;, \u0026quot;Nasp\u0026quot;, \u0026quot;Pcna\u0026quot;, \u0026quot;Mrpl36\u0026quot;, \u0026quot;Rfc2\u0026quot;, \u0026quot;Cdc45\u0026quot;, \u0026quot;Casp8ap2\u0026quot;, \u0026quot;Mcm6\u0026quot;, \u0026quot;Exo1\u0026quot;, \u0026quot;Pola1\u0026quot;, \u0026quot;Cdc6\u0026quot;, \u0026quot;Ung\u0026quot;, \u0026quot;Uhrf1\u0026quot;, \u0026quot;Blm\u0026quot;, \u0026quot;Msh2\u0026quot;) m.g2m.genes \u0026lt;- c(\u0026quot;Cdk1\u0026quot;, \u0026quot;Tmpo\u0026quot;, \u0026quot;Smc4\u0026quot;, \u0026quot;Tacc3\u0026quot;, \u0026quot;Mki67\u0026quot;, \u0026quot;Ckap2l\u0026quot;, \u0026quot;Cks2\u0026quot;, \u0026quot;Cdc25c\u0026quot;, \u0026quot;Nusap1\u0026quot;, \u0026quot;Kif11\u0026quot;, \u0026quot;Top2a\u0026quot;, \u0026quot;Cdca3\u0026quot;, \u0026quot;Cks1b\u0026quot;, \u0026quot;Ect2\u0026quot;, \u0026quot;Ckap5\u0026quot;, \u0026quot;Ckap2\u0026quot;, \u0026quot;Cenpa\u0026quot;, \u0026quot;Cdca2\u0026quot;, \u0026quot;Ncapd2\u0026quot;, \u0026quot;Aurkb\u0026quot;, \u0026quot;Cenpf\u0026quot;, \u0026quot;Gtse1\u0026quot;, \u0026quot;Birc5\u0026quot;, \u0026quot;Bub1\u0026quot;, \u0026quot;Cdca8\u0026quot;, \u0026quot;Anp32e\u0026quot;, \u0026quot;Rangap1\u0026quot;, \u0026quot;Tpx2\u0026quot;, \u0026quot;Hjurp\u0026quot;, \u0026quot;Lbr\u0026quot;, \u0026quot;Dlgap5\u0026quot;, \u0026quot;Psrc1\u0026quot;, \u0026quot;Ndc80\u0026quot;, \u0026quot;Nek2\u0026quot;, \u0026quot;Cbx5\u0026quot;, \u0026quot;Ube2c\u0026quot;, \u0026quot;Gas2l3\u0026quot;, \u0026quot;G2e3\u0026quot;, \u0026quot;Cdc20\u0026quot;, \u0026quot;Hmgb2\u0026quot;, \u0026quot;Cenpe\u0026quot;, \u0026quot;Nuf2\u0026quot;, \u0026quot;Anln\u0026quot;, \u0026quot;Ttk\u0026quot;, \u0026quot;Kif2c\u0026quot;, \u0026quot;Kif20b\u0026quot;, \u0026quot;Aurka\u0026quot;, \u0026quot;Hmmr\u0026quot;, \u0026quot;Pimreg\u0026quot;, \u0026quot;Cks1brt\u0026quot;, \u0026quot;Tubb4b\u0026quot;, \u0026quot;Kif23\u0026quot;, \u0026quot;Ccnb2\u0026quot;, \u0026quot;Ctcf\u0026quot;) ## nFeature_RNA based cell thresholding data \u0026lt;- subset(data, subset = nFeature_RNA \u0026lt; 2000) ## Scoring cell cycle phases data \u0026lt;- CellCycleScoring(data, s.features = m.s.genes, g2m.features = m.g2m.genes, set.ident = TRUE) ## Using regularized negative binomial regression to normalize UMI count data regressing out nCount_RNA, S.Score and G2M.Score variables data \u0026lt;- SCTransform(data, vars.to.regress = c(\u0026quot;nCount_RNA\u0026quot;, \u0026quot;S.Score\u0026quot;, \u0026quot;G2M.Score\u0026quot;), verbose = TRUE) ## Running PCA data \u0026lt;- RunPCA(data) ## Defining the best number of PC that has a explained variance greater than 80% dp \u0026lt;- data@reductions$pca@stdev dp \u0026lt;- dp^2 for (z in 1:length(dp)) { soma \u0026lt;- sum(dp[1:z])/sum(dp) if (soma \u0026gt;= 0.8) { best_pc \u0026lt;- z break() } } ## RunUMAP data \u0026lt;- RunUMAP(data, dims = 1:best_pc) ## RunTSNE data \u0026lt;- RunTSNE(data, dims = 1:best_pc, max_iter = 2000, perplexity = 30, verbose = T) ## Saving RDS file saveRDS(data, \u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/Adipocytes.rds\u0026quot;)  ","date":1602374400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602374400,"objectID":"13a880b393124a25801748092f0a1083","permalink":"https://cbiagii.github.io/AdipoSNAP/post/8_adipocytes_preprocess/","publishdate":"2020-10-11T00:00:00Z","relpermalink":"/AdipoSNAP/post/8_adipocytes_preprocess/","section":"post","summary":"Performing preprocessing of adipocyte cell type.\n## Loading R packages library(Seurat) ## Loading metacell results marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_1\u0026quot;, \u0026quot;Acsl1\u0026quot;, \u0026quot;#0000b3\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_2\u0026quot;, \u0026quot;Plin4\u0026quot;, \u0026quot;#0000cc\u0026quot;, 1, 2.","tags":null,"title":"8 - Adipocytes Preprocessing","type":"post"},{"authors":null,"categories":null,"content":"Creating h5ad file to use as input in SCCAF:\nlibrary(Seurat) source(\u0026quot;/projects/cangen/coliveir/SeuratToH5ad.R\u0026quot;) data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/Adipocytes.rds\u0026quot;) SeuratToH5ad(data, \u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/data.h5ad\u0026quot;, \u0026quot;RNA\u0026quot;, 1)  Defining the optimal accuracy number:\n# python to define the optimal accuracy number import warnings warnings.filterwarnings(\u0026quot;ignore\u0026quot;) from SCCAF import * ad = sc.read(\u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/data.h5ad\u0026quot;) y_prob, y_pred, y_test, clf, cvsm, acc = SCCAF_assessment(ad.X, ad.obs['L1_Round0'],n=100) aucs = plot_roc(y_prob, y_test, clf, cvsm=cvsm, acc=acc) plt.show()  Optimisation and general purpose usage:\n##### Optimisation and general purpose usage cd /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/ sccaf -i /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/data.h5ad --optimise --skip-assessment -s L1_Round0 -a 0.669 -c 10 --produce-rounds-summary -o /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/results.h5ad --optimisation-plots-output /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/results.pdf  Parallel run of assessments:\nsccaf-assess -i /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/results.h5ad -o /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/sccaf_assess_L1_Round0.txt --slot-for-existing-clustering L1_Round0 --iterations 20 --cores 16 sccaf-assess -i /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/results.h5ad -o /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/sccaf_assess_L1_Round1.txt --slot-for-existing-clustering L1_Round1 --iterations 20 --cores 16 sccaf-assess -i /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/results.h5ad -o /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/sccaf_assess_L1_Round2.txt --slot-for-existing-clustering L1_Round2 --iterations 20 --cores 16  Merging parallel runs to produce plot:\nsccaf-assess-merger -i /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly -r /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/rounds.txt -o /Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/rounds-acc-comparison-plot.png  Exporting SCCAF results\nimport scanpy as sc adata = sc.read(\u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/results.h5ad\u0026quot;) adata.write_csvs(\u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/results\u0026quot;, sep='\\t', skip_data=True)  ","date":1602288000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602288000,"objectID":"8b9cf7582306c50d04c28adf6bcf1017","permalink":"https://cbiagii.github.io/AdipoSNAP/post/9_sccaf_adipocytes/","publishdate":"2020-10-10T00:00:00Z","relpermalink":"/AdipoSNAP/post/9_sccaf_adipocytes/","section":"post","summary":"Creating h5ad file to use as input in SCCAF:\nlibrary(Seurat) source(\u0026quot;/projects/cangen/coliveir/SeuratToH5ad.R\u0026quot;) data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/AdipoSNAP/output/10x/Adipocytes.rds\u0026quot;) SeuratToH5ad(data, \u0026quot;/Users/biagi/PhD/AdipoSNAP/SCCAF/AdipocytesOnly/data.h5ad\u0026quot;, \u0026quot;RNA\u0026quot;, 1)  Defining the optimal accuracy number:\n# python to define the optimal accuracy number import warnings warnings.","tags":null,"title":"9 - Finding optimal number of clusters in adipocytes cells using SCCAF","type":"post"},{"authors":null,"categories":null,"content":"Figure 1 ## Loading R packages library(dplyr) library(enrichR) library(ggplot2) library(ggpubr) library(ggtext) library(glue) library(metacell) library(Nebulosa) library(RColorBrewer) library(Seurat) ################################# ########### Figure 1B ########### ################################# marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_1\u0026quot;, \u0026quot;Acsl1\u0026quot;, \u0026quot;#0000b3\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_2\u0026quot;, \u0026quot;Plin4\u0026quot;, \u0026quot;#0000cc\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_3\u0026quot;, \u0026quot;Mlxipl\u0026quot;, \u0026quot;#0000e6\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_4\u0026quot;, \u0026quot;Pck1\u0026quot;, \u0026quot;#0000ff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_5\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;#1a1aff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_1\u0026quot;, \u0026quot;Btnl9\u0026quot;, \u0026quot;#00cd00\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_2\u0026quot;, \u0026quot;Ushbp1\u0026quot;, \u0026quot;#00b300\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_3\u0026quot;, \u0026quot;Egfl7\u0026quot;, \u0026quot;#009a00\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_4\u0026quot;, \u0026quot;Mcf2l\u0026quot;, \u0026quot;#008000\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_5\u0026quot;, \u0026quot;Ptprb\u0026quot;, \u0026quot;#006700\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_1\u0026quot;, \u0026quot;Zeb2\u0026quot;, \u0026quot;#ff7f7f\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_2\u0026quot;, \u0026quot;Trps1\u0026quot;, \u0026quot;#ff6666\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_3\u0026quot;, \u0026quot;Runx1\u0026quot;, \u0026quot;#ff4c4c\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_4\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;#ff3232\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_5\u0026quot;, \u0026quot;Adap2\u0026quot;, \u0026quot;#ff1919\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_1\u0026quot;, \u0026quot;Dcn\u0026quot;, \u0026quot;#ffff4d\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_2\u0026quot;, \u0026quot;Celf2\u0026quot;, \u0026quot;#ffff33\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_3\u0026quot;, \u0026quot;Meg3\u0026quot;, \u0026quot;#ffff1a\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_4\u0026quot;, \u0026quot;Col1a2\u0026quot;, \u0026quot;#ffff00\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_5\u0026quot;, \u0026quot;Col3a1\u0026quot;, \u0026quot;#e6e600\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- as.data.frame(marks_colors) colnames(marks_colors) \u0026lt;- c(\u0026quot;group\u0026quot;, \u0026quot;gene\u0026quot;, \u0026quot;color\u0026quot;, \u0026quot;priority\u0026quot;, \u0026quot;T_fold\u0026quot;) marks_colors$priority \u0026lt;- as.integer(marks_colors$priority) marks_colors$T_fold \u0026lt;- as.numeric(marks_colors$T_fold) load(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell_SCT/db/mc2d.test_2dproj.Rda\u0026quot;) dims \u0026lt;- data.frame(x = object@sc_x, y = object@sc_y) load(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell_SCT/db/mc.test_mc_f.Rda\u0026quot;) tmp1 \u0026lt;- data.frame(cells = names(object@mc), cols = object@mc) tmp2 \u0026lt;- data.frame(cols = object@colors) teste \u0026lt;- merge(tmp1, tmp2, by.x = \u0026quot;cols\u0026quot;, by.y = \u0026quot;row.names\u0026quot;) teste$cols \u0026lt;- NULL teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Adipocyte\u0026quot;, marks_colors$group)], \u0026quot;Adipocytes\u0026quot;, \u0026quot;Unknown\u0026quot;) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Progenitor\u0026quot;, marks_colors$group)], \u0026quot;Progenitors\u0026quot;, teste$cellType) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Immune\u0026quot;, marks_colors$group)], \u0026quot;Immunes\u0026quot;, teste$cellType) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Endothelial\u0026quot;, marks_colors$group)], \u0026quot;Endothelials\u0026quot;, teste$cellType) tab \u0026lt;- merge(dims, teste, by.x = \u0026quot;row.names\u0026quot;, by.y = \u0026quot;cells\u0026quot;) data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/10x_SCT_Processed.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/Adipocytes/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- as.factor(new_cluster) data$clusters_sccaf \u0026lt;- new_cluster infos \u0026lt;- data@meta.data infos \u0026lt;- infos[tab$Row.names, ] final \u0026lt;- merge(infos, tab, by.x = \u0026quot;row.names\u0026quot;, by.y = \u0026quot;Row.names\u0026quot;) A \u0026lt;- subset(final, cellType == \u0026quot;Adipocytes\u0026quot;) E \u0026lt;- subset(final, cellType == \u0026quot;Endothelials\u0026quot;) I \u0026lt;- subset(final, cellType == \u0026quot;Immunes\u0026quot;) P \u0026lt;- subset(final, cellType == \u0026quot;Progenitors\u0026quot;) Idents(data) \u0026lt;- data$clusters_sccaf new.cluster.ids \u0026lt;- c(\u0026quot;EN1\u0026quot;, \u0026quot;PG1\u0026quot;, \u0026quot;PG2\u0026quot;, \u0026quot;AD1\u0026quot;, \u0026quot;AD2\u0026quot;, \u0026quot;PG3\u0026quot;, \u0026quot;PG4\u0026quot;, \u0026quot;IM1\u0026quot;, \u0026quot;AD3\u0026quot;, \u0026quot;AD4\u0026quot;, \u0026quot;EN2\u0026quot;, \u0026quot;IM2\u0026quot;, \u0026quot;IM3\u0026quot;, \u0026quot;PG5\u0026quot;) names(new.cluster.ids) \u0026lt;- levels(data) data \u0026lt;- RenameIdents(data, new.cluster.ids) Idents(data) \u0026lt;- factor(Idents(data), levels = c('AD1', 'AD2', 'AD3', 'AD4', 'EN1', 'EN2', 'IM1', 'IM2', 'IM3', 'PG1', 'PG2', 'PG3', 'PG4', 'PG5')) cls \u0026lt;- c(\u0026quot;#FFA500\u0026quot;, \u0026quot;#ffae19\u0026quot;, \u0026quot;#ffb732\u0026quot;, \u0026quot;#ffc04c\u0026quot;, \u0026quot;#66b266\u0026quot;, \u0026quot;#7fbf7f\u0026quot;, \u0026quot;#ffa3a3\u0026quot;, \u0026quot;#ffadad\u0026quot;, \u0026quot;#ffb7b7\u0026quot;, \u0026quot;#4043ff\u0026quot;, \u0026quot;#6666ff\u0026quot;, \u0026quot;#7f7fff\u0026quot;, \u0026quot;#9999ff\u0026quot;, \u0026quot;#adadff\u0026quot;) TSNEPlot(data, label = FALSE, pt.size = 0.3, cols = cls) + xlab(\u0026quot;t-SNE 1\u0026quot;) + ylab(\u0026quot;t-SNE 2\u0026quot;) + theme_classic() + labs(color = \u0026quot;Cell Type\u0026quot;) + theme(legend.position = \u0026quot;bottom\u0026quot;) a \u0026lt;- round((sum(Idents(data) == \u0026quot;AD1\u0026quot; | Idents(data) == \u0026quot;AD2\u0026quot; | Idents(data) == \u0026quot;AD3\u0026quot; | Idents(data) == \u0026quot;AD4\u0026quot;)/ncol(data))*100, 2); a1 \u0026lt;- sum(Idents(data) == \u0026quot;AD1\u0026quot; | Idents(data) == \u0026quot;AD2\u0026quot; | Idents(data) == \u0026quot;AD3\u0026quot; | Idents(data) == \u0026quot;AD4\u0026quot;) b \u0026lt;- round((sum(Idents(data) == \u0026quot;EN1\u0026quot; | Idents(data) == \u0026quot;EN2\u0026quot;)/ncol(data))*100, 2); b1 \u0026lt;- sum(Idents(data) == \u0026quot;EN1\u0026quot; | Idents(data) == \u0026quot;EN2\u0026quot;) c \u0026lt;- round((sum(Idents(data) == \u0026quot;IM1\u0026quot; | Idents(data) == \u0026quot;IM2\u0026quot; | Idents(data) == \u0026quot;IM3\u0026quot; | Idents(data) == \u0026quot;IM4\u0026quot;)/ncol(data))*100, 2); c1 \u0026lt;- sum(Idents(data) == \u0026quot;IM1\u0026quot; | Idents(data) == \u0026quot;IM2\u0026quot; | Idents(data) == \u0026quot;IM3\u0026quot; | Idents(data) == \u0026quot;IM4\u0026quot;) d \u0026lt;- round((sum(Idents(data) == \u0026quot;PG1\u0026quot; | Idents(data) == \u0026quot;PG2\u0026quot; | Idents(data) == \u0026quot;PG3\u0026quot; | Idents(data) == \u0026quot;PG4\u0026quot;)/ncol(data))*100, 2); d1 \u0026lt;- sum(Idents(data) == \u0026quot;PG1\u0026quot; | Idents(data) == \u0026quot;PG2\u0026quot; | Idents(data) == \u0026quot;PG3\u0026quot; | Idents(data) == \u0026quot;PG4\u0026quot;) df \u0026lt;- data.frame( class = c(\u0026quot;Adipocyte\u0026quot;, \u0026quot;Endothelial\u0026quot;, \u0026quot;Immune\u0026quot;, \u0026quot;Progenitor\u0026quot;), n = c(a1, b1, c1, d1), value = c(a, b, c, d) ) df$class \u0026lt;- factor(df$class, levels = c(\u0026quot;Adipocyte\u0026quot;, \u0026quot;Endothelial\u0026quot;, \u0026quot;Immune\u0026quot;, \u0026quot;Progenitor\u0026quot;)) df \u0026lt;- df %\u0026gt;% arrange(desc(class)) %\u0026gt;% mutate(lab.ypos = cumsum(value) - 0.5*value) ggplot(df, aes(x = \u0026quot;\u0026quot;, y = value, fill = class)) + geom_bar(width = 1, stat = \u0026quot;identity\u0026quot;, color = \u0026quot;white\u0026quot;) + coord_polar(\u0026quot;y\u0026quot;, start = 0)+ geom_text(aes(y = lab.ypos, label = paste0(value, \u0026quot;%\u0026quot;)), color = \u0026quot;white\u0026quot;, fontface = \u0026quot;bold\u0026quot;)+ scale_fill_manual(values = c(\u0026quot;#FFA500\u0026quot;, \u0026quot;#329932\u0026quot;, \u0026quot;#ff9999\u0026quot;, \u0026quot;#6666ff\u0026quot;)) + theme_void() + labs(fill = \u0026quot;Cell Type\u0026quot;) ################################# ########### Figure 1C ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/10x_SCT_Processed_ALRA.rds\u0026quot;) pt \u0026lt;- plot_density(data, c(\u0026quot;Adrb3\u0026quot;, \u0026quot;Pecam1\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;Cd34\u0026quot;, \u0026quot;Pdgfra\u0026quot;, \u0026quot;Itgb1\u0026quot;), reduction = \u0026quot;tsne\u0026quot;, pal = \u0026quot;inferno\u0026quot;, combine = FALSE) pt \u0026lt;- lapply(pt, function(x) { x + theme_bw() + xlab(\u0026quot;t-SNE 1\u0026quot;) + ylab(\u0026quot;t-SNE 2\u0026quot;) + theme(plot.title = element_text(hjust = 0.5, face = \u0026quot;italic\u0026quot;), panel.background = element_rect(colour = \u0026quot;black\u0026quot;, size = 0.1), axis.ticks.length = unit(.2, \u0026quot;cm\u0026quot;), axis.text = element_text(size = 11), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \u0026quot;none\u0026quot;) }) ggarrange(plotlist = pt) ################################# ########### Figure 1D ########### ################################# marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_1\u0026quot;, \u0026quot;Acsl1\u0026quot;, \u0026quot;#0000b3\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_2\u0026quot;, \u0026quot;Plin4\u0026quot;, \u0026quot;#0000cc\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_3\u0026quot;, \u0026quot;Mlxipl\u0026quot;, \u0026quot;#0000e6\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_4\u0026quot;, \u0026quot;Pck1\u0026quot;, \u0026quot;#0000ff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_5\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;#1a1aff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_1\u0026quot;, \u0026quot;Btnl9\u0026quot;, \u0026quot;#00cd00\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_2\u0026quot;, \u0026quot;Ushbp1\u0026quot;, \u0026quot;#00b300\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_3\u0026quot;, \u0026quot;Egfl7\u0026quot;, \u0026quot;#009a00\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_4\u0026quot;, \u0026quot;Mcf2l\u0026quot;, \u0026quot;#008000\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_5\u0026quot;, \u0026quot;Ptprb\u0026quot;, \u0026quot;#006700\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_1\u0026quot;, \u0026quot;Zeb2\u0026quot;, \u0026quot;#ff7f7f\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_2\u0026quot;, \u0026quot;Trps1\u0026quot;, \u0026quot;#ff6666\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_3\u0026quot;, \u0026quot;Runx1\u0026quot;, \u0026quot;#ff4c4c\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_4\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;#ff3232\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_5\u0026quot;, \u0026quot;Adap2\u0026quot;, \u0026quot;#ff1919\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_1\u0026quot;, \u0026quot;Dcn\u0026quot;, \u0026quot;#ffff4d\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_2\u0026quot;, \u0026quot;Celf2\u0026quot;, \u0026quot;#ffff33\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_3\u0026quot;, \u0026quot;Meg3\u0026quot;, \u0026quot;#ffff1a\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_4\u0026quot;, \u0026quot;Col1a2\u0026quot;, \u0026quot;#ffff00\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_5\u0026quot;, \u0026quot;Col3a1\u0026quot;, \u0026quot;#e6e600\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- as.data.frame(marks_colors) colnames(marks_colors) \u0026lt;- c(\u0026quot;group\u0026quot;, \u0026quot;gene\u0026quot;, \u0026quot;color\u0026quot;, \u0026quot;priority\u0026quot;, \u0026quot;T_fold\u0026quot;) marks_colors$priority \u0026lt;- as.integer(marks_colors$priority) marks_colors$T_fold \u0026lt;- as.numeric(marks_colors$T_fold) load(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell_SCT/db/mc2d.test_2dproj.Rda\u0026quot;) dims \u0026lt;- data.frame(x = object@sc_x, y = object@sc_y) load(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell_SCT/db/mc.test_mc_f.Rda\u0026quot;) tmp1 \u0026lt;- data.frame(cells = names(object@mc), cols = object@mc) tmp2 \u0026lt;- data.frame(cols = object@colors) teste \u0026lt;- merge(tmp1, tmp2, by.x = \u0026quot;cols\u0026quot;, by.y = \u0026quot;row.names\u0026quot;) teste$cols \u0026lt;- NULL teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Adipocyte\u0026quot;, marks_colors$group)], \u0026quot;Adipocytes\u0026quot;, \u0026quot;Unknown\u0026quot;) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Progenitor\u0026quot;, marks_colors$group)], \u0026quot;Progenitors\u0026quot;, teste$cellType) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Immune\u0026quot;, marks_colors$group)], \u0026quot;Immunes\u0026quot;, teste$cellType) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Endothelial\u0026quot;, marks_colors$group)], \u0026quot;Endothelials\u0026quot;, teste$cellType) tab \u0026lt;- merge(dims, teste, by.x = \u0026quot;row.names\u0026quot;, by.y = \u0026quot;cells\u0026quot;) data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/10x_SCT_Processed.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/Adipocytes/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- as.factor(new_cluster) data$clusters_sccaf \u0026lt;- new_cluster infos \u0026lt;- data@meta.data infos \u0026lt;- infos[tab$Row.names, ] final \u0026lt;- merge(infos, tab, by.x = \u0026quot;row.names\u0026quot;, by.y = \u0026quot;Row.names\u0026quot;) Idents(data) \u0026lt;- data$clusters_sccaf new.cluster.ids \u0026lt;- c(\u0026quot;EN\u0026quot;, \u0026quot;PG\u0026quot;, \u0026quot;PG\u0026quot;, \u0026quot;AD\u0026quot;, \u0026quot;AD\u0026quot;, \u0026quot;PG\u0026quot;, \u0026quot;PG\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;AD\u0026quot;, \u0026quot;AD\u0026quot;, \u0026quot;EN\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;PG\u0026quot;) names(new.cluster.ids) \u0026lt;- levels(data) data \u0026lt;- RenameIdents(data, new.cluster.ids) Idents(data) \u0026lt;- factor(Idents(data), levels = c('AD', 'EN', 'IM', 'PG')) markers \u0026lt;- FindAllMarkers(data, only.pos = TRUE) top20 \u0026lt;- markers %\u0026gt;% group_by(cluster) %\u0026gt;% top_n(n = 20, wt = avg_logFC) data2 \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/10x_SCT_Processed_ALRA.rds\u0026quot;) Idents(data2) \u0026lt;- Idents(data) rm(data) data2 \u0026lt;- ScaleData(data2) cls \u0026lt;- c(\u0026quot;#FFA500\u0026quot;, \u0026quot;#329932\u0026quot;, \u0026quot;#ff9999\u0026quot;, \u0026quot;#6666ff\u0026quot;) mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) DoHeatmap(data2, features = top20$gene, group.colors = cls, angle = 0, size = 5, label = FALSE) + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 5)) ################################# ########### Figure 1E ########### ################################# marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_1\u0026quot;, \u0026quot;Acsl1\u0026quot;, \u0026quot;#0000b3\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_2\u0026quot;, \u0026quot;Plin4\u0026quot;, \u0026quot;#0000cc\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_3\u0026quot;, \u0026quot;Mlxipl\u0026quot;, \u0026quot;#0000e6\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_4\u0026quot;, \u0026quot;Pck1\u0026quot;, \u0026quot;#0000ff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_5\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;#1a1aff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_1\u0026quot;, \u0026quot;Btnl9\u0026quot;, \u0026quot;#00cd00\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_2\u0026quot;, \u0026quot;Ushbp1\u0026quot;, \u0026quot;#00b300\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_3\u0026quot;, \u0026quot;Egfl7\u0026quot;, \u0026quot;#009a00\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_4\u0026quot;, \u0026quot;Mcf2l\u0026quot;, \u0026quot;#008000\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_5\u0026quot;, \u0026quot;Ptprb\u0026quot;, \u0026quot;#006700\u0026quot;, 1, 1.8)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_1\u0026quot;, \u0026quot;Zeb2\u0026quot;, \u0026quot;#ff7f7f\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_2\u0026quot;, \u0026quot;Trps1\u0026quot;, \u0026quot;#ff6666\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_3\u0026quot;, \u0026quot;Runx1\u0026quot;, \u0026quot;#ff4c4c\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_4\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;#ff3232\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_5\u0026quot;, \u0026quot;Adap2\u0026quot;, \u0026quot;#ff1919\u0026quot;, 1, 0.9)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_1\u0026quot;, \u0026quot;Dcn\u0026quot;, \u0026quot;#ffff4d\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_2\u0026quot;, \u0026quot;Celf2\u0026quot;, \u0026quot;#ffff33\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_3\u0026quot;, \u0026quot;Meg3\u0026quot;, \u0026quot;#ffff1a\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_4\u0026quot;, \u0026quot;Col1a2\u0026quot;, \u0026quot;#ffff00\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_5\u0026quot;, \u0026quot;Col3a1\u0026quot;, \u0026quot;#e6e600\u0026quot;, 1, 2.4)) marks_colors \u0026lt;- as.data.frame(marks_colors) colnames(marks_colors) \u0026lt;- c(\u0026quot;group\u0026quot;, \u0026quot;gene\u0026quot;, \u0026quot;color\u0026quot;, \u0026quot;priority\u0026quot;, \u0026quot;T_fold\u0026quot;) marks_colors$priority \u0026lt;- as.integer(marks_colors$priority) marks_colors$T_fold \u0026lt;- as.numeric(marks_colors$T_fold) load(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell/db/mc2d.test_2dproj.Rda\u0026quot;) dims \u0026lt;- data.frame(x = object@sc_x, y = object@sc_y) load(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell/db/mc.test_mc_f.Rda\u0026quot;) tmp1 \u0026lt;- data.frame(cells = names(object@mc), cols = object@mc) tmp2 \u0026lt;- data.frame(cols = object@colors) teste \u0026lt;- merge(tmp1, tmp2, by.x = \u0026quot;cols\u0026quot;, by.y = \u0026quot;row.names\u0026quot;) teste$cols \u0026lt;- NULL teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Adipocyte\u0026quot;, marks_colors$group)], \u0026quot;Adipocytes\u0026quot;, \u0026quot;Unknown\u0026quot;) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Progenitor\u0026quot;, marks_colors$group)], \u0026quot;Progenitors\u0026quot;, teste$cellType) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Immune\u0026quot;, marks_colors$group)], \u0026quot;Immunes\u0026quot;, teste$cellType) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Endothelial\u0026quot;, marks_colors$group)], \u0026quot;Endothelials\u0026quot;, teste$cellType) tab \u0026lt;- merge(dims, teste, by.x = \u0026quot;row.names\u0026quot;, by.y = \u0026quot;cells\u0026quot;) data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/10x_SCT_Processed_ALRA.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/Adipocytes/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- as.factor(new_cluster) data$clusters_sccaf \u0026lt;- new_cluster infos \u0026lt;- data@meta.data infos \u0026lt;- infos[tab$Row.names, ] final \u0026lt;- merge(infos, tab, by.x = \u0026quot;row.names\u0026quot;, by.y = \u0026quot;Row.names\u0026quot;) A \u0026lt;- subset(final, cellType == \u0026quot;Adipocytes\u0026quot;) E \u0026lt;- subset(final, cellType == \u0026quot;Endothelials\u0026quot;) I \u0026lt;- subset(final, cellType == \u0026quot;Immunes\u0026quot;) P \u0026lt;- subset(final, cellType == \u0026quot;Progenitors\u0026quot;) Idents(data) \u0026lt;- data$clusters_sccaf new.cluster.ids \u0026lt;- c(\u0026quot;EN1\u0026quot;, \u0026quot;PG1\u0026quot;, \u0026quot;PG2\u0026quot;, \u0026quot;AD1\u0026quot;, \u0026quot;AD2\u0026quot;, \u0026quot;PG3\u0026quot;, \u0026quot;PG4\u0026quot;, \u0026quot;IM1\u0026quot;, \u0026quot;AD3\u0026quot;, \u0026quot;AD4\u0026quot;, \u0026quot;EN2\u0026quot;, \u0026quot;IM2\u0026quot;, \u0026quot;IM3\u0026quot;, \u0026quot;PG5\u0026quot;) names(new.cluster.ids) \u0026lt;- levels(data) data \u0026lt;- RenameIdents(data, new.cluster.ids) Idents(data) \u0026lt;- factor(Idents(data), levels = rev(c('AD1', 'AD2', 'AD3', 'AD4', 'EN1', 'EN2', 'IM1', 'IM2', 'IM3', 'PG1', 'PG2', 'PG3', 'PG4', 'PG5'))) DotPlot(data, features = c(\u0026quot;Acsl1\u0026quot;, \u0026quot;Plin4\u0026quot;, \u0026quot;Mlxipl\u0026quot;, \u0026quot;Pck1\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;Btnl9\u0026quot;, \u0026quot;Ushbp1\u0026quot;, \u0026quot;Egfl7\u0026quot;, \u0026quot;Mcf2l\u0026quot;, \u0026quot;Ptprb\u0026quot;, \u0026quot;Trps1\u0026quot;, \u0026quot;Runx1\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;Adap2\u0026quot;, \u0026quot;Dcn\u0026quot;, \u0026quot;Celf2\u0026quot;, \u0026quot;Meg3\u0026quot;, \u0026quot;Col1a2\u0026quot;, \u0026quot;Col3a1\u0026quot;), cols = c(\u0026quot;grey\u0026quot;, 'red')) + xlab(\u0026quot;\u0026quot;) + ylab(\u0026quot;\u0026quot;) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) ## Nebulosa expression plot data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/10x_SCT_Processed_ALRA.rds\u0026quot;) pt \u0026lt;- plot_density(data, c(\u0026quot;Mlxipl\u0026quot;, \u0026quot;Egfl7\u0026quot;, \u0026quot;Runx1\u0026quot;, \u0026quot;Celf2\u0026quot;), reduction = \u0026quot;tsne\u0026quot;, pal = \u0026quot;inferno\u0026quot;, combine = FALSE) pt \u0026lt;- lapply(pt, function(x) { x + theme_void() + xlab(\u0026quot;\u0026quot;) + ylab(\u0026quot;\u0026quot;) + theme(plot.title = element_text(hjust = 0.5, face = \u0026quot;italic\u0026quot;), legend.position = \u0026quot;none\u0026quot;) }) ggarrange(plotlist = pt) ################################# ########### Figure 1F ########### ################################# dbs \u0026lt;- c(\u0026quot;KEGG_2019_Mouse\u0026quot;, \u0026quot;WikiPathways_2019_Mouse\u0026quot;, \u0026quot;Jensen_TISSUES\u0026quot;, \u0026quot;GO_Biological_Process_2018\u0026quot;) genes_A \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig1D_2_Markers_A.txt\u0026quot;) genes_E \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig1D_2_Markers_E.txt\u0026quot;) genes_I \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig1D_2_Markers_I.txt\u0026quot;) genes_P \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig1D_2_Markers_P.txt\u0026quot;) genes \u0026lt;- list(Adipocyte = genes_A, Endothelial = genes_E, Immune = genes_I, Progenitor = genes_P) results \u0026lt;- lapply(genes, enrichr, dbs) plotlist \u0026lt;- list() pathlist \u0026lt;- NULL tmplist \u0026lt;- NULL paths \u0026lt;- NULL for (i in 1:length(dbs)) { tmp \u0026lt;- lapply(results, `[[`, i) tmp \u0026lt;- mapply(cbind, tmp, \u0026quot;type\u0026quot; = names(tmp), SIMPLIFY = FALSE) tmp \u0026lt;- do.call(\u0026quot;rbind\u0026quot;, tmp) tmp \u0026lt;- subset(tmp, Adjusted.P.value \u0026lt; 0.05) tmp$Adjusted.P.value \u0026lt;- -log10(tmp$Adjusted.P.value) tmp$Combined.Score \u0026lt;- log2(tmp$Combined.Score) tmplist \u0026lt;- rbind(tmplist, data.frame(tmp, class = dbs[i])) if (dbs[i] == \u0026quot;GO_Biological_Process_2018\u0026quot;) { tmp$Term \u0026lt;- gsub(\u0026quot;\\\\s*\\\\([^\\\\)]+\\\\)\u0026quot;,\u0026quot;\u0026quot;,as.character(tmp$Term)) } tmp \u0026lt;- tmp %\u0026gt;% group_by(type) %\u0026gt;% top_n(n = 5, wt = Combined.Score) tmp$Term \u0026lt;- factor(tmp$Term, levels = rev(unique(tmp$Term))) pathlist \u0026lt;- rbind(pathlist, data.frame(tmp %\u0026gt;% group_by(type) %\u0026gt;% top_n(n = 2, wt = Combined.Score), class = dbs[i])) paths \u0026lt;- rbind(paths, data.frame(tmp, class = dbs[i])) plotlist[[i]] \u0026lt;- ggplot(tmp, aes(x = type, y = Term)) + geom_point(aes(size = Adjusted.P.value, color = Combined.Score)) + theme_bw(base_size = 9) + scale_colour_gradient(limits = c(0, max(tmp$Combined.Score) + 0.5), high = \u0026quot;#2b9348\u0026quot;, low = \u0026quot;#eeef20\u0026quot;) + xlab(NULL) + ylab(NULL) + ggtitle(dbs[i]) + labs(color = \u0026quot;Combined Score\u0026quot;, size = \u0026quot;-log10(padj)\u0026quot;) } tmplist \u0026lt;- tmplist %\u0026gt;% group_by(type) %\u0026gt;% arrange(desc(Combined.Score), .by_group = TRUE) paths \u0026lt;- paths[which(paths$Term %in% c(\u0026quot;PPAR signaling pathway\u0026quot;, \u0026quot;AMPK signaling pathway\u0026quot;, \u0026quot;Fatty acid biosynthesis\u0026quot;, \u0026quot;Focal adhesion\u0026quot;, \u0026quot;ECM-receptor interaction\u0026quot;, \u0026quot;Cell adhesion molecules (CAMs)\u0026quot;, \u0026quot;Adherens junction\u0026quot;, \u0026quot;3T3-L1 cell\u0026quot;, \u0026quot;Abdominal adipose tissue\u0026quot;, \u0026quot;Subcutaneous adipose tissue\u0026quot;, \u0026quot;Vasculature\u0026quot;, \u0026quot;Umbilical vein\u0026quot;, \u0026quot;Vascular cell\u0026quot;, \u0026quot;Common cardinal vein\u0026quot;, \u0026quot;Mesenchyme\u0026quot;, \u0026quot;triglyceride biosynthetic process\u0026quot;, \u0026quot;fatty acid transmembrane transport\u0026quot;)), ] paths \u0026lt;- paths %\u0026gt;% mutate( class_with_color = ifelse(class == \u0026quot;KEGG_2019_Mouse\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#0000FF'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), ifelse(class == \u0026quot;GO_Biological_Process_2018\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#9900CC'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), ifelse(class == \u0026quot;Jensen_TISSUES\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#CC0000'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;)))) ) paths \u0026lt;- paths %\u0026gt;% group_by(type) %\u0026gt;% arrange(desc(Combined.Score), .by_group = TRUE) paths$class_with_color \u0026lt;- factor(paths$class_with_color, levels = rev(unique(paths$class_with_color))) ggplot(paths, aes(x = type, y = class_with_color)) + geom_point(aes(size = Adjusted.P.value, color = Combined.Score)) + theme_bw(base_size = 8) + scale_colour_gradient(limits = c(0, max(paths$Combined.Score) + 0.5), high = \u0026quot;#2b9348\u0026quot;, low = \u0026quot;#eeef20\u0026quot;) + xlab(NULL) + ylab(NULL) + ggtitle(NULL) + labs(color = \u0026quot;Combined Score\u0026quot;, size = \u0026quot;-log10(padj)\u0026quot;) + theme(axis.text.y = element_markdown(), axis.text = element_text(size = 12))  Figure 2 ## Loading R packages library(dplyr) library(enrichR) library(ggplot2) library(ggpubr) library(ggtext) library(glue) library(RColorBrewer) library(Seurat) library(SeuratWrappers) ################################# ########### Figure 2A ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster TSNEPlot(data, pt.size = 1, cols = c(\u0026quot;#11c78b\u0026quot;, \u0026quot;#800080\u0026quot;, \u0026quot;#e57400\u0026quot;, \u0026quot;#0000FF\u0026quot;, \u0026quot;#dfdf0d\u0026quot;)) + xlab(\u0026quot;t-SNE 1\u0026quot;) + ylab(\u0026quot;t-SNE 2\u0026quot;) + theme_classic() + labs(color = \u0026quot;Cluster\u0026quot;) + theme(legend.position = \u0026quot;bottom\u0026quot;) ################################# ########### Figure 2B ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster markers \u0026lt;- FindAllMarkers(data, logfc.threshold = 0, only.pos = FALSE) top10 \u0026lt;- markers %\u0026gt;% group_by(cluster) %\u0026gt;% top_n(n = 10, wt = avg_logFC) data \u0026lt;- SeuratWrappers::RunALRA(data) data \u0026lt;- ScaleData(data) cls \u0026lt;- c(\u0026quot;#11c78b\u0026quot;, \u0026quot;#800080\u0026quot;, \u0026quot;#e57400\u0026quot;, \u0026quot;#0000FF\u0026quot;, \u0026quot;#dfdf0d\u0026quot;) mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) DoHeatmap(data, features = top10$gene, group.colors = cls, angle = 0, size = 5, label = FALSE) + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) ################################# ########### Figure 2C ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster DotPlot(data, features = c('Adipoq', 'Adrb3', 'Cidec', 'Dgat1', 'Fasn', 'Lipe', 'Pck1', 'Plin1', 'Pnpla2', 'Retn'), cols = c(\u0026quot;grey\u0026quot;, 'red'), assay = \u0026quot;RNA\u0026quot;) + xlab(NULL) + ylab(NULL) + theme_bw(base_size = 12) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) ################################# ########### Figure 2D ########### ################################# dbs \u0026lt;- c(\u0026quot;KEGG_2019_Mouse\u0026quot;, \u0026quot;WikiPathways_2019_Mouse\u0026quot;, \u0026quot;Jensen_TISSUES\u0026quot;, \u0026quot;GO_Biological_Process_2018\u0026quot;, \u0026quot;Mouse_Gene_Atlas\u0026quot;) genes_1 \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig2C_Markers_1.txt\u0026quot;) genes_2 \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig2C_Markers_2.txt\u0026quot;) genes_3 \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig2C_Markers_3.txt\u0026quot;) genes_4 \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig2C_Markers_4.txt\u0026quot;) genes_5 \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig2C_Markers_5.txt\u0026quot;) genes \u0026lt;- list(Ad1 = genes_1, Ad2 = genes_2, Ad3 = genes_3, Ad4 = genes_4, Ad5 = genes_5) results \u0026lt;- lapply(genes, enrichr, dbs) plotlist \u0026lt;- list() pathlist \u0026lt;- NULL tmplist \u0026lt;- NULL paths \u0026lt;- NULL for (i in 1:length(dbs)) { tmp \u0026lt;- lapply(results, `[[`, i) tmp \u0026lt;- mapply(cbind, tmp, \u0026quot;type\u0026quot; = names(tmp), SIMPLIFY = FALSE) tmp \u0026lt;- do.call(\u0026quot;rbind\u0026quot;, tmp) tmp \u0026lt;- subset(tmp, Adjusted.P.value \u0026lt; 0.05) tmp$Adjusted.P.value \u0026lt;- -log10(tmp$Adjusted.P.value) tmp$Combined.Score \u0026lt;- log2(tmp$Combined.Score) tmplist \u0026lt;- rbind(tmplist, data.frame(tmp, class = dbs[i])) if (dbs[i] == \u0026quot;WikiPathways_2019_Mouse\u0026quot; | dbs[i] == \u0026quot;GO_Biological_Process_2018\u0026quot;) { tmp$Term \u0026lt;- gsub(\u0026quot;\\\\s*\\\\([^\\\\)]+\\\\)\u0026quot;,\u0026quot;\u0026quot;,as.character(tmp$Term)) } tmp \u0026lt;- tmp %\u0026gt;% group_by(type) %\u0026gt;% top_n(n = 5, wt = Combined.Score) tmp$Term \u0026lt;- factor(tmp$Term, levels = rev(unique(tmp$Term))) pathlist \u0026lt;- rbind(pathlist, data.frame(tmp %\u0026gt;% group_by(type) %\u0026gt;% top_n(n = 2, wt = Combined.Score), class = dbs[i])) paths \u0026lt;- rbind(paths, data.frame(tmp, class = dbs[i])) plotlist[[i]] \u0026lt;- ggplot(tmp, aes(x = type, y = Term)) + geom_point(aes(size = Adjusted.P.value, color = Combined.Score)) + theme_bw(base_size = 9) + scale_colour_gradient(limits = c(0, max(tmp$Combined.Score) + 0.5), high = \u0026quot;#2b9348\u0026quot;, low = \u0026quot;#eeef20\u0026quot;) + xlab(NULL) + ylab(NULL) + ggtitle(dbs[i]) + labs(color = \u0026quot;Combined Score\u0026quot;, size = \u0026quot;-log10(padj)\u0026quot;) } tmplist \u0026lt;- tmplist %\u0026gt;% group_by(type) %\u0026gt;% arrange(desc(Combined.Score), .by_group = TRUE) paths \u0026lt;- paths[which(paths$Term %in% c(\u0026quot;PPAR signaling pathway\u0026quot;, \u0026quot;Fatty acid degradation\u0026quot;, \u0026quot;Glyoxylate and dicarboxylate metabolism\u0026quot;, \u0026quot;Insulin resistance\u0026quot;, \u0026quot;Biosynthesis of unsaturated fatty acids\u0026quot;, \u0026quot;Fatty acid biosynthesis\u0026quot;, \u0026quot;Adipocytokine signaling pathway\u0026quot;, \u0026quot;Propanoate metabolism\u0026quot;, \u0026quot;IL-17 signaling pathway\u0026quot;, \u0026quot;Fat digestion and absorption\u0026quot;, \u0026quot;Mitochondrial Gene Expression WP1263\u0026quot;, \u0026quot;Fatty acid oxidation WP2318\u0026quot;, \u0026quot;Fatty Acid Biosynthesis WP336\u0026quot;, \u0026quot;TCA Cycle WP434\u0026quot;, \u0026quot;Cholesterol metabolism WP4346\u0026quot;, \u0026quot;Subcutaneous adipose tissue\u0026quot;, \u0026quot;3T3-L1 cell\u0026quot;, \u0026quot;triglyceride biosynthetic process\u0026quot;, \u0026quot;triglyceride metabolic process\u0026quot;, \u0026quot;long-chain fatty acid transport\u0026quot;, \u0026quot;neutral amino acid transport\u0026quot;, \u0026quot;regulation of sequestering of triglyceride\u0026quot;, \u0026quot;cardiolipin acyl-chain remodeling\u0026quot;, \u0026quot;acylglycerol acyl-chain remodeling\u0026quot;, \u0026quot;adipose brown\u0026quot;)), ] paths \u0026lt;- paths %\u0026gt;% mutate( class_with_color = ifelse(class == \u0026quot;KEGG_2019_Mouse\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#0000FF'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), ifelse(class == \u0026quot;WikiPathways_2019_Mouse\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#f28804'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), ifelse(class == \u0026quot;Jensen_TISSUES\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#CC0000'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), ifelse(class == \u0026quot;GO_Biological_Process_2018\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#9900CC'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#18a997'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;))))) ) paths \u0026lt;- paths %\u0026gt;% group_by(type) %\u0026gt;% arrange(desc(Combined.Score), .by_group = TRUE) paths$class_with_color \u0026lt;- factor(paths$class_with_color, levels = rev(unique(paths$class_with_color))) ggplot(paths, aes(x = type, y = class_with_color)) + geom_point(aes(size = Adjusted.P.value, color = Combined.Score)) + theme_bw(base_size = 8) + scale_colour_gradient(limits = c(0, max(paths$Combined.Score) + 0.5), high = \u0026quot;#2b9348\u0026quot;, low = \u0026quot;#eeef20\u0026quot;) + xlab(NULL) + ylab(NULL) + ggtitle(NULL) + labs(color = \u0026quot;Combined Score\u0026quot;, size = \u0026quot;-log10(padj)\u0026quot;) + theme(axis.text.y = element_markdown(), axis.text = element_text(size = 12)) ################################# ########### Figure 2E ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$clusters \u0026lt;- Idents(data) data \u0026lt;- SeuratWrappers::RunALRA(data) data \u0026lt;- ScaleData(data) genes \u0026lt;- c('Adipoq', 'Pnpla2', 'Fasn', 'Lep', 'Cebpa', 'Pparg', 'Cidec', 'Car3', 'Cd36', 'Gadd45g', 'Serpine1', 'Vegfa') genes \u0026lt;- genes[genes %in% rownames(data)] df \u0026lt;- NULL for (i in 1:length(genes)) { c3 \u0026lt;- data.frame(value = data@assays$alra@data[genes[i], names(Idents(data))[which(Idents(data) == 'Ad3')]], cluster = 'Ad3', gene = genes[i]) c4 \u0026lt;- data.frame(value = data@assays$alra@data[genes[i], names(Idents(data))[which(Idents(data) == 'Ad4')]], cluster = 'Ad4', gene = genes[i]) df \u0026lt;- rbind(df, rbind(c3, c4)) } df$cluster \u0026lt;- as.factor(df$cluster) df$gene \u0026lt;- factor(df$gene, levels = genes) intr \u0026lt;- aggregate(df[, 1], list(df$gene), mean) colnames(intr) \u0026lt;- c('gene', 'Z') ggboxplot(df, x = \u0026quot;cluster\u0026quot;, y = \u0026quot;value\u0026quot;, color = \u0026quot;cluster\u0026quot;, add = \u0026quot;jitter\u0026quot;) + facet_wrap(~ gene) + geom_hline(data = intr, aes(yintercept = Z), linetype = 'dashed') + stat_compare_means(label = 'p.signif', method = 't.test', label.x = 1.5, label.y = 3.4) + xlab(NULL) + ylab('Normalized Expression') + theme_bw() + scale_color_manual(values = c('Ad3' = \u0026quot;#e57400\u0026quot;, 'Ad4' = \u0026quot;#0000FF\u0026quot;))  Figure 3 ## Loading R packages library(dplyr) library(fgsea) library(ggplot2) library(ggpubr) library(ggrepel) library(monocle) library(Nebulosa) library(RColorBrewer) library(scales) library(Seurat) library(SeuratWrappers) library(viridis) source('/Users/biagi/PhD/Adipocyte/2_Functions.R') ################################# ########### Figure 3A ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) Idents(data) \u0026lt;- as.factor(data$timpoint) data \u0026lt;- subset(data, cells = names(which(data$timpoint == '4day' | data$timpoint == 'RT' | data$timpoint == 'CL'))) data$timpoint \u0026lt;- gsub('4day', 'Cold', data$timpoint) TSNEPlot(data, pt.size = 1, group.by = 'timpoint') + xlab(\u0026quot;t-SNE 1\u0026quot;) + ylab(\u0026quot;t-SNE 2\u0026quot;) + theme_classic() + labs(color = \u0026quot;Cluster\u0026quot;) + theme(legend.position = \u0026quot;bottom\u0026quot;) ################################# ########### Figure 3B ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) Idents(data) \u0026lt;- as.factor(data$timpoint) data \u0026lt;- subset(data, cells = names(which(data$timpoint == '4day' | data$timpoint == 'RT' | data$timpoint == 'CL'))) data \u0026lt;- SeuratWrappers::RunALRA(data) data \u0026lt;- ScaleData(data) genes \u0026lt;- c('Lipe', 'Adrb3', 'Pnpla2', 'Plin1', 'Fasn', 'Acadm', 'Gk', 'Adipoq', 'Retn', 'Cidec', 'Ppara', 'Ucp1', 'Dio2', 'Prdm16', 'Elovl3') genes \u0026lt;- genes[genes %in% rownames(data)] ## Nebulosa expression plot pt \u0026lt;- plot_density(data, genes, reduction = \u0026quot;tsne\u0026quot;, pal = \u0026quot;inferno\u0026quot;, size = 0.5, combine = FALSE) pt \u0026lt;- lapply(pt, function(x){ x + theme_bw() + theme(panel.background = element_rect(colour = \u0026quot;black\u0026quot;, size = 0.1), axis.ticks.length = unit(.2, \u0026quot;cm\u0026quot;), axis.text = element_text(size = 11), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(hjust = 0.5, face = \u0026quot;italic\u0026quot;, size = 10), legend.position = \u0026quot;none\u0026quot;)}) ggarrange(plotlist = pt, ncol = 5, nrow = 3, common.legend = TRUE) ################################# ########### Figure 3C ########### ################################# ort \u0026lt;- read.table(\u0026quot;/projects/cangen/coliveir/cellphonedb/Orthologs_human_mouse.txt\u0026quot;, sep = \u0026quot;,\u0026quot;, header = TRUE) pathways \u0026lt;- gmtPathways('/Users/biagi/PhD/Adipocyte/msigdb.v7.1.symbols.gmt') ## ColdxRT comp1 \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Diff_Adipocytes_ColdxRT_ALL.txt\u0026quot;) comp1 \u0026lt;- subset(comp1, p_val_adj \u0026lt; 0.05) comp1 \u0026lt;- comp1[order(comp1$avg_logFC, decreasing = TRUE), ] comp1 \u0026lt;- rbind(head(comp1, 50), tail(comp1, 50)) comp1 \u0026lt;- merge(ort, comp1, by.x = \u0026quot;Mouse.gene.name\u0026quot;, by.y = \u0026quot;row.names\u0026quot;) comp1$Mouse.gene.name \u0026lt;- comp1$Gene.stable.ID \u0026lt;- comp1$Mouse.gene.stable.ID \u0026lt;- NULL colnames(comp1)[1] \u0026lt;- \u0026quot;Gene\u0026quot; ranks \u0026lt;- structure(comp1$avg_logFC, names = comp1$Gene) ranks \u0026lt;- sort(ranks) fgseaRes1 \u0026lt;- fgsea(pathways, ranks, minSize = 5) fgseaRes1 \u0026lt;- subset(fgseaRes1, padj \u0026lt; 0.05) fgseaRes1 \u0026lt;- fgseaRes1[order(fgseaRes1$NES, decreasing = TRUE), ] genes1 \u0026lt;- fgseaRes1$leadingEdge for (i in 1:length(genes1)) { fgseaRes1$genes[i] \u0026lt;- paste(genes1[[i]], collapse = ';') } fgseaRes1$leadingEdge \u0026lt;- NULL enrich_ColdxRT \u0026lt;- read.table('/Users/biagi/PhD/Adipocyte/Figures/update/fgsea_ColdxRT.txt', header = TRUE) pathways_ColdxRT \u0026lt;- c('GO_ORGANOPHOSPHATE_BIOSYNTHETIC_PROCESS', 'GO_FATTY_ACID_TRANSPORT', 'GO_LONG_CHAIN_FATTY_ACID_TRANSPORT', 'GO_MONOCARBOXYLIC_ACID_TRANSPORT', 'GO_RESPONSE_TO_FATTY_ACID', 'REACTOME_NGF_STIMULATED_TRANSCRIPTION', 'REACTOME_NUCLEAR_EVENTS_KINASE_AND_TRANSCRIPTION_FACTOR_ACTIVATION', 'OSWALD_HEMATOPOIETIC_STEM_CELL_IN_COLLAGEN_GEL_UP', 'NAGASHIMA_EGF_SIGNALING_UP', 'NAGASHIMA_NRG1_SIGNALING_UP') enrich_ColdxRT \u0026lt;- enrich_ColdxRT[which(enrich_ColdxRT$pathway %in% pathways_ColdxRT), ] enrich_ColdxRT$class \u0026lt;- ifelse(enrich_ColdxRT$NES \u0026gt; 0, 'Up-regulated', 'Down-regulated') enrich_ColdxRT \u0026lt;- enrich_ColdxRT[order(enrich_ColdxRT$class, enrich_ColdxRT$NES), ] enrich_ColdxRT$order \u0026lt;- seq_len(nrow(enrich_ColdxRT)) ggplot(enrich_ColdxRT, aes(order, NES, fill = class)) + geom_bar(stat = \u0026quot;identity\u0026quot;, show.legend = TRUE) + xlab(NULL) + ylab(\u0026quot;Normalized Enrichment Score (NES)\u0026quot;) + theme_bw() + coord_flip() + theme(legend.position = \u0026quot;right\u0026quot;, legend.title = element_text(size = 10), plot.title = element_text(hjust = 0.5)) + scale_fill_discrete(name = \u0026quot;Enrichment\u0026quot;) + scale_x_continuous(breaks = enrich_ColdxRT$order, labels = enrich_ColdxRT$pathway, expand = c(0, 0)) + ggtitle('GSEA for Cold x RT') ## CLxRT comp2 \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Diff_Adipocytes_CLxRT_ALL.txt\u0026quot;) comp2 \u0026lt;- subset(comp2, p_val_adj \u0026lt; 0.05) comp2 \u0026lt;- comp2[order(comp2$avg_logFC, decreasing = TRUE), ] comp2 \u0026lt;- rbind(head(comp2, 50), tail(comp2, 50)) comp2 \u0026lt;- merge(ort, comp2, by.x = \u0026quot;Mouse.gene.name\u0026quot;, by.y = \u0026quot;row.names\u0026quot;) comp2$Mouse.gene.name \u0026lt;- comp2$Gene.stable.ID \u0026lt;- comp2$Mouse.gene.stable.ID \u0026lt;- NULL colnames(comp2)[1] \u0026lt;- \u0026quot;Gene\u0026quot; ranks \u0026lt;- structure(comp2$avg_logFC, names = comp2$Gene) ranks \u0026lt;- sort(ranks) fgseaRes2 \u0026lt;- fgsea(pathways, ranks, minSize = 5) fgseaRes2 \u0026lt;- subset(fgseaRes2, padj \u0026lt; 0.05) fgseaRes2 \u0026lt;- fgseaRes2[order(fgseaRes2$NES, decreasing = TRUE), ] genes2 \u0026lt;- fgseaRes2$leadingEdge for (i in 1:length(genes2)) { fgseaRes2$genes[i] \u0026lt;- paste(genes2[[i]], collapse = ';') } fgseaRes2$leadingEdge \u0026lt;- NULL enrich_CLxRT \u0026lt;- read.table('/Users/biagi/PhD/Adipocyte/Figures/update/fgsea_CLxRT.txt', header = TRUE) pathways_CLxRT \u0026lt;- c('GO_ORGANOPHOSPHATE_METABOLIC_PROCESS', 'GO_MITOCHONDRIAL_ENVELOPE', 'GO_ATP_METABOLIC_PROCESS', 'GO_OXIDOREDUCTASE_ACTIVITY', 'GO_OXIDATIVE_PHOSPHORYLATION', 'GO_NEGATIVE_REGULATION_OF_PROTEIN_METABOLIC_PROCESS', 'GO_RESPONSE_TO_MECHANICAL_STIMULUS', 'GO_NEGATIVE_REGULATION_OF_BIOSYNTHETIC_PROCESS', 'NAGASHIMA_EGF_SIGNALING_UP', 'NAGASHIMA_NRG1_SIGNALING_UP') enrich_CLxRT \u0026lt;- enrich_CLxRT[which(enrich_CLxRT$pathway %in% pathways_CLxRT), ] enrich_CLxRT$class \u0026lt;- ifelse(enrich_CLxRT$NES \u0026gt; 0, 'Up-regulated', 'Down-regulated') enrich_CLxRT \u0026lt;- enrich_CLxRT[order(enrich_CLxRT$class, enrich_CLxRT$NES), ] enrich_CLxRT$order \u0026lt;- seq_len(nrow(enrich_CLxRT)) ggplot(enrich_CLxRT, aes(order, NES, fill = class)) + geom_bar(stat = \u0026quot;identity\u0026quot;, show.legend = TRUE) + xlab(NULL) + ylab(\u0026quot;Normalized Enrichment Score (NES)\u0026quot;) + theme_bw() + coord_flip() + theme(legend.position = \u0026quot;right\u0026quot;, legend.title = element_text(size = 10), plot.title = element_text(hjust = 0.5)) + scale_fill_discrete(name = \u0026quot;Enrichment\u0026quot;) + scale_x_continuous(breaks = enrich_CLxRT$order, labels = enrich_CLxRT$pathway, expand = c(0, 0)) + ggtitle('GSEA for CL x RT') ################################# ########### Figure 3D ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) data$timpoint \u0026lt;- gsub('4day', 'Cold', data$timpoint) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$clusters \u0026lt;- Idents(data) data \u0026lt;- SeuratWrappers::RunALRA(data) data \u0026lt;- ScaleData(data) anno_CL \u0026lt;- subset(data@meta.data, timpoint == 'CL') anno_RT \u0026lt;- subset(data@meta.data, timpoint == 'RT') anno_24hr \u0026lt;- subset(data@meta.data, timpoint == '24hr') anno_48hr \u0026lt;- subset(data@meta.data, timpoint == '48hr') anno_Cold \u0026lt;- subset(data@meta.data, timpoint == 'Cold') tsne \u0026lt;- as.data.frame(Embeddings(data, 'tsne')) meta \u0026lt;- data@meta.data df \u0026lt;- merge(tsne, meta, by = 'row.names') rownames(df) \u0026lt;- df$Row.names df$Row.names \u0026lt;- NULL ## CL ggplot() + geom_point(data = df, aes(x = tSNE_1, y = tSNE_2, color = timpoint), size = 0.5) + scale_color_manual(values = rep(\u0026quot;gray75\u0026quot;, 5)) + guides(color = guide_legend(override.aes = list(size = 7))) + xlab(\u0026quot;t-SNE 1\u0026quot;) + ylab(\u0026quot;t-SNE 2\u0026quot;) + labs(color = '') + ggtitle(paste0('CL (', nrow(anno_CL), ' cells)')) + theme_classic() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \u0026quot;none\u0026quot;, plot.title = element_text(hjust = 0.5, size = 8)) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_CL)[anno_CL$clusters == 'Ad1'], 'tSNE_1'], df[rownames(anno_CL)[anno_CL$clusters == 'Ad1'], 'tSNE_2'], colour = \u0026quot;#11c78b\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_CL)[anno_CL$clusters == 'Ad2'], 'tSNE_1'], df[rownames(anno_CL)[anno_CL$clusters == 'Ad2'], 'tSNE_2'], colour = \u0026quot;#800080\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_CL)[anno_CL$clusters == 'Ad3'], 'tSNE_1'], df[rownames(anno_CL)[anno_CL$clusters == 'Ad3'], 'tSNE_2'], colour = \u0026quot;#e57400\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_CL)[anno_CL$clusters == 'Ad4'], 'tSNE_1'], df[rownames(anno_CL)[anno_CL$clusters == 'Ad4'], 'tSNE_2'], colour = \u0026quot;#0000FF\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_CL)[anno_CL$clusters == 'Ad5'], 'tSNE_1'], df[rownames(anno_CL)[anno_CL$clusters == 'Ad5'], 'tSNE_2'], colour = \u0026quot;#dfdf0d\u0026quot;, size = 1) df2 \u0026lt;- data.frame( class = c(\u0026quot;Ad1\u0026quot;, \u0026quot;Ad2\u0026quot;, \u0026quot;Ad3\u0026quot;, \u0026quot;Ad4\u0026quot;, 'Ad5'), n = c(sum(anno_CL == \u0026quot;Ad1\u0026quot;), sum(anno_CL == \u0026quot;Ad2\u0026quot;), sum(anno_CL == \u0026quot;Ad3\u0026quot;), sum(anno_CL == \u0026quot;Ad4\u0026quot;), sum(anno_CL == \u0026quot;Ad5\u0026quot;)), value = c(round((sum(anno_CL == \u0026quot;Ad1\u0026quot;)/nrow(anno_CL))*100, 2), round((sum(anno_CL == \u0026quot;Ad2\u0026quot;)/nrow(anno_CL))*100, 2), round((sum(anno_CL == \u0026quot;Ad3\u0026quot;)/nrow(anno_CL))*100, 2), round((sum(anno_CL == \u0026quot;Ad4\u0026quot;)/nrow(anno_CL))*100, 2), round((sum(anno_CL == \u0026quot;Ad5\u0026quot;)/nrow(anno_CL))*100, 2)) ) df2$class \u0026lt;- factor(df2$class, levels = c(\u0026quot;Ad1\u0026quot;, \u0026quot;Ad2\u0026quot;, \u0026quot;Ad3\u0026quot;, \u0026quot;Ad4\u0026quot;, \u0026quot;Ad5\u0026quot;)) df2 \u0026lt;- df2 %\u0026gt;% arrange(desc(class)) %\u0026gt;% mutate(text_y = cumsum(value) - value/2) df2$pos = (cumsum(c(0, df2$value)) + c(df2$value / 2, .01))[1:nrow(df2)] ggplot(df2, aes(x = \u0026quot;\u0026quot;, y = value, fill = class)) + geom_bar(width = 1, stat = \u0026quot;identity\u0026quot;, color = \u0026quot;white\u0026quot;) + coord_polar(\u0026quot;y\u0026quot;, start = 0)+ scale_fill_manual(values = c(\u0026quot;#11c78b\u0026quot;, \u0026quot;#800080\u0026quot;, \u0026quot;#e57400\u0026quot;, \u0026quot;#0000FF\u0026quot;, \u0026quot;#dfdf0d\u0026quot;)) + theme_void() + labs(fill = \u0026quot;Clusters\u0026quot;) + geom_text_repel(aes(x = 1.5, y = pos, label = paste0(value, \u0026quot;%\u0026quot;)), nudge_x = .1, segment.size = .7, show.legend = FALSE) ## RT ggplot() + geom_point(data = df, aes(x = tSNE_1, y = tSNE_2, color = timpoint), size = 0.5) + scale_color_manual(values = rep(\u0026quot;gray75\u0026quot;, 5)) + guides(color = guide_legend(override.aes = list(size = 7))) + xlab(\u0026quot;t-SNE 1\u0026quot;) + ylab(\u0026quot;t-SNE 2\u0026quot;) + labs(color = '') + ggtitle(paste0('RT (', nrow(anno_RT), ' cells)')) + theme_classic() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \u0026quot;none\u0026quot;, plot.title = element_text(hjust = 0.5, size = 8)) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_RT)[anno_RT$clusters == 'Ad1'], 'tSNE_1'], df[rownames(anno_RT)[anno_RT$clusters == 'Ad1'], 'tSNE_2'], colour = \u0026quot;#11c78b\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_RT)[anno_RT$clusters == 'Ad2'], 'tSNE_1'], df[rownames(anno_RT)[anno_RT$clusters == 'Ad2'], 'tSNE_2'], colour = \u0026quot;#800080\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_RT)[anno_RT$clusters == 'Ad3'], 'tSNE_1'], df[rownames(anno_RT)[anno_RT$clusters == 'Ad3'], 'tSNE_2'], colour = \u0026quot;#e57400\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_RT)[anno_RT$clusters == 'Ad4'], 'tSNE_1'], df[rownames(anno_RT)[anno_RT$clusters == 'Ad4'], 'tSNE_2'], colour = \u0026quot;#0000FF\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_RT)[anno_RT$clusters == 'Ad5'], 'tSNE_1'], df[rownames(anno_RT)[anno_RT$clusters == 'Ad5'], 'tSNE_2'], colour = \u0026quot;#dfdf0d\u0026quot;, size = 1) df2 \u0026lt;- data.frame( class = c(\u0026quot;Ad1\u0026quot;, \u0026quot;Ad2\u0026quot;, \u0026quot;Ad3\u0026quot;, \u0026quot;Ad4\u0026quot;, 'Ad5'), n = c(sum(anno_RT == \u0026quot;Ad1\u0026quot;), sum(anno_RT == \u0026quot;Ad2\u0026quot;), sum(anno_RT == \u0026quot;Ad3\u0026quot;), sum(anno_RT == \u0026quot;Ad4\u0026quot;), sum(anno_RT == \u0026quot;Ad5\u0026quot;)), value = c(round((sum(anno_RT == \u0026quot;Ad1\u0026quot;)/nrow(anno_RT))*100, 2), round((sum(anno_RT == \u0026quot;Ad2\u0026quot;)/nrow(anno_RT))*100, 2), round((sum(anno_RT == \u0026quot;Ad3\u0026quot;)/nrow(anno_RT))*100, 2), round((sum(anno_RT == \u0026quot;Ad4\u0026quot;)/nrow(anno_RT))*100, 2), round((sum(anno_RT == \u0026quot;Ad5\u0026quot;)/nrow(anno_RT))*100, 2)) ) df2$class \u0026lt;- factor(df2$class, levels = c(\u0026quot;Ad1\u0026quot;, \u0026quot;Ad2\u0026quot;, \u0026quot;Ad3\u0026quot;, \u0026quot;Ad4\u0026quot;, \u0026quot;Ad5\u0026quot;)) df2 \u0026lt;- df2 %\u0026gt;% arrange(desc(class)) %\u0026gt;% mutate(text_y = cumsum(value) - value/2) df2$pos = (cumsum(c(0, df2$value)) + c(df2$value / 2, .01))[1:nrow(df2)] ggplot(df2, aes(x = \u0026quot;\u0026quot;, y = value, fill = class)) + geom_bar(width = 1, stat = \u0026quot;identity\u0026quot;, color = \u0026quot;white\u0026quot;) + coord_polar(\u0026quot;y\u0026quot;, start = 0)+ scale_fill_manual(values = c(\u0026quot;#11c78b\u0026quot;, \u0026quot;#800080\u0026quot;, \u0026quot;#e57400\u0026quot;, \u0026quot;#0000FF\u0026quot;, \u0026quot;#dfdf0d\u0026quot;)) + theme_void() + labs(fill = \u0026quot;Clusters\u0026quot;) + geom_text_repel(aes(x = 1.5, y = pos, label = paste0(value, \u0026quot;%\u0026quot;)), nudge_x = .1, segment.size = .7, show.legend = FALSE) ## Cold ggplot() + geom_point(data = df, aes(x = tSNE_1, y = tSNE_2, color = timpoint), size = 0.5) + scale_color_manual(values = rep(\u0026quot;gray75\u0026quot;, 5)) + xlab(\u0026quot;t-SNE 1\u0026quot;) + ylab(\u0026quot;t-SNE 2\u0026quot;) + guides(color = guide_legend(override.aes = list(size = 7))) + labs(color = '') + ggtitle(paste0('Cold (', nrow(anno_Cold), ' cells)')) + theme_classic() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \u0026quot;none\u0026quot;, plot.title = element_text(hjust = 0.5, size = 8)) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_Cold)[anno_Cold$clusters == 'Ad1'], 'tSNE_1'], df[rownames(anno_Cold)[anno_Cold$clusters == 'Ad1'], 'tSNE_2'], colour = \u0026quot;#11c78b\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_Cold)[anno_Cold$clusters == 'Ad2'], 'tSNE_1'], df[rownames(anno_Cold)[anno_Cold$clusters == 'Ad2'], 'tSNE_2'], colour = \u0026quot;#800080\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_Cold)[anno_Cold$clusters == 'Ad3'], 'tSNE_1'], df[rownames(anno_Cold)[anno_Cold$clusters == 'Ad3'], 'tSNE_2'], colour = \u0026quot;#e57400\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_Cold)[anno_Cold$clusters == 'Ad4'], 'tSNE_1'], df[rownames(anno_Cold)[anno_Cold$clusters == 'Ad4'], 'tSNE_2'], colour = \u0026quot;#0000FF\u0026quot;, size = 1) + annotate(\u0026quot;point\u0026quot;, df[rownames(anno_Cold)[anno_Cold$clusters == 'Ad5'], 'tSNE_1'], df[rownames(anno_Cold)[anno_Cold$clusters == 'Ad5'], 'tSNE_2'], colour = \u0026quot;#dfdf0d\u0026quot;, size = 1) df2 \u0026lt;- data.frame( class = c(\u0026quot;Ad1\u0026quot;, \u0026quot;Ad2\u0026quot;, \u0026quot;Ad3\u0026quot;, \u0026quot;Ad4\u0026quot;, 'Ad5'), n = c(sum(anno_Cold == \u0026quot;Ad1\u0026quot;), sum(anno_Cold == \u0026quot;Ad2\u0026quot;), sum(anno_Cold == \u0026quot;Ad3\u0026quot;), sum(anno_Cold == \u0026quot;Ad4\u0026quot;), sum(anno_Cold == \u0026quot;Ad5\u0026quot;)), value = c(round((sum(anno_Cold == \u0026quot;Ad1\u0026quot;)/nrow(anno_Cold))*100, 2), round((sum(anno_Cold == \u0026quot;Ad2\u0026quot;)/nrow(anno_Cold))*100, 2), round((sum(anno_Cold == \u0026quot;Ad3\u0026quot;)/nrow(anno_Cold))*100, 2), round((sum(anno_Cold == \u0026quot;Ad4\u0026quot;)/nrow(anno_Cold))*100, 2), round((sum(anno_Cold == \u0026quot;Ad5\u0026quot;)/nrow(anno_Cold))*100, 2)) ) df2$class \u0026lt;- factor(df2$class, levels = c(\u0026quot;Ad1\u0026quot;, \u0026quot;Ad2\u0026quot;, \u0026quot;Ad3\u0026quot;, \u0026quot;Ad4\u0026quot;, \u0026quot;Ad5\u0026quot;)) df2 \u0026lt;- df2 %\u0026gt;% arrange(desc(class)) %\u0026gt;% mutate(text_y = cumsum(value) - value/2) df2$pos = (cumsum(c(0, df2$value)) + c(df2$value / 2, .01))[1:nrow(df2)] ggplot(df2, aes(x = \u0026quot;\u0026quot;, y = value, fill = class)) + geom_bar(width = 1, stat = \u0026quot;identity\u0026quot;, color = \u0026quot;white\u0026quot;) + coord_polar(\u0026quot;y\u0026quot;, start = 0)+ scale_fill_manual(values = c(\u0026quot;#11c78b\u0026quot;, \u0026quot;#800080\u0026quot;, \u0026quot;#e57400\u0026quot;, \u0026quot;#0000FF\u0026quot;, \u0026quot;#dfdf0d\u0026quot;)) + theme_void() + labs(fill = \u0026quot;Clusters\u0026quot;) + geom_text_repel(aes(x = 1.5, y = pos, label = paste0(value, \u0026quot;%\u0026quot;)), nudge_x = .1, segment.size = .7, show.legend = FALSE) ################################# ########### Figure 3E ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- factor(data$timpoint) data$cluster \u0026lt;- factor(new_cluster) data \u0026lt;-SeuratWrappers:: RunALRA(data) data \u0026lt;- ScaleData(data, features = rownames(data)) genes \u0026lt;- c('Acaa2', 'Ehhadh', 'Slc27a2', 'Acadm', 'Scp2', 'Acadvl', 'Hadha', 'Hadhb', 'Acaa1b', 'Abcd3', 'Sdhaf2', 'Pdha1', 'Pdhb', 'Idh3g', 'Mdh1', 'Sdha', 'Ndufs4', 'Sdhc', 'Suclg1', 'Mdh2', 'Akt1', 'Kiss1r', 'Mif', 'Cpt1b', 'Fabp3', 'Acsl5', 'Mfsd2a', 'Abcc4', 'Acsl3', 'Pla2g12a', 'Aldoa', 'Gpi1', 'Pgk1', 'Gapdh', 'Pfkp', 'Pkm', 'Ogdh', 'Ppara', 'Prkaa1', 'Gale', 'Entpd5', 'Stat3', 'Foxk2', 'Igf1', \u0026quot;Daglb\u0026quot;, \u0026quot;Slc2a4\u0026quot;, \u0026quot;Gpd1\u0026quot;, \u0026quot;Pcx\u0026quot;, \u0026quot;Abhd5\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;Lipe\u0026quot;, \u0026quot;Pck1\u0026quot;, \u0026quot;Pnpla2\u0026quot;, 'Acaca', 'Acly', 'Fasn', 'Srebf1', 'Dgat2', 'Insig1', 'Hadh', 'Elovl6', 'Lpl') genes \u0026lt;- genes[genes %in% rownames(data)] mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) DoHeatmap(data, features = genes, angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Ucp1 Expression') ################################# ########### Figure 3G ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$clusters \u0026lt;- Idents(data) data \u0026lt;- SeuratWrappers::RunALRA(data) data \u0026lt;- ScaleData(data) genes \u0026lt;- c('Acadm', 'Adipoq', 'Adrb3', 'Lep', 'Fasn', 'Ucp1', 'Cidea', 'Dio2', 'Elovl3', 'Cox8b', 'Cpt1b', 'Gk', 'Plin5', 'Pnpla2', 'Lpl', 'Acaca', 'Gadd45g', 'Fabp3', 'Ppara', 'Slc2a4') genes \u0026lt;- genes[genes %in% rownames(data)] df \u0026lt;- NULL for (i in 1:length(genes)) { c1 \u0026lt;- data.frame(value = data@assays$alra@data[genes[i], names(Idents(data))[which(Idents(data) == 'Ad1')]], cluster = 'Ad1', gene = genes[i]) c2 \u0026lt;- data.frame(value = data@assays$alra@data[genes[i], names(Idents(data))[which(Idents(data) == 'Ad2')]], cluster = 'Ad2', gene = genes[i]) c3 \u0026lt;- data.frame(value = data@assays$alra@data[genes[i], names(Idents(data))[which(Idents(data) == 'Ad3')]], cluster = 'Ad3', gene = genes[i]) c4 \u0026lt;- data.frame(value = data@assays$alra@data[genes[i], names(Idents(data))[which(Idents(data) == 'Ad4')]], cluster = 'Ad4', gene = genes[i]) c5 \u0026lt;- data.frame(value = data@assays$alra@data[genes[i], names(Idents(data))[which(Idents(data) == 'Ad5')]], cluster = 'Ad5', gene = genes[i]) df \u0026lt;- rbind(df, rbind(c1, c2, c3, c4, c5)) } df$cluster \u0026lt;- as.factor(df$cluster) df$gene \u0026lt;- factor(df$gene, levels = genes) intr \u0026lt;- aggregate(df[, 1], list(df$gene), mean) colnames(intr) \u0026lt;- c('gene', 'Z') ggboxplot(df, x = \u0026quot;cluster\u0026quot;, y = \u0026quot;value\u0026quot;, color = \u0026quot;cluster\u0026quot;, add = \u0026quot;jitter\u0026quot;) + facet_wrap(~ gene) + geom_hline(data = intr, aes(yintercept = Z), linetype = 'dashed') + stat_compare_means(label = \u0026quot;p.signif\u0026quot;, method = \u0026quot;t.test\u0026quot;, ref.group = \u0026quot;.all.\u0026quot;, label.x = 1.5, label.y = 3.5) + xlab(NULL) + ylab('Normalized Expression') + theme_bw() + scale_color_manual(values = c('Ad1' = \u0026quot;#11c78b\u0026quot;, 'Ad2' = \u0026quot;#800080\u0026quot;, 'Ad3' = \u0026quot;#e57400\u0026quot;, 'Ad4' = \u0026quot;#0000FF\u0026quot;, 'Ad5' = \u0026quot;#dfdf0d\u0026quot;)) ################################# ########### Figure 3H ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) data$timpoint \u0026lt;- gsub('4day', 'Cold', data$timpoint) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) Idents(data) \u0026lt;- as.factor(data$timpoint) data \u0026lt;- subset(data, cells = names(which(data$timpoint == 'CL' | data$timpoint == 'RT'))) DefaultAssay(data) \u0026lt;- \u0026quot;RNA\u0026quot; mat \u0026lt;- data@assays$RNA@data fdata \u0026lt;- data.frame(gene_short_name = rownames(data), row.names = rownames(data)) pdata \u0026lt;- data@meta.data pd \u0026lt;- new(\u0026quot;AnnotatedDataFrame\u0026quot;, data = pdata) fd \u0026lt;- new(\u0026quot;AnnotatedDataFrame\u0026quot;, data = fdata) cds \u0026lt;- newCellDataSet(as(mat, \u0026quot;dgCMatrix\u0026quot;), phenoData = pd, featureData = fd, expressionFamily = negbinomial.size()) rm(data, mat, fdata, pdata, fd, pd) cds \u0026lt;- estimateSizeFactors(cds) cds \u0026lt;- estimateDispersions(cds) cds \u0026lt;- detectGenes(cds, min_expr = 0.1) expressed_genes \u0026lt;- row.names(subset(fData(cds), num_cells_expressed \u0026gt;= 10)) diff_test_res \u0026lt;- differentialGeneTest(cds[expressed_genes, ], fullModelFormulaStr = \u0026quot;~cluster\u0026quot;, cores = 6, verbose = TRUE) ordering_genes \u0026lt;- row.names(subset(diff_test_res, qval \u0026lt; 0.01)) cds \u0026lt;- setOrderingFilter(cds, ordering_genes) cds \u0026lt;- reduceDimension(cds, max_components = 2, method = 'DDRTree', verbose = TRUE) cds \u0026lt;- orderCells(cds) cds \u0026lt;- orderCells(cds, root_state = 3) plot_cell_trajectory(cds, color_by = \u0026quot;Pseudotime\u0026quot;) plot_cell_trajectory(cds, color_by = \u0026quot;cluster\u0026quot;) + scale_color_manual(values = c(\u0026quot;Ad1\u0026quot; = \u0026quot;#11c78b\u0026quot;, \u0026quot;Ad2\u0026quot; = \u0026quot;#800080\u0026quot;, \u0026quot;Ad3\u0026quot; = \u0026quot;#e57400\u0026quot;, \u0026quot;Ad4\u0026quot; = \u0026quot;#0000FF\u0026quot;, \u0026quot;Ad5\u0026quot; = \u0026quot;#dfdf0d\u0026quot;)) plotMonocle(cds, c('Ppara', 'Prdm16', 'Ppargc1a', 'Egr2', 'Dbp', 'Xbp1', 'Clock', 'Zbtb43', 'Zbtb7a')) ################################# ########### Figure 3I ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) data$timpoint \u0026lt;- gsub('4day', 'Cold', data$timpoint) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) Idents(data) \u0026lt;- as.factor(data$timpoint) data \u0026lt;- subset(data, cells = names(which(data$timpoint == 'Cold' | data$timpoint == 'RT'))) DefaultAssay(data) \u0026lt;- \u0026quot;RNA\u0026quot; mat \u0026lt;- data@assays$RNA@data fdata \u0026lt;- data.frame(gene_short_name = rownames(data), row.names = rownames(data)) pdata \u0026lt;- data@meta.data pd \u0026lt;- new(\u0026quot;AnnotatedDataFrame\u0026quot;, data = pdata) fd \u0026lt;- new(\u0026quot;AnnotatedDataFrame\u0026quot;, data = fdata) cds \u0026lt;- newCellDataSet(as(mat, \u0026quot;dgCMatrix\u0026quot;), phenoData = pd, featureData = fd, expressionFamily = negbinomial.size()) rm(data, mat, fdata, pdata, fd, pd) cds \u0026lt;- estimateSizeFactors(cds) cds \u0026lt;- estimateDispersions(cds) cds \u0026lt;- detectGenes(cds, min_expr = 0.1) expressed_genes \u0026lt;- row.names(subset(fData(cds), num_cells_expressed \u0026gt;= 10)) diff_test_res \u0026lt;- differentialGeneTest(cds[expressed_genes, ], fullModelFormulaStr = \u0026quot;~cluster\u0026quot;, cores = 6, verbose = TRUE) ordering_genes \u0026lt;- row.names(subset(diff_test_res, qval \u0026lt; 0.01)) cds \u0026lt;- setOrderingFilter(cds, ordering_genes) cds \u0026lt;- reduceDimension(cds, max_components = 2, method = 'DDRTree', verbose = TRUE) cds \u0026lt;- orderCells(cds) cds \u0026lt;- orderCells(cds, root_state = 4) plot_cell_trajectory(cds, color_by = \u0026quot;Pseudotime\u0026quot;) plot_cell_trajectory(cds, color_by = \u0026quot;cluster\u0026quot;) + scale_color_manual(values = c(\u0026quot;Ad1\u0026quot; = \u0026quot;#11c78b\u0026quot;, \u0026quot;Ad2\u0026quot; = \u0026quot;#800080\u0026quot;, \u0026quot;Ad3\u0026quot; = \u0026quot;#e57400\u0026quot;, \u0026quot;Ad4\u0026quot; = \u0026quot;#0000FF\u0026quot;, \u0026quot;Ad5\u0026quot; = \u0026quot;#dfdf0d\u0026quot;)) plotMonocle(cds, c('Ppara', 'Prdm16', 'Ppargc1a', 'Srebf1', 'Cebpa', 'Egr1', 'Foxn3', 'Esrra', 'Gtf2ird1'))  Figure 4 ## Loading R packages library(circlize) library(ComplexHeatmap) library(dplyr) library(fgsea) library(ggplot2) library(ggrepel) library(Nebulosa) library(RColorBrewer) library(Seurat) library(SeuratWrappers) ################################# ########### Figure 4A ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) data$clusters \u0026lt;- new_cluster Idents(data) \u0026lt;- as.factor(data$timpoint) data \u0026lt;- subset(data, cells = names(which(data$timpoint == '4day' | data$timpoint == 'RT' | data$timpoint == 'CL'))) Idents(data) \u0026lt;- data$clusters data$UCP1 \u0026lt;- factor(ifelse(data@assays$SCT@data[\u0026quot;Ucp1\u0026quot;, ] \u0026gt; 0, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;)) cols = c(\u0026quot;#11c78b\u0026quot;, \u0026quot;#800080\u0026quot;, \u0026quot;#e57400\u0026quot;, \u0026quot;#0000FF\u0026quot;, \u0026quot;#dfdf0d\u0026quot;) cid \u0026lt;- as.numeric(1:length(unique(data$clusters)))[data$clusters] dic_cid \u0026lt;- data.frame(grp = levels(data$clusters)) dims \u0026lt;- data.frame(sample_id = rownames(Embeddings(data, 'tsne')), cluster_id = data$clusters, x = Embeddings(data, 'tsne')[,1], y = Embeddings(data, 'tsne')[,2]) ggplot() + geom_point(data = dims, aes(x = x, y = y, color = factor(cluster_id)), size = 1) + scale_color_manual(values = rep(\u0026quot;#F5F5F5\u0026quot;, length(cols))) + guides(color = guide_legend(override.aes = list(size = 7))) + labs(color = '', x = 't-SNE1', y = 't-SNE2') + theme_classic() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \u0026quot;none\u0026quot;, plot.title = element_text(hjust = 0.5, size = 8)) + annotate(\u0026quot;point\u0026quot;, dims[[\u0026quot;x\u0026quot;]][which(dims[[\u0026quot;cluster_id\u0026quot;]] == 'Ad1')], dims[[\u0026quot;y\u0026quot;]][which(dims[[\u0026quot;cluster_id\u0026quot;]] == 'Ad1')], colour = cols[1], size = 1) + annotate(\u0026quot;point\u0026quot;, dims[[\u0026quot;x\u0026quot;]][which(dims[[\u0026quot;cluster_id\u0026quot;]] == 'Ad2')], dims[[\u0026quot;y\u0026quot;]][which(dims[[\u0026quot;cluster_id\u0026quot;]] == 'Ad2')], colour = cols[2], size = 1) + annotate(\u0026quot;point\u0026quot;, dims[[\u0026quot;x\u0026quot;]][which(dims[[\u0026quot;cluster_id\u0026quot;]] == 'Ad5')], dims[[\u0026quot;y\u0026quot;]][which(dims[[\u0026quot;cluster_id\u0026quot;]] == 'Ad5')], colour = cols[5], size = 1) + annotate(\u0026quot;point\u0026quot;, dims[names(data$UCP1[which(data$UCP1 == 'High')]), 3], dims[names(data$UCP1[which(data$UCP1 == 'High')]), 4], colour = 'red', size = 1.5) ## pieplot UCP1 High data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) Idents(data) \u0026lt;- as.factor(data$timpoint) data \u0026lt;- subset(data, cells = names(which(data$timpoint == '4day' | data$timpoint == 'RT' | data$timpoint == 'CL'))) Idents(data) \u0026lt;- data$cluster data \u0026lt;- subset(data, idents = list('Ad1', 'Ad2', 'Ad5')) data$gene \u0026lt;- factor(ifelse(data@assays$SCT@data['Ucp1', ] \u0026gt; 0, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;)) df \u0026lt;- data.frame( class = c(\u0026quot;Ad1\u0026quot;, \u0026quot;Ad2\u0026quot;, 'Ad5'), n = c(sum(Idents(data) == 'Ad1'), sum(Idents(data) == 'Ad2'), sum(Idents(data) == 'Ad5')), value = c(round((length(names(data$cluster[data$cluster == 'Ad1'])[names(data$cluster[data$cluster == 'Ad1']) %in% names(data$gene[which(data$gene == 'High')])])/sum(Idents(data) == 'Ad1'))*100, 2), round((length(names(data$cluster[data$cluster == 'Ad2'])[names(data$cluster[data$cluster == 'Ad2']) %in% names(data$gene[which(data$gene == 'High')])])/sum(Idents(data) == 'Ad2'))*100, 2), round((length(names(data$cluster[data$cluster == 'Ad5'])[names(data$cluster[data$cluster == 'Ad5']) %in% names(data$gene[which(data$gene == 'High')])])/sum(Idents(data) == 'Ad5'))*100, 2))) df$class \u0026lt;- factor(df$class, levels = c(\u0026quot;Ad1\u0026quot;, \u0026quot;Ad2\u0026quot;, \u0026quot;Ad5\u0026quot;)) df \u0026lt;- df %\u0026gt;% arrange(desc(class)) %\u0026gt;% mutate(text_y = cumsum(value) - value/2) df$pos = (cumsum(c(0, df$value)) + c(df$value / 2, .01))[1:nrow(df)] ggplot(df, aes(x = \u0026quot;\u0026quot;, y = value, fill = class)) + geom_bar(width = 1, stat = \u0026quot;identity\u0026quot;, color = \u0026quot;white\u0026quot;) + coord_polar(\u0026quot;y\u0026quot;, start = 0)+ scale_fill_manual(values = c(\u0026quot;#11c78b\u0026quot;, \u0026quot;#800080\u0026quot;, \u0026quot;#dfdf0d\u0026quot;)) + theme_void() + labs(fill = \u0026quot;Clusters\u0026quot;) + geom_text_repel(aes(x = 1.5, y = pos, label = paste0(value, \u0026quot;%\u0026quot;)), nudge_x = .1, segment.size = .7, show.legend = FALSE) + ggtitle('Ucp1') ################################# ########### Figure 4B ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) data \u0026lt;- subset(data, idents = list('Ad1')) data \u0026lt;- ScaleData(data, features = rownames(data)) data$UCP1 \u0026lt;- factor(ifelse(data@assays$SCT@data[\u0026quot;Ucp1\u0026quot;, ] \u0026gt; 0, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;)) Idents(data) \u0026lt;- data$UCP1 markers \u0026lt;- FindAllMarkers(data, logfc.threshold = 0, only.pos = FALSE) markers \u0026lt;- subset(markers, p_val_adj \u0026lt; 0.05 \u0026amp; cluster == 'High') markers \u0026lt;- markers[order(markers$avg_logFC, decreasing = TRUE), ] genes1 \u0026lt;- c(head(markers$gene, 10), tail(markers$gene, 10)) mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) DoHeatmap(data, features = genes1, angle = 0, size = 5, label = FALSE) + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'UCP1 Expression') ################################# ########### Figure 4C ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) data \u0026lt;- subset(data, idents = list('Ad1')) data \u0026lt;- ScaleData(data, features = rownames(data)) data$UCP1 \u0026lt;- factor(ifelse(data@assays$SCT@data[\u0026quot;Ucp1\u0026quot;, ] \u0026gt; 0, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;)) Idents(data) \u0026lt;- data$UCP1 markers \u0026lt;- FindAllMarkers(data, logfc.threshold = 0, only.pos = FALSE) markers \u0026lt;- subset(markers, p_val_adj \u0026lt; 0.05 \u0026amp; cluster == 'High') markers \u0026lt;- markers[order(markers$avg_logFC, decreasing = TRUE), ] ort \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/Orthologs_human_mouse.txt\u0026quot;, sep = \u0026quot;,\u0026quot;, header = TRUE) pathways \u0026lt;- gmtPathways('/Users/biagi/PhD/Adipocyte/msigdb.v7.1.symbols.gmt') comp1 \u0026lt;- rbind(head(markers, 50), tail(markers, 35)) comp1 \u0026lt;- merge(ort, comp1, by.x = \u0026quot;Mouse.gene.name\u0026quot;, by.y = \u0026quot;gene\u0026quot;) comp1$Mouse.gene.name \u0026lt;- comp1$Gene.stable.ID \u0026lt;- comp1$Mouse.gene.stable.ID \u0026lt;- NULL colnames(comp1)[1] \u0026lt;- \u0026quot;Gene\u0026quot; ranks \u0026lt;- structure(comp1$avg_logFC, names = comp1$Gene) ranks \u0026lt;- sort(ranks) fgseaRes1 \u0026lt;- fgsea(pathways, ranks, minSize = 5) fgseaRes1 \u0026lt;- subset(fgseaRes1, pval \u0026lt; 0.05) fgseaRes1 \u0026lt;- fgseaRes1[order(fgseaRes1$NES, decreasing = TRUE), ] genes1 \u0026lt;- fgseaRes1$leadingEdge for (i in 1:length(genes1)) { fgseaRes1$genes[i] \u0026lt;- paste(genes1[[i]], collapse = ';') } fgseaRes1$leadingEdge \u0026lt;- NULL pathways \u0026lt;- c('GO_POSITIVE_REGULATION_OF_COLD_INDUCED_THERMOGENESIS', 'GO_CELLULAR_CARBOHYDRATE_METABOLIC_PROCESS', 'GO_RESPONSE_TO_EXTRACELLULAR_STIMULUS', 'GO_MITOCHONDRION', 'GO_LIPID_OXIDATION', 'GO_CELLULAR_KETONE_METABOLIC_PROCESS', 'GO_INTRINSIC_COMPONENT_OF_PLASMA_MEMBRANE', 'GO_PROTEIN_HOMODIMERIZATION_ACTIVITY', 'GO_RESPONSE_TO_CYTOKINE', 'GO_REGULATION_OF_KINASE_ACTIVITY', 'RUAN_RESPONSE_TO_TROGLITAZONE_UP', 'GERHOLD_ADIPOGENESIS_UP') fgseaRes1 \u0026lt;- fgseaRes1[which(fgseaRes1$pathway %in% pathways), ] fgseaRes1$class \u0026lt;- ifelse(fgseaRes1$NES \u0026gt; 0, 'Up-regulated', 'Down-regulated') fgseaRes1 \u0026lt;- fgseaRes1[order(fgseaRes1$class, fgseaRes1$NES), ] fgseaRes1$order \u0026lt;- seq_len(nrow(fgseaRes1)) ggplot(fgseaRes1, aes(order, NES, fill = class)) + geom_bar(stat = \u0026quot;identity\u0026quot;, show.legend = TRUE) + xlab(NULL) + ylab(\u0026quot;Normalized Enrichment Score (NES)\u0026quot;) + theme_bw() + coord_flip() + theme(legend.position = \u0026quot;right\u0026quot;, legend.title = element_text(size = 10), plot.title = element_text(hjust = 0.5)) + scale_fill_discrete(name = \u0026quot;Enrichment\u0026quot;) + scale_x_continuous(breaks = fgseaRes1$order, labels = fgseaRes1$pathway, expand = c(0, 0)) + ggtitle('GSEA for UCP1 High/Low for AD1 cluster') ################################# ########### Figure 4D ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) data \u0026lt;- subset(data, idents = list('Ad1')) tmp1 \u0026lt;- factor(ifelse(data@assays$SCT@data[\u0026quot;Ucp1\u0026quot;, ] \u0026gt; 0, \u0026quot;Ad1_High\u0026quot;, \u0026quot;Ad1_Low\u0026quot;)) data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) data \u0026lt;- subset(data, idents = list('Ad1')) tmp2 \u0026lt;- as.character(Idents(data)) tmp3 \u0026lt;- names(Idents(data)) tmp2[which(tmp3 %in% names(tmp1[tmp1 == 'Ad1_High']))] \u0026lt;- 'Ad1_High' tmp2[which(tmp3 %in% names(tmp1[tmp1 == 'Ad1_Low']))] \u0026lt;- 'Ad1_Low' tmp \u0026lt;- as.factor(structure(tmp2, names = tmp3)) Idents(data) \u0026lt;- tmp data$cluster \u0026lt;- Idents(data) data \u0026lt;- SeuratWrappers::RunALRA(data) data \u0026lt;- ScaleData(data, features = rownames(data)) genes \u0026lt;- c('Acaa2', 'Ehhadh', 'Slc27a2', 'Acadm', 'Scp2', 'Acadvl', 'Hadha', 'Hadhb', 'Acaa1b', 'Abcd3', 'Sdhaf2', 'Pdha1', 'Pdhb', 'Idh3g', 'Mdh1', 'Sdha', 'Ndufs4', 'Sdhc', 'Suclg1', 'Mdh2', 'Akt1', 'Kiss1r', 'Mif', 'Cpt1b', 'Fabp3', 'Acsl5', 'Mfsd2a', 'Abcc4', 'Acsl3', 'Pla2g12a', 'Aldoa', 'Gpi1', 'Pgk1', 'Gapdh', 'Pfkp', 'Pkm', 'Ogdh', 'Ppara', 'Prkaa1', 'Gale', 'Entpd5', 'Stat3', 'Foxk2', 'Igf1', \u0026quot;Daglb\u0026quot;, \u0026quot;Slc2a4\u0026quot;, \u0026quot;Gpd1\u0026quot;, \u0026quot;Pcx\u0026quot;, \u0026quot;Abhd5\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;Lipe\u0026quot;, \u0026quot;Pck1\u0026quot;, \u0026quot;Pnpla2\u0026quot;, 'Acaca', 'Acly', 'Fasn', 'Srebf1', 'Dgat2', 'Insig1', 'Hadh', 'Elovl6', 'Lpl') genes \u0026lt;- genes[genes %in% rownames(data)] mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) DoHeatmap(data, features = genes, angle = 0, size = 5, label = FALSE) + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Ucp1 Expression') ################################# ########### Figure 4F ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) ort \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/Orthologs_human_mouse.txt\u0026quot;, sep = \u0026quot;,\u0026quot;, header = TRUE) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) data \u0026lt;- subset(data, idents = list('Ad1')) data \u0026lt;- ScaleData(data, features = rownames(data)) data$UCP1 \u0026lt;- factor(ifelse(data@assays$SCT@data[\u0026quot;Ucp1\u0026quot;, ] \u0026gt; 0, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;)) Idents(data) \u0026lt;- data$UCP1 genes_High \u0026lt;- c('PPARD', 'HNF4A', 'ESR1', 'PPARG', 'SALL4', 'CEBPD', 'EGR1', 'NANOG', 'STAT3', 'BHLHE40') genes_High \u0026lt;- ort$Mouse.gene.name[which(ort$Gene.name %in% genes_High)] genes_High \u0026lt;- genes_High[genes_High %in% rownames(data)] tabHigh \u0026lt;- as.matrix(data@assays$SCT@data[genes_High, names(data$UCP1)[which(data$UCP1 == 'High')]]) tabLow \u0026lt;- as.matrix(data@assays$SCT@data[genes_High, names(data$UCP1)[which(data$UCP1 == 'Low')]]) df \u0026lt;- data.frame(High = rowSums(tabHigh), Low = rowSums(tabLow)) df \u0026lt;- t(df) x \u0026lt;- as.matrix(df) m = apply(x, 1, mean, na.rm = TRUE) s = apply(x, 1, sd, na.rm = TRUE) res \u0026lt;- (x - m)/s cn = colnames(res) ba \u0026lt;- HeatmapAnnotation( text = anno_text(cn, rot = 0, location = unit(0.9, \u0026quot;npc\u0026quot;), just = \u0026quot;centre\u0026quot;, gp = gpar(fontsize = 8)), annotation_height = max_text_width(cn) ) breaks \u0026lt;- seq(-2,2, by= 0.1) Heatmap(as.matrix(res), bottom_annotation = ba, name = \u0026quot;zscore\u0026quot;, column_title = \u0026quot;Ad1 UCP1 High\u0026quot;, width = 1, show_row_names = TRUE, show_column_names = FALSE, cluster_rows = FALSE, cluster_columns = TRUE, col = colorRamp2(breaks, colorRampPalette(rev(brewer.pal(n = 10, name = \u0026quot;RdBu\u0026quot;)))(41)), heatmap_height = unit(6, \u0026quot;cm\u0026quot;), row_names_gp = gpar(fontsize = 8)) genes_Low \u0026lt;- c('PPARG', 'SALL4', 'ESR1', 'TP63', 'AR', 'GATA2') genes_Low \u0026lt;- ort$Mouse.gene.name[which(ort$Gene.name %in% genes_Low)] genes_Low \u0026lt;- genes_Low[genes_Low %in% rownames(data)] tabHigh \u0026lt;- as.matrix(data@assays$SCT@data[genes_Low, names(data$UCP1)[which(data$UCP1 == 'High')]]) tabLow \u0026lt;- as.matrix(data@assays$SCT@data[genes_Low, names(data$UCP1)[which(data$UCP1 == 'Low')]]) df \u0026lt;- data.frame(High = rowSums(tabHigh), Low = rowSums(tabLow)) df \u0026lt;- t(df) x \u0026lt;- as.matrix(df) m = apply(x, 1, mean, na.rm = TRUE) s = apply(x, 1, sd, na.rm = TRUE) res \u0026lt;- (x - m)/s cn = colnames(res) ba \u0026lt;- HeatmapAnnotation( text = anno_text(cn, rot = 0, location = unit(0.9, \u0026quot;npc\u0026quot;), just = \u0026quot;centre\u0026quot;, gp = gpar(fontsize = 8)), annotation_height = max_text_width(cn) ) breaks \u0026lt;- seq(-2,2, by= 0.1) Heatmap(as.matrix(res), bottom_annotation = ba, name = \u0026quot;zscore\u0026quot;, column_title = \u0026quot;Ad1 UCP1 Low\u0026quot;, width = 1, show_row_names = TRUE, show_column_names = FALSE, cluster_rows = FALSE, cluster_columns = TRUE, col = colorRamp2(breaks, colorRampPalette(rev(brewer.pal(n = 10, name = \u0026quot;RdBu\u0026quot;)))(41)), heatmap_height = unit(6, \u0026quot;cm\u0026quot;), row_names_gp = gpar(fontsize = 8)) ################################# ########### Figure 4G ########### ################################# data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) data$clusters \u0026lt;- new_cluster Idents(data) \u0026lt;- as.factor(data$timpoint) data \u0026lt;- subset(data, cells = names(which(data$timpoint == '4day' | data$timpoint == 'RT' | data$timpoint == 'CL'))) pt \u0026lt;- plot_density(data, c('Slc36a2', 'Acadm', 'Slc27a1', 'Fasn'), reduction = \u0026quot;tsne\u0026quot;, pal = \u0026quot;inferno\u0026quot;, combine = FALSE) pt \u0026lt;- lapply(pt, function(x){ x + theme_bw() + theme(panel.background = element_rect(colour = \u0026quot;black\u0026quot;, size = 0.1), axis.ticks.length = unit(.2, \u0026quot;cm\u0026quot;), axis.text = element_text(size = 11), panel.grid.major = element_blank(), panel.grid.minor = element_blank())}) ggarrange(plotlist = pt)  ","date":1602201600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602201600,"objectID":"5de4f18a97d03567ddc280e0d96b8ad9","permalink":"https://cbiagii.github.io/AdipoSNAP/post/10_main_figures/","publishdate":"2020-10-09T00:00:00Z","relpermalink":"/AdipoSNAP/post/10_main_figures/","section":"post","summary":"Figure 1 ## Loading R packages library(dplyr) library(enrichR) library(ggplot2) library(ggpubr) library(ggtext) library(glue) library(metacell) library(Nebulosa) library(RColorBrewer) library(Seurat) ################################# ########### Figure 1B ########### ################################# marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_1\u0026quot;, \u0026quot;Acsl1\u0026quot;, \u0026quot;#0000b3\u0026quot;, 1, 2.","tags":null,"title":"10 - Main Figures","type":"post"},{"authors":null,"categories":null,"content":"Figure S1 ## Loading R packages library(dplyr) library(enrichR) library(ggplot2) library(ggpubr) library(metacell) library(pheatmap) library(Seurat) ################################## ########### Figure S1A ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/10x_Processed.rds\u0026quot;) Idents(data) \u0026lt;- factor(data$CellTypeRefined) TSNEPlot(data, label = FALSE, pt.size = 0.3) + xlab(\u0026quot;t-SNE 1\u0026quot;) + ylab(\u0026quot;t-SNE 2\u0026quot;) + theme_classic() + labs(color = \u0026quot;Cluster\u0026quot;) + theme(legend.position = \u0026quot;bottom\u0026quot;) ################################## ########### Figure S1B ########### ################################## load(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell/db/mc.test_mc_f.Rda\u0026quot;) lfp \u0026lt;- log2(object@mc_fp) marks_colors \u0026lt;- NULL marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_1\u0026quot;, \u0026quot;Acsl1\u0026quot;, \u0026quot;#0000b3\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_2\u0026quot;, \u0026quot;Plin4\u0026quot;, \u0026quot;#0000cc\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_3\u0026quot;, \u0026quot;Mlxipl\u0026quot;, \u0026quot;#0000e6\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_4\u0026quot;, \u0026quot;Pck1\u0026quot;, \u0026quot;#0000ff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Adipocyte_5\u0026quot;, \u0026quot;Adrb3\u0026quot;, \u0026quot;#1a1aff\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_1\u0026quot;, \u0026quot;Btnl9\u0026quot;, \u0026quot;#00cd00\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_2\u0026quot;, \u0026quot;Flt1\u0026quot;, \u0026quot;#00b300\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_3\u0026quot;, \u0026quot;Kdr\u0026quot;, \u0026quot;#009a00\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_4\u0026quot;, \u0026quot;Cdh13\u0026quot;, \u0026quot;#008000\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Endothelial_5\u0026quot;, \u0026quot;Cyyr1\u0026quot;, \u0026quot;#006700\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_1\u0026quot;, \u0026quot;Zeb2\u0026quot;, \u0026quot;#ff7f7f\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_2\u0026quot;, \u0026quot;Trps1\u0026quot;, \u0026quot;#ff6666\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_3\u0026quot;, \u0026quot;Runx1\u0026quot;, \u0026quot;#ff4c4c\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_4\u0026quot;, \u0026quot;Ptprc\u0026quot;, \u0026quot;#ff3232\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Immune_5\u0026quot;, \u0026quot;Adap2\u0026quot;, \u0026quot;#ff1919\u0026quot;, 1, 1)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_1\u0026quot;, \u0026quot;Dcn\u0026quot;, \u0026quot;#ffff4d\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_2\u0026quot;, \u0026quot;Celf2\u0026quot;, \u0026quot;#ffff33\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_3\u0026quot;, \u0026quot;Meg3\u0026quot;, \u0026quot;#ffff1a\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_4\u0026quot;, \u0026quot;Col1a2\u0026quot;, \u0026quot;#ffff00\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- rbind(marks_colors, c(\u0026quot;Progenitor_5\u0026quot;, \u0026quot;Col3a1\u0026quot;, \u0026quot;#e6e600\u0026quot;, 1, 2.5)) marks_colors \u0026lt;- as.data.frame(marks_colors) colnames(marks_colors) \u0026lt;- c(\u0026quot;group\u0026quot;, \u0026quot;gene\u0026quot;, \u0026quot;color\u0026quot;, \u0026quot;priority\u0026quot;, \u0026quot;T_fold\u0026quot;) marks_colors$priority \u0026lt;- as.integer(marks_colors$priority) marks_colors$T_fold \u0026lt;- as.numeric(marks_colors$T_fold) load(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell/db/mc2d.test_2dproj.Rda\u0026quot;) dims \u0026lt;- data.frame(x = object@sc_x, y = object@sc_y) load(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell/db/mc.test_mc_f.Rda\u0026quot;) tmp1 \u0026lt;- data.frame(cells = names(object@mc), cols = object@mc) tmp2 \u0026lt;- data.frame(cols = object@colors) teste \u0026lt;- merge(tmp1, tmp2, by.x = \u0026quot;cols\u0026quot;, by.y = \u0026quot;row.names\u0026quot;) teste$cols \u0026lt;- NULL teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Adipocyte\u0026quot;, marks_colors$group)], \u0026quot;Adipocytes\u0026quot;, \u0026quot;Unknown\u0026quot;) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Progenitor\u0026quot;, marks_colors$group)], \u0026quot;Progenitors\u0026quot;, teste$cellType) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Immune\u0026quot;, marks_colors$group)], \u0026quot;Immunes\u0026quot;, teste$cellType) teste$cellType \u0026lt;- ifelse(teste$cols.y %in% marks_colors$color[grep(\u0026quot;Endothelial\u0026quot;, marks_colors$group)], \u0026quot;Endothelials\u0026quot;, teste$cellType) tab \u0026lt;- merge(dims, teste, by.x = \u0026quot;row.names\u0026quot;, by.y = \u0026quot;cells\u0026quot;) data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/10x_Processed.rds\u0026quot;) Idents(data) \u0026lt;- factor(data$CellTypeRefined) infos \u0026lt;- data@meta.data infos \u0026lt;- infos[tab$Row.names, ] final \u0026lt;- merge(infos, tab, by.x = \u0026quot;row.names\u0026quot;, by.y = \u0026quot;Row.names\u0026quot;) A \u0026lt;- subset(final, cellType == \u0026quot;Adipocytes\u0026quot;) E \u0026lt;- subset(final, cellType == \u0026quot;Endothelials\u0026quot;) I \u0026lt;- subset(final, cellType == \u0026quot;Immunes\u0026quot;) P \u0026lt;- subset(final, cellType == \u0026quot;Progenitors\u0026quot;) new.cluster.ids \u0026lt;- c(\u0026quot;PG\u0026quot;, \u0026quot;PG\u0026quot;, \u0026quot;PG\u0026quot;, \u0026quot;EN\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;PG\u0026quot;, \u0026quot;PG\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;AD\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;EN\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;EN\u0026quot;, \u0026quot;EN\u0026quot;, \u0026quot;PG\u0026quot;) names(new.cluster.ids) \u0026lt;- levels(data) data \u0026lt;- RenameIdents(data, new.cluster.ids) Idents(data) \u0026lt;- factor(Idents(data), levels = c(\u0026quot;AD\u0026quot;, \u0026quot;EN\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;PG\u0026quot;)) cls \u0026lt;- c(\u0026quot;#FFA500\u0026quot;, \u0026quot;#329932\u0026quot;, \u0026quot;#ff9999\u0026quot;, \u0026quot;#6666ff\u0026quot;) TSNEPlot(data, label = FALSE, pt.size = 0.3, cols = cls) + xlab(\u0026quot;t-SNE 1\u0026quot;) + ylab(\u0026quot;t-SNE 2\u0026quot;) + theme_classic() + labs(color = \u0026quot;Cluster\u0026quot;) + theme(legend.position = \u0026quot;bottom\u0026quot;) a \u0026lt;- round((sum(Idents(data) == \u0026quot;AD\u0026quot;)/ncol(data))*100, 2); a1 \u0026lt;- sum(Idents(data) == \u0026quot;AD\u0026quot;) b \u0026lt;- round((sum(Idents(data) == \u0026quot;EN\u0026quot;)/ncol(data))*100, 2); b1 \u0026lt;- sum(Idents(data) == \u0026quot;EN\u0026quot;) c \u0026lt;- round((sum(Idents(data) == \u0026quot;IM\u0026quot;)/ncol(data))*100, 2); c1 \u0026lt;- sum(Idents(data) == \u0026quot;IM\u0026quot;) d \u0026lt;- round((sum(Idents(data) == \u0026quot;PG\u0026quot;)/ncol(data))*100, 2); d1 \u0026lt;- sum(Idents(data) == \u0026quot;PG\u0026quot;) df \u0026lt;- data.frame( class = c(\u0026quot;AD\u0026quot;, \u0026quot;EN\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;PG\u0026quot;), n = c(a1, b1, c1, d1), value = c(a, b, c, d) ) df$class \u0026lt;- factor(df$class, levels = c(\u0026quot;AD\u0026quot;, \u0026quot;EN\u0026quot;, \u0026quot;IM\u0026quot;, \u0026quot;PG\u0026quot;)) df \u0026lt;- df %\u0026gt;% arrange(desc(class)) %\u0026gt;% mutate(lab.ypos = cumsum(value) - 0.5*value) ggplot(df, aes(x = \u0026quot;\u0026quot;, y = value, fill = class)) + geom_bar(width = 1, stat = \u0026quot;identity\u0026quot;, color = \u0026quot;white\u0026quot;) + coord_polar(\u0026quot;y\u0026quot;, start = 0)+ geom_text(aes(y = lab.ypos, label = paste0(value, \u0026quot;%\u0026quot;)), color = \u0026quot;white\u0026quot;, fontface = \u0026quot;bold\u0026quot;)+ scale_fill_manual(values = c(\u0026quot;#FFA500\u0026quot;, \u0026quot;#329932\u0026quot;, \u0026quot;#ff9999\u0026quot;, \u0026quot;#6666ff\u0026quot;)) + theme_void() ################################## ########### Figure S1C ########### ################################## import warnings warnings.filterwarnings(\u0026quot;ignore\u0026quot;) from SCCAF import * ad = sc.read(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/Adipocytes/results.h5ad\u0026quot;) y_prob, y_pred, y_test, clf, cvsm, acc = SCCAF_assessment(ad.X, ad.obs['L1_result'], n_jobs = 8) aucs = plot_roc(y_prob, y_test, clf, cvsm = cvsm, acc = acc) ################################## ########### Figure S1D ########### ################################## filelist \u0026lt;- list.files(path = \u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/Adipocytes\u0026quot;, pattern = \u0026quot;sccaf_assess\u0026quot;, recursive = TRUE, full.names = TRUE) fnames \u0026lt;- gsub(\u0026quot;sccaf_assess_\u0026quot;, \u0026quot;\u0026quot;, basename(filelist)) fnames \u0026lt;- gsub(\u0026quot;.txt\u0026quot;, \u0026quot;\u0026quot;, fnames) datalist \u0026lt;- lapply(filelist, function(x)read.csv(x)) names(datalist) \u0026lt;- fnames datafr \u0026lt;- do.call(\u0026quot;rbind\u0026quot;, datalist) ggplot(datafr, aes(x = Round, y = Accuracy, fill = Type)) + geom_violin( trim = FALSE, position = position_dodge(0.9) ) + scale_fill_manual(values = c(\u0026quot;#d20c0c\u0026quot;, \u0026quot;#1111C9\u0026quot;)) + geom_boxplot( width = 0.05, position = position_dodge(0.9), colour = \u0026quot;white\u0026quot;, outlier.colour = NA, show.legend = FALSE ) + xlab(\u0026quot;\u0026quot;) + ggtitle(\u0026quot;Test and cross validation accurancies per SCCAF round.\u0026quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 45, hjust = 1), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = \u0026quot;black\u0026quot;), panel.border = element_rect(colour = \u0026quot;black\u0026quot;, fill = NA, size = 0.5), plot.title = element_text(hjust = 0.5), legend.position = c(0.9, 0.15), legend.title = element_blank()) ################################## ########### Figure S1E ########### ################################## scdb_init(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell_SCT2/db\u0026quot;, force_reinit = TRUE) scfigs_init(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell_SCT2/figs\u0026quot;) load(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/metacell_SCT2/db/mc.test_mc_f.Rda\u0026quot;) lfp \u0026lt;- log2(object@mc_fp) mc \u0026lt;- scdb_mc(\u0026quot;test_mc_f\u0026quot;) gset \u0026lt;- scdb_gset(\u0026quot;test_markers\u0026quot;) gene_folds \u0026lt;- mc@mc_fp good_marks \u0026lt;- intersect(names(gset@gene_set), rownames(mc@mc_fp)) mc_ord \u0026lt;- 1:ncol(mc@mc_fp) mat \u0026lt;- log2(gene_folds[good_marks, mc_ord]) mat \u0026lt;- pmax(pmin(mat, 3), -3) mat_A \u0026lt;- mat[, which(mc@colors == \u0026quot;blue\u0026quot;)] mat_A \u0026lt;- mat_A[rowSums(mat_A) \u0026gt; quantile(rowSums(mat_A), 0.9), ] mat_E \u0026lt;- mat[, which(mc@colors == \u0026quot;green\u0026quot;)] mat_E \u0026lt;- mat_E[rowSums(mat_E) \u0026gt; quantile(rowSums(mat_E), 0.9), ] mat_I \u0026lt;- mat[, which(mc@colors %in% c(\u0026quot;#ff748c\u0026quot;, \u0026quot;#ff8fa3\u0026quot;))] mat_I \u0026lt;- mat_I[rowSums(mat_I) \u0026gt; quantile(rowSums(mat_I), 0.9), ] mat_P \u0026lt;- mat[, which(mc@colors %in% c(\u0026quot;#ffa500\u0026quot;, \u0026quot;#ffb732\u0026quot;))] mat_P \u0026lt;- mat_P[rowSums(mat_P) \u0026gt; quantile(rowSums(mat_P), 0.9), ] pheatmap(mat_A, fontsize = 8, main = 'Adipocytes', legend = TRUE, treeheight_row = 0, treeheight_col = 0) pheatmap(mat_E, fontsize = 8, main = 'Endothelials', legend = TRUE, treeheight_row = 0, treeheight_col = 0) pheatmap(mat_I, fontsize = 8, main = 'Immunes', legend = TRUE, treeheight_row = 0, treeheight_col = 0) pheatmap(mat_P, fontsize = 8, main = 'Progenitors', legend = TRUE, treeheight_row = 0, treeheight_col = 0) ################################## ########### Figure S1F ########### ################################## dbs \u0026lt;- c(\u0026quot;KEGG_2019_Mouse\u0026quot;, \u0026quot;WikiPathways_2019_Mouse\u0026quot;, \u0026quot;Jensen_TISSUES\u0026quot;, \u0026quot;GO_Biological_Process_2018\u0026quot;) genes_A \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig1D_2_Markers_A.txt\u0026quot;) genes_E \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig1D_2_Markers_E.txt\u0026quot;) genes_I \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig1D_2_Markers_I.txt\u0026quot;) genes_P \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig1D_2_Markers_P.txt\u0026quot;) genes \u0026lt;- list(Adipocyte = genes_A, Endothelial = genes_E, Immune = genes_I, Progenitor = genes_P) results \u0026lt;- lapply(genes, enrichr, dbs) plotlist \u0026lt;- list() pathlist \u0026lt;- NULL tmplist \u0026lt;- NULL paths \u0026lt;- NULL for (i in 1:length(dbs)) { tmp \u0026lt;- lapply(results, `[[`, i) tmp \u0026lt;- mapply(cbind, tmp, \u0026quot;type\u0026quot; = names(tmp), SIMPLIFY = FALSE) tmp \u0026lt;- do.call(\u0026quot;rbind\u0026quot;, tmp) tmp \u0026lt;- subset(tmp, Adjusted.P.value \u0026lt; 0.05) tmp$Adjusted.P.value \u0026lt;- -log10(tmp$Adjusted.P.value) tmp$Combined.Score \u0026lt;- log2(tmp$Combined.Score) tmplist \u0026lt;- rbind(tmplist, data.frame(tmp, class = dbs[i])) tmp \u0026lt;- tmp %\u0026gt;% group_by(type) %\u0026gt;% top_n(n = 5, wt = Combined.Score) tmp$Term \u0026lt;- factor(tmp$Term, levels = rev(unique(tmp$Term))) pathlist \u0026lt;- rbind(pathlist, data.frame(tmp %\u0026gt;% group_by(type) %\u0026gt;% top_n(n = 2, wt = Combined.Score), class = dbs[i])) paths \u0026lt;- rbind(paths, data.frame(tmp, class = dbs[i])) plotlist[[i]] \u0026lt;- ggplot(tmp, aes(x = type, y = Term)) + geom_point(aes(size = Adjusted.P.value, color = Combined.Score)) + theme_bw(base_size = 9) + theme(plot.title = element_text(hjust = 0.5), axis.text = element_text(size = 12)) + scale_colour_gradient(limits = c(0, max(tmp$Combined.Score) + 0.5), high = \u0026quot;#2b9348\u0026quot;, low = \u0026quot;#eeef20\u0026quot;) + xlab(NULL) + ylab(NULL) + ggtitle(dbs[i]) + labs(color = \u0026quot;Combined Score\u0026quot;, size = \u0026quot;-log10(padj)\u0026quot;) } tmplist \u0026lt;- tmplist %\u0026gt;% group_by(type) %\u0026gt;% arrange(desc(Combined.Score), .by_group = TRUE) ggarrange(plotlist = plotlist)  Figure S2 ## Loading R packages library(dplyr) library(enrichR) library(ggplot2) library(ggpubr) library(ggrepel) library(Seurat) source('/Users/biagi/PhD/Adipocyte/2_Functions.R') ################################## ########### Figure S2A ########### ################################## import warnings warnings.filterwarnings(\u0026quot;ignore\u0026quot;) from SCCAF import * ad = sc.read(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results.h5ad\u0026quot;) y_prob, y_pred, y_test, clf, cvsm, acc = SCCAF_assessment(ad.X, ad.obs['L1_result'], n_jobs = 8) aucs = plot_roc(y_prob, y_test, clf, cvsm = cvsm, acc = acc) ################################## ########### Figure S2B ########### ################################## filelist \u0026lt;- list.files(path = \u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly\u0026quot;, pattern = \u0026quot;sccaf_assess\u0026quot;, recursive = TRUE, full.names = TRUE) fnames \u0026lt;- gsub(\u0026quot;sccaf_assess_\u0026quot;, \u0026quot;\u0026quot;, basename(filelist)) fnames \u0026lt;- gsub(\u0026quot;.txt\u0026quot;, \u0026quot;\u0026quot;, fnames) datalist \u0026lt;- lapply(filelist, function(x)read.csv(x)) names(datalist) \u0026lt;- fnames datafr \u0026lt;- do.call(\u0026quot;rbind\u0026quot;, datalist) ggplot(datafr, aes(x = Round, y = Accuracy, fill = Type)) + geom_violin( trim = FALSE, position = position_dodge(0.9) ) + scale_fill_manual(values = c(\u0026quot;#d20c0c\u0026quot;, \u0026quot;#1111C9\u0026quot;)) + geom_boxplot( width = 0.05, position = position_dodge(0.9), colour = \u0026quot;white\u0026quot;, outlier.colour = NA, show.legend = FALSE ) + xlab(\u0026quot;\u0026quot;) + ggtitle(\u0026quot;Test and cross validation accurancies per SCCAF round.\u0026quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 45, hjust = 1), panel.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = \u0026quot;black\u0026quot;), panel.border = element_rect(colour = \u0026quot;black\u0026quot;, fill = NA, size = 0.5), plot.title = element_text(hjust = 0.5), legend.position = c(0.9, 0.15), legend.title = element_blank()) ################################## ########### Figure S2C ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster pt \u0026lt;- VlnPlot(data, c('Adipoq', 'Adrb3', 'Cidec', 'Dgat1', 'Fasn', 'Lipe', 'Pck1', 'Plin1', 'Pnpla2', 'Retn'), cols = c(\u0026quot;#11c78b\u0026quot;, \u0026quot;#800080\u0026quot;, \u0026quot;#e57400\u0026quot;, \u0026quot;#0000FF\u0026quot;, \u0026quot;#dfdf0d\u0026quot;), assay = \u0026quot;RNA\u0026quot;, combine = FALSE) pt \u0026lt;- lapply(pt, function(x) { x + theme_bw(base_size = 9) + xlab(NULL) + ylab(NULL) + theme(plot.title = element_text(hjust = 0.5)) }) figure \u0026lt;- ggarrange(plotlist = pt, nrow = 2, ncol = 5, common.legend = TRUE, legend = \u0026quot;bottom\u0026quot;) annotate_figure(figure, left = text_grob(\u0026quot;Expression Level\u0026quot;, rot = 90)) ################################## ########### Figure S2D ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster markers \u0026lt;- FindAllMarkers(data, logfc.threshold = 0, only.pos = FALSE) markers_1 \u0026lt;- subset(markers, cluster == \u0026quot;Ad1\u0026quot;) mks_1 \u0026lt;- subset(markers_1, p_val_adj \u0026lt; 0.01) mks_1 \u0026lt;- mks_1[order(mks_1$p_val_adj), ] upGenes \u0026lt;- head(subset(mks_1, avg_logFC \u0026gt; 0)$gene, 50) downGenes \u0026lt;- head(subset(mks_1, avg_logFC \u0026lt; 0)$gene, 50) pt_1 \u0026lt;- volcano.plot(res = markers_1, upGenes = upGenes, downGenes = downGenes) + ggtitle(\u0026quot;Ad1\u0026quot;) + theme(plot.title = element_text(hjust = 0.5)) markers_2 \u0026lt;- subset(markers, cluster == \u0026quot;Ad2\u0026quot;) mks_2 \u0026lt;- subset(markers_2, p_val_adj \u0026lt; 0.01) mks_2 \u0026lt;- mks_2[order(mks_2$p_val_adj), ] upGenes \u0026lt;- head(subset(mks_2, avg_logFC \u0026gt; 0)$gene, 50) downGenes \u0026lt;- head(subset(mks_2, avg_logFC \u0026lt; 0)$gene, 50) pt_2 \u0026lt;- volcano.plot(res = markers_2, upGenes = upGenes, downGenes = downGenes) + ggtitle(\u0026quot;Ad2\u0026quot;) + theme(plot.title = element_text(hjust = 0.5)) markers_3 \u0026lt;- subset(markers, cluster == \u0026quot;Ad3\u0026quot;) mks_3 \u0026lt;- subset(markers_3, p_val_adj \u0026lt; 0.01) mks_3 \u0026lt;- mks_3[order(mks_3$p_val_adj), ] upGenes \u0026lt;- head(subset(mks_3, avg_logFC \u0026gt; 0)$gene, 50) downGenes \u0026lt;- head(subset(mks_3, avg_logFC \u0026lt; 0)$gene, 50) pt_3 \u0026lt;- volcano.plot(res = markers_3, upGenes = upGenes, downGenes = downGenes) + ggtitle(\u0026quot;Ad3\u0026quot;) + theme(plot.title = element_text(hjust = 0.5)) markers_4 \u0026lt;- subset(markers, cluster == \u0026quot;Ad4\u0026quot;) mks_4 \u0026lt;- subset(markers_4, p_val_adj \u0026lt; 0.01) mks_4 \u0026lt;- mks_4[order(mks_4$p_val_adj), ] upGenes \u0026lt;- head(subset(mks_4, avg_logFC \u0026gt; 0)$gene, 50) downGenes \u0026lt;- head(subset(mks_4, avg_logFC \u0026lt; 0)$gene, 50) pt_4 \u0026lt;- volcano.plot(res = markers_4, upGenes = upGenes, downGenes = downGenes) + ggtitle(\u0026quot;Ad4\u0026quot;) + theme(plot.title = element_text(hjust = 0.5)) markers_5 \u0026lt;- subset(markers, cluster == \u0026quot;Ad5\u0026quot;) mks_5 \u0026lt;- subset(markers_5, p_val_adj \u0026lt; 0.01) mks_5 \u0026lt;- mks_5[order(mks_5$p_val_adj), ] upGenes \u0026lt;- head(subset(mks_5, avg_logFC \u0026gt; 0)$gene, 50) downGenes \u0026lt;- head(subset(mks_5, avg_logFC \u0026lt; 0)$gene, 50) pt_5 \u0026lt;- volcano.plot(res = markers_5, upGenes = upGenes, downGenes = downGenes) + ggtitle(\u0026quot;Ad5\u0026quot;) + theme(plot.title = element_text(hjust = 0.5)) ggarrange(pt_1, pt_2, pt_3, pt_4, pt_5, nrow = 2, ncol = 3, common.legend = TRUE) ################################## ########### Figure S2E ########### ################################## dbs \u0026lt;- c(\u0026quot;Jensen_TISSUES\u0026quot;, \u0026quot;Mouse_Gene_Atlas\u0026quot;) genes_1 \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig2C_Markers_1.txt\u0026quot;) genes_2 \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig2C_Markers_2.txt\u0026quot;) genes_3 \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig2C_Markers_3.txt\u0026quot;) genes_4 \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig2C_Markers_4.txt\u0026quot;) genes_5 \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Fig2C_Markers_5.txt\u0026quot;) genes \u0026lt;- list(Ad1 = genes_1, Ad2 = genes_2, Ad3 = genes_3, Ad4 = genes_4, Ad5 = genes_5) results \u0026lt;- lapply(genes, enrichr, dbs) plotlist \u0026lt;- list() pathlist \u0026lt;- NULL tmplist \u0026lt;- NULL paths \u0026lt;- NULL for (i in 1:length(dbs)) { tmp \u0026lt;- lapply(results, `[[`, i) tmp \u0026lt;- mapply(cbind, tmp, \u0026quot;type\u0026quot; = names(tmp), SIMPLIFY = FALSE) tmp \u0026lt;- do.call(\u0026quot;rbind\u0026quot;, tmp) tmp \u0026lt;- subset(tmp, Adjusted.P.value \u0026lt; 0.05) tmp$Adjusted.P.value \u0026lt;- -log10(tmp$Adjusted.P.value) tmp$Combined.Score \u0026lt;- log2(tmp$Combined.Score) tmplist \u0026lt;- rbind(tmplist, data.frame(tmp, class = dbs[i])) if (dbs[i] == \u0026quot;WikiPathways_2019_Mouse\u0026quot; | dbs[i] == \u0026quot;GO_Biological_Process_2018\u0026quot;) { tmp$Term \u0026lt;- gsub(\u0026quot;\\\\s*\\\\([^\\\\)]+\\\\)\u0026quot;,\u0026quot;\u0026quot;,as.character(tmp$Term)) } tmp \u0026lt;- tmp %\u0026gt;% group_by(type) %\u0026gt;% top_n(n = 5, wt = Combined.Score) tmp$Term \u0026lt;- factor(tmp$Term, levels = rev(unique(tmp$Term))) pathlist \u0026lt;- rbind(pathlist, data.frame(tmp %\u0026gt;% group_by(type) %\u0026gt;% top_n(n = 2, wt = Combined.Score), class = dbs[i])) paths \u0026lt;- rbind(paths, data.frame(tmp, class = dbs[i])) plotlist[[i]] \u0026lt;- ggplot(tmp, aes(x = type, y = Term)) + geom_point(aes(size = Adjusted.P.value, color = Combined.Score)) + theme_bw(base_size = 12) + scale_colour_gradient(limits = c(0, max(tmp$Combined.Score) + 0.5), high = \u0026quot;#2b9348\u0026quot;, low = \u0026quot;#eeef20\u0026quot;) + xlab(NULL) + ylab(NULL) + ggtitle(dbs[i]) + labs(color = \u0026quot;Combined Score\u0026quot;, size = \u0026quot;-log10(padj)\u0026quot;) } tmplist \u0026lt;- tmplist %\u0026gt;% group_by(type) %\u0026gt;% arrange(desc(Combined.Score), .by_group = TRUE) ggarrange(plotlist = plotlist) ################################## ########### Figure S2H ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster count_raw \u0026lt;- data@assays$SCT@counts[, rownames(data@meta.data)] count_norm \u0026lt;- apply(count_raw, 2, function(x) (x/sum(x))*10000) ort \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/Orthologs_human_mouse.txt\u0026quot;, sep = \u0026quot;,\u0026quot;, header = TRUE) mat \u0026lt;- merge(ort, count_norm, by.x = \u0026quot;Mouse.gene.name\u0026quot;, by.y = \u0026quot;row.names\u0026quot;) mat$Mouse.gene.name \u0026lt;- mat$Gene.stable.ID \u0026lt;- mat$Mouse.gene.stable.ID \u0026lt;- NULL colnames(mat)[1] \u0026lt;- \u0026quot;Gene\u0026quot; anno \u0026lt;- data.frame(Cell = names(Idents(data)), cluster = Idents(data), row.names = NULL) write.table(mat, \u0026quot;/Users/biagi/PhD/Adipocyte/cellphonedb/counts.txt\u0026quot;, row.names = FALSE, col.names = TRUE, sep = \u0026quot;\\t\u0026quot;, quote = FALSE) write.table(anno, \u0026quot;/Users/biagi/PhD/Adipocyte/cellphonedb/meta.txt\u0026quot;, row.names = FALSE, col.names = TRUE, sep = \u0026quot;\\t\u0026quot;, quote = FALSE) ## Python cd /Users/biagi/PhD/Adipocyte/cellphonedb cellphonedb method statistical_analysis meta.txt counts.txt --threads=16 --counts-data=gene_name --pvalue=0.05 --iterations=1000  Figure S3 ## Loading R packages library(ComplexHeatmap) library(dplyr) library(enrichR) library(ggplot2) library(ggpubr) library(ggtext) library(glue) library(monocle) library(RColorBrewer) library(scales) library(Seurat) library(SeuratWrappers) library(tibble) library(tidyr) library(viridis) source('/Users/biagi/PhD/Adipocyte/2_Functions.R') ################################## ########### Figure S3A ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) data$timpoint \u0026lt;- gsub('4day', 'Cold', data$timpoint) Idents(data) \u0026lt;- as.factor(data$timpoint) markers_ColdxRT \u0026lt;- FindMarkers(data, ident.1 = \u0026quot;Cold\u0026quot;, ident.2 = \u0026quot;RT\u0026quot;, logfc.threshold = 0) markers_ColdxRT$gene \u0026lt;- rownames(markers_ColdxRT) markers_CLxRT \u0026lt;- FindMarkers(data, ident.1 = \u0026quot;CL\u0026quot;, ident.2 = \u0026quot;RT\u0026quot;, logfc.threshold = 0) markers_CLxRT$gene \u0026lt;- rownames(markers_CLxRT) data \u0026lt;- SeuratWrappers::RunALRA(data) data \u0026lt;- ScaleData(data) data2 \u0026lt;- subset(data, idents = c(\u0026quot;Cold\u0026quot;, \u0026quot;RT\u0026quot;, \u0026quot;CL\u0026quot;)) top1 \u0026lt;- markers_ColdxRT %\u0026gt;% top_n(n = 50, wt = avg_logFC) top2 \u0026lt;- markers_CLxRT %\u0026gt;% top_n(n = 50, wt = avg_logFC) topGenes \u0026lt;- rbind(top1, top2) cls \u0026lt;- c(\u0026quot;blue\u0026quot;, \u0026quot;red\u0026quot;, \u0026quot;green\u0026quot;) mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) DoHeatmap(data2, features = topGenes$gene, group.colors = cls, angle = 0, size = 5, label = FALSE) + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Timepoint') ################################## ########### Figure S3B ########### ################################## dbs \u0026lt;- c(\u0026quot;KEGG_2019_Mouse\u0026quot;, \u0026quot;WikiPathways_2019_Mouse\u0026quot;, \u0026quot;Jensen_TISSUES\u0026quot;, \u0026quot;GO_Biological_Process_2018\u0026quot;) genes_ColdxRT \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Diff_Adipocytes_ColdxRT.txt\u0026quot;) genes_CLxRT \u0026lt;- readLines(\u0026quot;/Users/biagi/PhD/Adipocyte/Figures/update/Diff_Adipocytes_CLxRT.txt\u0026quot;) genes \u0026lt;- list(ColdxRT = genes_ColdxRT, CLxRT = genes_CLxRT) results \u0026lt;- lapply(genes, enrichr, dbs) plotlist \u0026lt;- list() pathlist \u0026lt;- NULL tmplist \u0026lt;- NULL paths \u0026lt;- NULL for (i in 1:length(dbs)) { tmp \u0026lt;- lapply(results, `[[`, i) tmp \u0026lt;- mapply(cbind, tmp, \u0026quot;type\u0026quot; = names(tmp), SIMPLIFY = FALSE) tmp \u0026lt;- do.call(\u0026quot;rbind\u0026quot;, tmp) tmp \u0026lt;- subset(tmp, Adjusted.P.value \u0026lt; 0.05) tmp$Adjusted.P.value \u0026lt;- -log10(tmp$Adjusted.P.value) tmp$Combined.Score \u0026lt;- log2(tmp$Combined.Score) tmplist \u0026lt;- rbind(tmplist, data.frame(tmp, class = dbs[i])) if (dbs[i] == \u0026quot;GO_Biological_Process_2018\u0026quot;) { tmp$Term \u0026lt;- gsub(\u0026quot;\\\\s*\\\\([^\\\\)]+\\\\)\u0026quot;,\u0026quot;\u0026quot;,as.character(tmp$Term)) } tmp \u0026lt;- tmp %\u0026gt;% group_by(type) %\u0026gt;% top_n(n = 5, wt = Combined.Score) tmp$Term \u0026lt;- factor(tmp$Term, levels = rev(unique(tmp$Term))) pathlist \u0026lt;- rbind(pathlist, data.frame(tmp %\u0026gt;% group_by(type) %\u0026gt;% top_n(n = 2, wt = Combined.Score), class = dbs[i])) paths \u0026lt;- rbind(paths, data.frame(tmp, class = dbs[i])) plotlist[[i]] \u0026lt;- ggplot(tmp, aes(x = type, y = Term)) + geom_point(aes(size = Adjusted.P.value, color = Combined.Score)) + theme_bw(base_size = 9) + scale_colour_gradient(limits = c(0, max(tmp$Combined.Score) + 0.5), high = \u0026quot;#2b9348\u0026quot;, low = \u0026quot;#eeef20\u0026quot;) + xlab(NULL) + ylab(NULL) + ggtitle(dbs[i]) + labs(color = \u0026quot;Combined Score\u0026quot;, size = \u0026quot;-log10(padj)\u0026quot;) } tmplist \u0026lt;- tmplist %\u0026gt;% group_by(type) %\u0026gt;% arrange(desc(Combined.Score), .by_group = TRUE) paths \u0026lt;- paths[which(paths$Term %in% c(\u0026quot;PPAR signaling pathway\u0026quot;, \u0026quot;Propanoate metabolism\u0026quot;, \u0026quot;Regulation of lipolysis in adipocytes\u0026quot;, \u0026quot;Fatty acid biosynthesis\u0026quot;, \u0026quot;Fatty acid degradation\u0026quot;, \u0026quot;Valine, leucine and isoleucine degradation\u0026quot;, \u0026quot;PPAR signaling pathway WP2316\u0026quot;, \u0026quot;Triacylglyceride Synthesis WP386\u0026quot;, \u0026quot;Subcutaneous adipose tissue\u0026quot;, \u0026quot;3T3-L1 cell\u0026quot;, \u0026quot;Adipocyte\u0026quot;, \u0026quot;long-chain fatty acid transport\u0026quot;, \u0026quot;fatty acid transmembrane transport\u0026quot;, \u0026quot;regulation of sequestering of triglyceride\u0026quot;, \u0026quot;intracellular lipid transport\u0026quot;)), ] paths \u0026lt;- paths %\u0026gt;% mutate( class_with_color = ifelse(class == \u0026quot;KEGG_2019_Mouse\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#0000FF'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), ifelse(class == \u0026quot;WikiPathways_2019_Mouse\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#f28804'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), ifelse(class == \u0026quot;Jensen_TISSUES\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#CC0000'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), ifelse(class == \u0026quot;GO_Biological_Process_2018\u0026quot;, glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#9900CC'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;), glue(\u0026quot;\u0026lt;strong\u0026gt;\u0026lt;span style='color:#18a997'\u0026gt;{Term}\u0026lt;/span\u0026gt;\u0026lt;/strong\u0026gt;\u0026quot;))))) ) paths \u0026lt;- paths %\u0026gt;% group_by(type) %\u0026gt;% arrange(desc(Combined.Score), .by_group = TRUE) paths$class_with_color \u0026lt;- factor(paths$class_with_color, levels = rev(unique(paths$class_with_color))) ggplot(paths, aes(x = type, y = class_with_color)) + geom_point(aes(size = Adjusted.P.value, color = Combined.Score)) + theme_bw(base_size = 8) + scale_colour_gradient(limits = c(0, max(paths$Combined.Score) + 0.5), high = \u0026quot;#2b9348\u0026quot;, low = \u0026quot;#eeef20\u0026quot;) + xlab(NULL) + ylab(NULL) + ggtitle(NULL) + labs(color = \u0026quot;Combined Score\u0026quot;, size = \u0026quot;-log10(padj)\u0026quot;) + theme(axis.text.y = element_markdown(), axis.text = element_text(size = 12)) ################################## ########### Figure S3C ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- factor(data$timpoint) data$cluster \u0026lt;- factor(new_cluster) data \u0026lt;- SeuratWrappers::RunALRA(data) data \u0026lt;- ScaleData(data, features = rownames(data)) ## Fatty Acid Oxidation genes1 \u0026lt;- c('Abcb11', 'Abcd1', 'Abcd2', 'Abcd3', 'Abcd4', 'Acaa1a', 'Acaa1b', 'Acaa2', 'Acacb', 'Acad11', 'Acadl', 'Acadm', 'Acads', 'Acadvl', 'Acat1', 'Acat2', 'Acat3', 'Acox1', 'Acox2', 'Acox3', 'Acoxl', 'Acsbg2', 'Acsl5', 'Adh4', 'Adh5', 'Adh7', 'Adipoq', 'Adipor1', 'Adipor2', 'Akt1', 'Akt2', 'Alox12', 'Appl2', 'Auh', 'Bdh2', 'C1qtnf2', 'C1qtnf9', 'Cd36', 'Cnr1', 'Cpt1a', 'Cpt2', 'Crat', 'Crot', 'Cygb', 'Cyp4v3', 'Cyp24a1', 'Dbi', 'Decr1', 'Dgat1', 'Dgat2', 'Echdc1', 'Echdc2', 'Echs1', 'Eci1', 'Eci2', 'Eci3', 'Ehhadh', 'Etfa', 'Etfb', 'Etfbkmt', 'Etfdh', 'Fabp1', 'Fabp3', 'Gcdh', 'Gm45753', 'Gm49387', 'Hacl1', 'Hadh', 'Hadha', 'Hadhb', 'Hao1', 'Hao2', 'Hsd17b4', 'Hsd17b10', 'Ilvbl', 'Irs1', 'Irs2', 'Ivd', 'Lep', 'Lonp2', 'Mapk14', 'Mfsd2a', 'Mir199a-2', 'Mir214', 'Mir696', 'Mlycd', 'Mtor', 'Nr4a3', 'Nucb2', 'Pdk4', 'Pex2', 'Pex5', 'Pex7', 'Pex13', 'Phyh', 'Plin5', 'Por', 'Ppara', 'Ppard', 'Pparg', 'Ppargc1a', 'Prkaa1', 'Scp2', 'Sesn2', 'Sirt4', 'Slc25a17', 'Slc27a2', 'Sox9', 'Twist1', 'Tysnd1') genes1 \u0026lt;- genes1[genes1 %in% rownames(data)] mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) ht1 \u0026lt;- DoHeatmap(data, features = genes1, angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Expression') y \u0026lt;- ht1$data %\u0026gt;% drop_na() x \u0026lt;- y %\u0026gt;% group_by(Identity) %\u0026gt;% select(Feature, Cell, Identity, Expression) %\u0026gt;% spread(key = Feature, value = Expression) w \u0026lt;- y %\u0026gt;% select(Feature, Cell, Expression) %\u0026gt;% spread(key = Cell, value = Expression) %\u0026gt;% column_to_rownames(\u0026quot;Feature\u0026quot;) %\u0026gt;% as.matrix() pt \u0026lt;- Heatmap(w, cluster_columns = FALSE) DoHeatmap(data, features = rownames(w)[row_order(pt)], angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Expression') + ggtitle('Fatty Acid Oxidation') + theme(plot.title = element_text(hjust = 0.5)) ## Tricarboxylic Acid Cycle genes2 \u0026lt;- c('4933405O20Rik', 'Aco1', 'Aco2', 'Cs', 'Csl', 'Dhtkd1', 'Dlat', 'Dlst', 'Fh1', 'Idh1', 'Idh2', 'Idh3a', 'Idh3b', 'Idh3g', 'Ireb2', 'Mdh1', 'Mdh1b', 'Mdh2', 'Ndufs4', 'Ogdh', 'Ogdhl', 'Pdha1', 'Pdha2', 'Pdhb', 'Sdha', 'Sdhaf2', 'Sdhb', 'Sdhc', 'Sdhd', 'Sucla2', 'Suclg1', 'Suclg2') genes2 \u0026lt;- genes2[genes2 %in% rownames(data)] mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) ht1 \u0026lt;- DoHeatmap(data, features = genes2, angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Expression') y \u0026lt;- ht1$data %\u0026gt;% drop_na() x \u0026lt;- y %\u0026gt;% group_by(Identity) %\u0026gt;% select(Feature, Cell, Identity, Expression) %\u0026gt;% spread(key = Feature, value = Expression) w \u0026lt;- y %\u0026gt;% select(Feature, Cell, Expression) %\u0026gt;% spread(key = Cell, value = Expression) %\u0026gt;% column_to_rownames(\u0026quot;Feature\u0026quot;) %\u0026gt;% as.matrix() pt \u0026lt;- Heatmap(w, cluster_columns = FALSE) DoHeatmap(data, features = rownames(w)[row_order(pt)], angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Expression') + ggtitle('Tricarboxylic Acid Cycle') + theme(plot.title = element_text(hjust = 0.5)) ## Fat Acid Transport genes3 \u0026lt;- c('Abcc1', 'Abcc2', 'Abcc4', 'Abcd1', 'Abcd2', 'Abcd3', 'Abcd4', 'Ace', 'Acsl1', 'Acsl3', 'Acsl4', 'Acsl5', 'Acsl6', 'Agtr2', 'Akt1', 'Akt2', 'Anxa1', 'Apoe', 'Atp5j', 'Avpr1b', 'Bdkrb2', 'Cd36', 'Cpt1b', 'Crot', 'Cyp4f18', 'Drd2', 'Drd3', 'Drd4', 'Edn1', 'Eprs', 'Erfe', 'Fabp1', 'Fabp2', 'Fabp3', 'Fabp4', 'Fabp5', 'Hnf1a', 'Hrh2', 'Il1a', 'Il1b', 'Irs2', 'Kiss1r', 'Lep', 'Lhcgr', 'Map2k6', 'Mapk9', 'Mfsd2a', 'Mif', 'Nmb', 'Nmur2', 'Nos2', 'Ntsr1', 'Oc90', 'Oxt', 'P2rx7', 'P2ry2', 'Pla2g1b', 'Pla2g2c', 'Pla2g2d', 'Pla2g2e', 'Pla2g2f', 'Pla2g3', 'Pla2g4a', 'Pla2g4f', 'Pla2g5', 'Pla2g6', 'Pla2g10', 'Pla2g12a', 'Pla2g12b', 'Pla2r1', 'Plin2', 'Pnpla8', 'Pparg', 'Ptges', 'Repin1', 'Rps6kb1', 'Slc2a1', 'Slc5a8', 'Slc22a22', 'Slc25a17', 'Slc27a1', 'Slc27a2', 'Slc27a3', 'Slc27a4', 'Slc27a5', 'Slc27a6', 'Slco2a1', 'Slco3a1', 'Spx', 'Sstr4', 'Syk', 'Thbs1', 'Tnfrsf11a', 'Tnfsf11') genes3 \u0026lt;- genes3[genes3 %in% rownames(data)] mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) ht1 \u0026lt;- DoHeatmap(data, features = genes3, angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Expression') y \u0026lt;- ht1$data %\u0026gt;% drop_na() x \u0026lt;- y %\u0026gt;% group_by(Identity) %\u0026gt;% select(Feature, Cell, Identity, Expression) %\u0026gt;% spread(key = Feature, value = Expression) w \u0026lt;- y %\u0026gt;% select(Feature, Cell, Expression) %\u0026gt;% spread(key = Cell, value = Expression) %\u0026gt;% column_to_rownames(\u0026quot;Feature\u0026quot;) %\u0026gt;% as.matrix() pt \u0026lt;- Heatmap(w, cluster_columns = FALSE) DoHeatmap(data, features = rownames(w)[row_order(pt)], angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Expression') + ggtitle('Fat Acid Transport') + theme(plot.title = element_text(hjust = 0.5)) ## Triglyceride/Fatty Acid Cycle genes4 \u0026lt;- c('Aadac', 'Abhd5', 'Daglb', 'Pnpla2', 'Pck1', 'Pcx' , 'Gpd1', 'Slc2a4', 'Lipe', 'Adrb3') genes4 \u0026lt;- genes4[genes4 %in% rownames(data)] mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) ht1 \u0026lt;- DoHeatmap(data, features = genes4, angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Expression') y \u0026lt;- ht1$data %\u0026gt;% drop_na() x \u0026lt;- y %\u0026gt;% group_by(Identity) %\u0026gt;% select(Feature, Cell, Identity, Expression) %\u0026gt;% spread(key = Feature, value = Expression) w \u0026lt;- y %\u0026gt;% select(Feature, Cell, Expression) %\u0026gt;% spread(key = Cell, value = Expression) %\u0026gt;% column_to_rownames(\u0026quot;Feature\u0026quot;) %\u0026gt;% as.matrix() pt \u0026lt;- Heatmap(w, cluster_columns = FALSE) DoHeatmap(data, features = rownames(w)[row_order(pt)], angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Expression') + ggtitle('Triglyceride/Fatty Acid Cycle') + theme(plot.title = element_text(hjust = 0.5)) ## de novo Lipogenesis genes5 \u0026lt;- c('Acly', 'Acaca', 'Scd', 'Gpat', 'Dgat2', 'Fabp4', 'Fabp5', 'Fasn', 'Lpl', 'Pnpla5', 'Slc27a5', 'Srebf1', 'Acad9', 'Acsl3', 'Acsl5', 'Acss2', 'Elovl5', 'Elovl6', 'Hadh', 'Hao3', 'Hpgd', 'Insig1', 'Pcsk9', 'Sc5d', 'Ucp2', 'Gk2', 'Ces3', 'Ppap2a', 'Ppap2c') genes5 \u0026lt;- genes5[genes5 %in% rownames(data)] mapal \u0026lt;- colorRampPalette(RColorBrewer::brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) ht1 \u0026lt;- DoHeatmap(data, features = genes5, angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Expression') y \u0026lt;- ht1$data %\u0026gt;% drop_na() x \u0026lt;- y %\u0026gt;% group_by(Identity) %\u0026gt;% dplyr::select(Feature, Cell, Identity, Expression) %\u0026gt;% tidyr::spread(key = Feature, value = Expression) w \u0026lt;- y %\u0026gt;% dplyr::select(Feature, Cell, Expression) %\u0026gt;% tidyr::spread(key = Cell, value = Expression) %\u0026gt;% column_to_rownames(\u0026quot;Feature\u0026quot;) %\u0026gt;% as.matrix() pt \u0026lt;- Heatmap(w, cluster_columns = FALSE) DoHeatmap(data, features = rownames(w)[row_order(pt)], angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'Expression') + ggtitle('de novo Lipogenesis') + theme(plot.title = element_text(hjust = 0.5)) ################################## ########### Figure S3H ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster count_raw \u0026lt;- data@assays$SCT@counts[, rownames(data@meta.data)] count_norm \u0026lt;- apply(count_raw, 2, function(x) (x/sum(x))*10000) ort \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/Orthologs_human_mouse.txt\u0026quot;, sep = \u0026quot;,\u0026quot;, header = TRUE) mat \u0026lt;- merge(ort, count_norm, by.x = \u0026quot;Mouse.gene.name\u0026quot;, by.y = \u0026quot;row.names\u0026quot;) mat$Mouse.gene.name \u0026lt;- mat$Gene.stable.ID \u0026lt;- mat$Mouse.gene.stable.ID \u0026lt;- NULL colnames(mat)[1] \u0026lt;- \u0026quot;Gene\u0026quot; anno \u0026lt;- data.frame(Cell = names(Idents(data)), cluster = Idents(data), row.names = NULL) write.table(mat, \u0026quot;/Users/biagi/PhD/Adipocyte/cellphonedb/counts.txt\u0026quot;, row.names = FALSE, col.names = TRUE, sep = \u0026quot;\\t\u0026quot;, quote = FALSE) write.table(anno, \u0026quot;/Users/biagi/PhD/Adipocyte/cellphonedb/meta.txt\u0026quot;, row.names = FALSE, col.names = TRUE, sep = \u0026quot;\\t\u0026quot;, quote = FALSE) ## Python cd /Users/biagi/PhD/Adipocyte/cellphonedb cellphonedb method statistical_analysis meta.txt counts.txt --threads=16 --counts-data=gene_name --pvalue=0.05 --iterations=1000 ################################## ########### Figure S3I ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) data$timpoint \u0026lt;- gsub('4day', 'Cold', data$timpoint) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) Idents(data) \u0026lt;- as.factor(data$timpoint) data \u0026lt;- subset(data, cells = names(which(data$timpoint == 'CL' | data$timpoint == 'RT'))) DefaultAssay(data) \u0026lt;- \u0026quot;RNA\u0026quot; mat \u0026lt;- data@assays$RNA@data fdata \u0026lt;- data.frame(gene_short_name = rownames(data), row.names = rownames(data)) pdata \u0026lt;- data@meta.data pd \u0026lt;- new(\u0026quot;AnnotatedDataFrame\u0026quot;, data = pdata) fd \u0026lt;- new(\u0026quot;AnnotatedDataFrame\u0026quot;, data = fdata) cds \u0026lt;- newCellDataSet(as(mat, \u0026quot;dgCMatrix\u0026quot;), phenoData = pd, featureData = fd, expressionFamily = negbinomial.size()) rm(data, mat, fdata, pdata, fd, pd) cds \u0026lt;- estimateSizeFactors(cds) cds \u0026lt;- estimateDispersions(cds) cds \u0026lt;- detectGenes(cds, min_expr = 0.1) expressed_genes \u0026lt;- row.names(subset(fData(cds), num_cells_expressed \u0026gt;= 10)) diff_test_res \u0026lt;- differentialGeneTest(cds[expressed_genes, ], fullModelFormulaStr = \u0026quot;~cluster\u0026quot;, cores = 6, verbose = TRUE) ordering_genes \u0026lt;- row.names(subset(diff_test_res, qval \u0026lt; 0.01)) cds \u0026lt;- setOrderingFilter(cds, ordering_genes) cds \u0026lt;- reduceDimension(cds, max_components = 2, method = 'DDRTree', verbose = TRUE) cds \u0026lt;- orderCells(cds) cds \u0026lt;- orderCells(cds, root_state = 3) plot_cell_trajectory(cds, color_by = \u0026quot;timpoint\u0026quot;) plot_cell_trajectory(cds, color_by=\u0026quot;State\u0026quot;, state_number_size = 1) + facet_wrap(~State) plotMonocle(cds, c('Ucp1', 'Ppara', 'Dio2', 'Chst1', 'Plppr3', 'Nnat', 'Pim1', 'Adcy3', 'Cs')) ################################## ########### Figure S3J ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) data$timpoint \u0026lt;- gsub('4day', 'Cold', data$timpoint) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) Idents(data) \u0026lt;- as.factor(data$timpoint) data \u0026lt;- subset(data, cells = names(which(data$timpoint == 'Cold' | data$timpoint == 'RT'))) DefaultAssay(data) \u0026lt;- \u0026quot;RNA\u0026quot; mat \u0026lt;- data@assays$RNA@data fdata \u0026lt;- data.frame(gene_short_name = rownames(data), row.names = rownames(data)) pdata \u0026lt;- data@meta.data pd \u0026lt;- new(\u0026quot;AnnotatedDataFrame\u0026quot;, data = pdata) fd \u0026lt;- new(\u0026quot;AnnotatedDataFrame\u0026quot;, data = fdata) cds \u0026lt;- newCellDataSet(as(mat, \u0026quot;dgCMatrix\u0026quot;), phenoData = pd, featureData = fd, expressionFamily = negbinomial.size()) rm(data, mat, fdata, pdata, fd, pd) cds \u0026lt;- estimateSizeFactors(cds) cds \u0026lt;- estimateDispersions(cds) cds \u0026lt;- detectGenes(cds, min_expr = 0.1) expressed_genes \u0026lt;- row.names(subset(fData(cds), num_cells_expressed \u0026gt;= 10)) diff_test_res \u0026lt;- differentialGeneTest(cds[expressed_genes, ], fullModelFormulaStr = \u0026quot;~cluster\u0026quot;, cores = 6, verbose = TRUE) ordering_genes \u0026lt;- row.names(subset(diff_test_res, qval \u0026lt; 0.01)) cds \u0026lt;- setOrderingFilter(cds, ordering_genes) cds \u0026lt;- reduceDimension(cds, max_components = 2, method = 'DDRTree', verbose = TRUE) cds \u0026lt;- orderCells(cds) cds \u0026lt;- orderCells(cds, root_state = 4) plot_cell_trajectory(cds, color_by = \u0026quot;timpoint\u0026quot;) plot_cell_trajectory(cds, color_by=\u0026quot;State\u0026quot;, state_number_size = 1) + facet_wrap(~State) plotMonocle(cds, c('Ucp1', 'Ppara', 'Dio2', 'Ccdc80', 'Slc7a10', 'Tmem43', 'Adcy3', 'Perm1', 'Fabp3'))  Figure S4 ## Loading R packages library(circlize) library(ComplexHeatmap) library(dplyr) library(ggplot2) library(ggpubr) library(ggrepel) library(RColorBrewer) library(Seurat) library(SeuratWrappers) library(tibble) library(tidyr) ################################## ########### Figure S4A ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) Idents(data) \u0026lt;- as.factor(data$timpoint) data \u0026lt;- subset(data, cells = names(which(data$timpoint == '4day' | data$timpoint == 'RT' | data$timpoint == 'CL'))) Idents(data) \u0026lt;- data$cluster data \u0026lt;- subset(data, idents = list('Ad1', 'Ad2', 'Ad5')) plotList \u0026lt;- list() genes \u0026lt;- c('Ppara', 'Dio2', 'Prdm16', 'Elovl3', 'Cox8b') for (i in 1:length(genes)) { data$gene \u0026lt;- factor(ifelse(data@assays$SCT@data[genes[i], ] \u0026gt; 0, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;)) df \u0026lt;- data.frame( class = c(\u0026quot;Ad1\u0026quot;, \u0026quot;Ad2\u0026quot;, 'Ad5'), n = c(sum(Idents(data) == 'Ad1'), sum(Idents(data) == 'Ad2'), sum(Idents(data) == 'Ad5')), value = c(round((length(names(data$cluster[data$cluster == 'Ad1'])[names(data$cluster[data$cluster == 'Ad1']) %in% names(data$gene[which(data$gene == 'High')])])/sum(Idents(data) == 'Ad1'))*100, 2), round((length(names(data$cluster[data$cluster == 'Ad2'])[names(data$cluster[data$cluster == 'Ad2']) %in% names(data$gene[which(data$gene == 'High')])])/sum(Idents(data) == 'Ad2'))*100, 2), round((length(names(data$cluster[data$cluster == 'Ad5'])[names(data$cluster[data$cluster == 'Ad5']) %in% names(data$gene[which(data$gene == 'High')])])/sum(Idents(data) == 'Ad5'))*100, 2))) df$class \u0026lt;- factor(df$class, levels = c(\u0026quot;Ad1\u0026quot;, \u0026quot;Ad2\u0026quot;, \u0026quot;Ad5\u0026quot;)) df \u0026lt;- df %\u0026gt;% arrange(desc(class)) %\u0026gt;% mutate(text_y = cumsum(value) - value/2) df$pos = (cumsum(c(0, df$value)) + c(df$value / 2, .01))[1:nrow(df)] plotList[[i]] \u0026lt;- ggplot(df, aes(x = \u0026quot;\u0026quot;, y = value, fill = class)) + geom_bar(width = 1, stat = \u0026quot;identity\u0026quot;, color = \u0026quot;white\u0026quot;) + coord_polar(\u0026quot;y\u0026quot;, start = 0)+ scale_fill_manual(values = c(\u0026quot;#11c78b\u0026quot;, \u0026quot;#800080\u0026quot;, \u0026quot;#dfdf0d\u0026quot;)) + theme_void() + labs(fill = \u0026quot;Clusters\u0026quot;) + geom_text_repel(aes(x = 1.5, y = pos, label = paste0(value, \u0026quot;%\u0026quot;)), nudge_x = .1, segment.size = .7, show.legend = FALSE) + ggtitle(genes[i]) } ggarrange(plotlist = plotList) ################################## ########### Figure S4B ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) data \u0026lt;- subset(data, idents = list('Ad1')) data \u0026lt;- ScaleData(data, features = rownames(data)) data$UCP1 \u0026lt;- factor(ifelse(data@assays$SCT@data[\u0026quot;Ucp1\u0026quot;, ] \u0026gt; 0, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;)) Idents(data) \u0026lt;- data$UCP1 markers \u0026lt;- FindAllMarkers(data, logfc.threshold = 0, only.pos = FALSE) markers \u0026lt;- subset(markers, p_val_adj \u0026lt; 0.05 \u0026amp; cluster == 'High') markers \u0026lt;- markers[order(markers$avg_logFC, decreasing = TRUE), ] mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) DoHeatmap(data, features = markers$gene, angle = 0, size = 5, label = FALSE) + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 3)) + labs(color = 'UCP1 Expression') ################################## ########### Figure S4C ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) data \u0026lt;- subset(data, idents = list('Ad1')) tmp1 \u0026lt;- factor(ifelse(data@assays$SCT@data[\u0026quot;Ucp1\u0026quot;, ] \u0026gt; 0, \u0026quot;Ad1_High\u0026quot;, \u0026quot;Ad1_Low\u0026quot;)) data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) data \u0026lt;- subset(data, idents = list('Ad1')) tmp2 \u0026lt;- as.character(Idents(data)) tmp3 \u0026lt;- names(Idents(data)) tmp2[which(tmp3 %in% names(tmp1[tmp1 == 'Ad1_High']))] \u0026lt;- 'Ad1_High' tmp2[which(tmp3 %in% names(tmp1[tmp1 == 'Ad1_Low']))] \u0026lt;- 'Ad1_Low' tmp \u0026lt;- as.factor(structure(tmp2, names = tmp3)) Idents(data) \u0026lt;- tmp data$cluster \u0026lt;- Idents(data) data \u0026lt;- SeuratWrappers::RunALRA(data) data \u0026lt;- ScaleData(data, features = rownames(data)) ## SERCA2 genes \u0026lt;- c('Atp2a1', 'Atp2a2', 'Tmtc4', 'Adra1a', 'Arpc2') genes \u0026lt;- genes[genes %in% rownames(data)] mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) ht1 \u0026lt;- DoHeatmap(data, features = genes, angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'UCP1 Expression') y \u0026lt;- ht1$data %\u0026gt;% drop_na() x \u0026lt;- y %\u0026gt;% group_by(Identity) %\u0026gt;% select(Feature, Cell, Identity, Expression) %\u0026gt;% spread(key = Feature, value = Expression) w \u0026lt;- y %\u0026gt;% select(Feature, Cell, Expression) %\u0026gt;% spread(key = Cell, value = Expression) %\u0026gt;% column_to_rownames(\u0026quot;Feature\u0026quot;) %\u0026gt;% as.matrix() pt \u0026lt;- Heatmap(w, cluster_columns = FALSE) DoHeatmap(data, features = rownames(w)[row_order(pt)], angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'UCP1 Expression') + ggtitle('SERCA2') + theme(plot.title = element_text(hjust = 0.5)) ## Arginine/creatine and proline metabolism v genes \u0026lt;- c('Slc6a8', 'Gatm', 'Gamt', 'Ckmt1', 'Ckmt2') genes \u0026lt;- genes[genes %in% rownames(data)] mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) ht1 \u0026lt;- DoHeatmap(data, features = genes, angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'UCP1 Expression') y \u0026lt;- ht1$data %\u0026gt;% drop_na() x \u0026lt;- y %\u0026gt;% group_by(Identity) %\u0026gt;% select(Feature, Cell, Identity, Expression) %\u0026gt;% spread(key = Feature, value = Expression) w \u0026lt;- y %\u0026gt;% select(Feature, Cell, Expression) %\u0026gt;% spread(key = Cell, value = Expression) %\u0026gt;% column_to_rownames(\u0026quot;Feature\u0026quot;) %\u0026gt;% as.matrix() pt \u0026lt;- Heatmap(w, cluster_columns = FALSE) DoHeatmap(data, features = rownames(w)[row_order(pt)], angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'UCP1 Expression') + ggtitle('Arginine/creatine and proline metabolism v') + theme(plot.title = element_text(hjust = 0.5)) ## Glycolytic process genes \u0026lt;- c('Actn3', 'Adpgk', 'Aldoa', 'Aldoart1', 'Aldoart2', 'Aldob', 'Aldoc', 'App', 'Bpgm', 'Cbfa2t3', 'Ddit4', 'Dhtkd1', 'Eif6', 'Eno1', 'Eno1b', 'Eno2', 'Eno3', 'Eno4', 'Entpd5', 'Ep300', 'Esrrb', 'Fbp1', 'Foxk1', 'Foxk2', 'Gale', 'Galk1', 'Galt', 'Gapdh', 'Gapdhs', 'Gck', 'Gm3839', 'Gm10358', 'Gm11214', 'Gm12117', 'Gm15294', 'Gpd1', 'Gpi1', 'Hdac4', 'Hif1a', 'Hk1', 'Hk2', 'Hk3', 'Hkdc1', 'Htr2a', 'Ier3', 'Ifng', 'Igf1', 'Il3', 'Ins2', 'Insr', 'Jmjd8', 'Khk', 'Mif', 'Mlxipl', 'Mpi', 'Mtch2', 'Myc', 'Myog', 'Ncor1', 'Nupr1', 'Ogdh', 'Ogt', 'P2rx7', 'Pfkfb2', 'Pfkl', 'Pfkm', 'Pfkp', 'Pgam1', 'Pgam2', 'Pgk1', 'Pgk2', 'Pklr', 'Pkm', 'Ppara', 'Ppargc1a', 'Prkaa1', 'Prkaa2', 'Prkag2', 'Prkag3', 'Prxl2c', 'Psen1', 'Sirt6', 'Slc2a6', 'Slc4a1', 'Slc4a4', 'Stat3', 'Tigar', 'Tkfc', 'Tpi1', 'Trex1', 'Zbtb7a', 'Zbtb20') genes \u0026lt;- genes[genes %in% rownames(data)] mapal \u0026lt;- colorRampPalette(brewer.pal(11,\u0026quot;RdBu\u0026quot;))(256) ht1 \u0026lt;- DoHeatmap(data, features = genes, angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'UCP1 Expression') y \u0026lt;- ht1$data %\u0026gt;% drop_na() x \u0026lt;- y %\u0026gt;% group_by(Identity) %\u0026gt;% select(Feature, Cell, Identity, Expression) %\u0026gt;% spread(key = Feature, value = Expression) w \u0026lt;- y %\u0026gt;% select(Feature, Cell, Expression) %\u0026gt;% spread(key = Cell, value = Expression) %\u0026gt;% column_to_rownames(\u0026quot;Feature\u0026quot;) %\u0026gt;% as.matrix() pt \u0026lt;- Heatmap(w, cluster_columns = FALSE) DoHeatmap(data, features = rownames(w)[row_order(pt)], angle = 0, size = 5, label = FALSE, group.by = 'cluster') + scale_fill_gradientn(colours = rev(mapal)) + theme(axis.text = element_text(size = 6)) + labs(color = 'UCP1 Expression') + ggtitle('Glycolytic Process') + theme(plot.title = element_text(hjust = 0.5)) ################################## ########### Figure S4G ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/Adipocytes.rds\u0026quot;) infos \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/SCCAF/AdipocytesOnly/results/obs.csv\u0026quot;) ort \u0026lt;- read.table(\u0026quot;/Users/biagi/PhD/Adipocyte/Orthologs_human_mouse.txt\u0026quot;, sep = \u0026quot;,\u0026quot;, header = TRUE) new_cluster \u0026lt;- infos$L1_result names(new_cluster) \u0026lt;- rownames(infos) new_cluster \u0026lt;- new_cluster + 1 new_cluster \u0026lt;- paste0(\u0026quot;Ad\u0026quot;, new_cluster) new_cluster \u0026lt;- as.factor(new_cluster) Idents(data) \u0026lt;- new_cluster data$cluster \u0026lt;- Idents(data) data \u0026lt;- subset(data, idents = list('Ad1')) data \u0026lt;- ScaleData(data, features = rownames(data)) data$UCP1 \u0026lt;- factor(ifelse(data@assays$SCT@data[\u0026quot;Ucp1\u0026quot;, ] \u0026gt; 0, \u0026quot;High\u0026quot;, \u0026quot;Low\u0026quot;)) Idents(data) \u0026lt;- data$UCP1 genes \u0026lt;- unique(c('SLC4A4', 'TXNIP', 'HADHB', 'HADHA', 'ITPR1', 'ATP6V1H', 'ESRRA', 'ETFDH', 'EGLN1', 'SLC25A42', 'NEAT1', 'ATXN2', 'SLC25A20', 'SUCLA2', 'HADHB', 'HADHA', 'SF3B2', 'UHRF1BP1L', 'COL27A1', 'PANK1', 'TECPR1', 'TOMM40', 'SLC20A2', 'AKAP1', 'ABCD3', 'EHHADH', 'TOB2', 'DEPTOR', 'PDK4', 'ITPR1', 'CNTNAP1', 'SIRT3', 'WDR91', 'CS', 'LRRC39', 'UHRF1BP1L', 'ESRRA', 'RBPMS', 'ACO2', 'KCNK3', 'GPD2', 'ATP1A2', 'ANK2', 'SDC4', 'FGD4', 'PKN1', 'RBPMS', 'HK2', 'PKM')) genes \u0026lt;- ort$Mouse.gene.name[which(ort$Gene.name %in% genes)] genes \u0026lt;- genes[genes %in% rownames(data)] tabHigh \u0026lt;- as.matrix(data@assays$SCT@data[genes, names(data$UCP1)[which(data$UCP1 == 'High')]]) tabLow \u0026lt;- as.matrix(data@assays$SCT@data[genes, names(data$UCP1)[which(data$UCP1 == 'Low')]]) df \u0026lt;- data.frame(High = rowSums(tabHigh), Low = rowSums(tabLow)) df \u0026lt;- t(df) x \u0026lt;- as.matrix(df) m = apply(x, 1, mean, na.rm = TRUE) s = apply(x, 1, sd, na.rm = TRUE) res \u0026lt;- (x - m)/s cn = colnames(res) ba \u0026lt;- HeatmapAnnotation( text = anno_text(cn, rot = 0, location = unit(0.9, \u0026quot;npc\u0026quot;), just = \u0026quot;centre\u0026quot;, gp = gpar(fontsize = 3)), annotation_height = max_text_width(cn) ) breaks \u0026lt;- seq(-2,2, by= 0.1) Heatmap(as.matrix(res), bottom_annotation = ba, name = \u0026quot;zscore\u0026quot;, column_title = \u0026quot;Ad1 UCP1 Targets TF High\u0026quot;, width = 1, show_row_names = TRUE, show_column_names = FALSE, cluster_rows = FALSE, cluster_columns = TRUE, col = colorRamp2(breaks, colorRampPalette(rev(brewer.pal(n = 10, name = \u0026quot;RdBu\u0026quot;)))(41)), heatmap_height = unit(6, \u0026quot;cm\u0026quot;), row_names_gp = gpar(fontsize = 8)) genes \u0026lt;- unique(c('ACSL1', 'CIDEC', 'SLC1A5', 'RETN', 'FASN', 'ADRB3', 'ABCC5', 'SH3PXD2A', 'NRIP1', 'FASN', 'SLC1A5', 'XIST', 'ACSL1', 'SH3PXD2A', 'ABCC5', 'ACACA', 'GHR', 'SH3PXD2A', 'SORBS1', 'MAPK6')) genes \u0026lt;- ort$Mouse.gene.name[which(ort$Gene.name %in% genes)] genes \u0026lt;- genes[genes %in% rownames(data)] tabHigh \u0026lt;- as.matrix(data@assays$SCT@data[genes, names(data$UCP1)[which(data$UCP1 == 'High')]]) tabLow \u0026lt;- as.matrix(data@assays$SCT@data[genes, names(data$UCP1)[which(data$UCP1 == 'Low')]]) df \u0026lt;- data.frame(High = rowSums(tabHigh), Low = rowSums(tabLow)) df \u0026lt;- t(df) x \u0026lt;- as.matrix(df) m = apply(x, 1, mean, na.rm = TRUE) s = apply(x, 1, sd, na.rm = TRUE) res \u0026lt;- (x - m)/s cn = colnames(res) ba \u0026lt;- HeatmapAnnotation( text = anno_text(cn, rot = 0, location = unit(0.9, \u0026quot;npc\u0026quot;), just = \u0026quot;centre\u0026quot;, gp = gpar(fontsize = 8)), annotation_height = max_text_width(cn) ) breaks \u0026lt;- seq(-2,2, by= 0.1) Heatmap(as.matrix(res), bottom_annotation = ba, name = \u0026quot;zscore\u0026quot;, column_title = \u0026quot;Ad1 UCP1 Targets TF Low\u0026quot;, width = 1, show_row_names = TRUE, show_column_names = FALSE, cluster_rows = FALSE, cluster_columns = TRUE, col = colorRamp2(breaks, colorRampPalette(rev(brewer.pal(n = 10, name = \u0026quot;RdBu\u0026quot;)))(41)), heatmap_height = unit(6, \u0026quot;cm\u0026quot;), row_names_gp = gpar(fontsize = 8))  ","date":1602115200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602115200,"objectID":"3f90ad597f784946449bccd10094c4e9","permalink":"https://cbiagii.github.io/AdipoSNAP/post/11_supplementary_figures/","publishdate":"2020-10-08T00:00:00Z","relpermalink":"/AdipoSNAP/post/11_supplementary_figures/","section":"post","summary":"Figure S1 ## Loading R packages library(dplyr) library(enrichR) library(ggplot2) library(ggpubr) library(metacell) library(pheatmap) library(Seurat) ################################## ########### Figure S1A ########### ################################## data \u0026lt;- readRDS(\u0026quot;/Users/biagi/PhD/Adipocyte/output/10x/10x_Processed.rds\u0026quot;) Idents(data) \u0026lt;- factor(data$CellTypeRefined) TSNEPlot(data, label = FALSE, pt.size = 0.","tags":null,"title":"11 - Supplementary Figures","type":"post"}]